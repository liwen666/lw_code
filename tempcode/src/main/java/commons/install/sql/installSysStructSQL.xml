<?xml version="1.0" encoding="UTF-8"?>
<INSTALL_SQL>
  <TYPE>
    <SQL>
      <OBJECT_NAME>ID_NAME_MAP</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE TYPE ID_NAME_MAP as object(
       idStr   varchar2(30),
       nameStr varchar2(30)
)]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>TYPE_BGT_REC_TAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE TYPE TYPE_BGT_REC_TAB as object (
TABLEID   varchar2(32),
BASESECU  char(1),
EXTADD    char(1),
EXTDEL    char(1),
EXTUPDATE char(1)
)]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>TYPE_BGT_TAB_SECUTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE TYPE TYPE_BGT_TAB_SECUTAB AS  TABLE OF TYPE_BGT_REC_TAB;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>TYPE_BGT_ROW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE TYPE TYPE_BGT_ROW as table of varchar2(4000)]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>TYPE_BGT_SECUROLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE TYPE TYPE_BGT_SECUROLE as table of varchar2(40);]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CONNSTRIMPLA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE TYPE CONNSTRIMPLA as object
      (
        currentstr varchar2(4000),
        currentseprator varchar2(80),
        static function ODCIAggregateInitialize(sctx IN OUT connstrImplA)  return number,
        member function ODCIAggregateIterate(self IN OUT connstrImplA, value IN VARCHAR2) return number,
        member function ODCIAggregateTerminate(self IN connstrImplA,returnValue OUT VARCHAR2, flags IN number) return number,
    member function ODCIAggregateMerge(self IN OUT connstrImplA, ctx2 IN connstrImplA) return number
      )]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CONNSTRIMPLCLOB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE TYPE CONNSTRIMPLCLOB as object
      (
        currentstr varchar2(32000),
        currentseprator varchar2(80),
        static function ODCIAggregateInitialize(sctx IN OUT CONNSTRIMPLCLOB)
          return number,
        member function ODCIAggregateIterate(self IN OUT CONNSTRIMPLCLOB,
          value IN VARCHAR2) return number,
        member function ODCIAggregateTerminate(self IN CONNSTRIMPLCLOB,
          returnValue OUT clob, flags IN number) return number,
        member function ODCIAggregateMerge(self IN OUT CONNSTRIMPLCLOB,
          ctx2 IN CONNSTRIMPLCLOB) return number
      )]]></SQL_CONTENT>
    </SQL>
  </TYPE>
  <SEQUENCE>
    <SQL>
      <OBJECT_NAME>SECU_SEQ_FQ</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE SEQUENCE SECU_SEQ_FQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 START WITH 1 INCREMENT BY 1 CACHE 20]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>S_INDI_LOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE SEQUENCE S_INDI_LOG MINVALUE 1 MAXVALUE 9999999999999999999999999999 START WITH 1 INCREMENT BY 1 NOCACHE ORDER]]></SQL_CONTENT>
    </SQL>
  </SEQUENCE>
  <TABLE>
    <SQL>
      <OBJECT_NAME>P#KPI_T_SETDEPTEVAL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_SETDEPTEVAL 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	SUPERGUID VARCHAR2(32), 
	EVALNAME VARCHAR2(200), 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ISLEAF CHAR(1), 
	SCORE NUMBER(9,0) DEFAULT 0, 
	REQUIREDCHILD CHAR(1), 
	EXPLANATION VARCHAR2(500), 
	STANDARD VARCHAR2(500), 
	ISINSERT CHAR(1) DEFAULT 0, 
	KPIPROP CHAR(1) DEFAULT '1', 
	 CONSTRAINT PK_P#KPI_T_SETDEPTEVAL PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_SETFINEVAL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_SETFINEVAL 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	SUPERGUID VARCHAR2(32), 
	EVALNAME VARCHAR2(200), 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ISLEAF CHAR(1), 
	SCORE NUMBER(9,0) DEFAULT 0, 
	REQUIREDCHILD CHAR(1), 
	EXPLANATION VARCHAR2(500), 
	STANDARD VARCHAR2(500), 
	ISINSERT CHAR(1) DEFAULT 0, 
	KPIPROP CHAR(1) DEFAULT '1', 
	 CONSTRAINT PK_P#KPI_T_SETFINEVAL PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_CONFIRMFUNC</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE BGT_T_CONFIRMFUNC 
   (	GUID VARCHAR2(32), 
	NAME VARCHAR2(250), 
	SUPERGUID VARCHAR2(32) DEFAULT '0', 
	ISLEAF CHAR(1) DEFAULT '1', 
	CODE VARCHAR2(250)
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_SETPROJEVAL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_SETPROJEVAL 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	SUPERGUID VARCHAR2(32), 
	EVALNAME VARCHAR2(200), 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ISLEAF CHAR(1), 
	SCORE NUMBER(9,0) DEFAULT 0, 
	REQUIREDCHILD CHAR(1), 
	EXPLANATION VARCHAR2(500), 
	STANDARD VARCHAR2(500), 
	ISINSERT CHAR(1) DEFAULT 0, 
	KPIPROP CHAR(1) DEFAULT '1', 
	 CONSTRAINT PK_P#KPI_T_SETPROJEVAL PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_SETPROJKPI</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_SETPROJKPI 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	SUPERGUID VARCHAR2(32), 
	KPINAME VARCHAR2(200), 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ISLEAF CHAR(1), 
	SCORE NUMBER(9,0) DEFAULT 0, 
	REQUIREDCHILD CHAR(1), 
	EXPLANATION VARCHAR2(500), 
	STANDARD VARCHAR2(500), 
	ISINSERT CHAR(1) DEFAULT 0, 
	KPIPROP CHAR(1) DEFAULT '1', 
	 CONSTRAINT PK_P#KPI_T_SETPROJKPI PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_SETSPFEVAL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_SETSPFEVAL 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	SUPERGUID VARCHAR2(32), 
	EVALNAME VARCHAR2(200), 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ISLEAF CHAR(1), 
	SCORE NUMBER(9,0) DEFAULT 0, 
	REQUIREDCHILD CHAR(1), 
	EXPLANATION VARCHAR2(500), 
	STANDARD VARCHAR2(500), 
	ISINSERT CHAR(1) DEFAULT 0, 
	KPIPROP CHAR(1) DEFAULT '1', 
	 CONSTRAINT PK_P#KPI_T_SETSPFEVAL PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_SETSPFKPI</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_SETSPFKPI 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	SUPERGUID VARCHAR2(32), 
	KPINAME VARCHAR2(200), 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ISLEAF CHAR(1), 
	SCORE NUMBER(9,0) DEFAULT 0, 
	REQUIREDCHILD CHAR(1), 
	EXPLANATION VARCHAR2(500), 
	STANDARD VARCHAR2(500), 
	ISINSERT CHAR(1) DEFAULT 0, 
	KPIPROP CHAR(1) DEFAULT '1', 
	 CONSTRAINT PK_P#KPI_T_SETSPFKPI PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_SETINPUTSTEP</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_SETINPUTSTEP 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	CODE VARCHAR2(50), 
	NAME VARCHAR2(50), 
	TYPE CHAR(1), 
	 CONSTRAINT PK_P#KPI_T_SETINPUTSTEP PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_SETKPICALIBER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_SETKPICALIBER 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	KPITYPENAME VARCHAR2(20), 
	KPITYPE VARCHAR2(2), 
	TABLEID VARCHAR2(32), 
	REMARK VARCHAR2(500), 
	 CONSTRAINT PK_P#KPI_T_SETKPICALIBER PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_SETTABCALIBER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_SETTABCALIBER 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	KPITYPENAME VARCHAR2(200), 
	KPITYPE CHAR(1), 
	TABLEID VARCHAR2(32), 
	REMARK VARCHAR2(500), 
	 CONSTRAINT PK_P#KPI_T_SETTABCALIBER PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_SETINPUTTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_SETINPUTTAB 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	OBJECTID VARCHAR2(32), 
	TABLEID VARCHAR2(32), 
	PROCESSID VARCHAR2(50), 
	KPITYPE CHAR(1), 
	ISREADONLY CHAR(1), 
	ISMAINTABLE CHAR(1), 
	REMARK VARCHAR2(200), 
	 CONSTRAINT PK_P#KPI_T_SETINPUTTAB PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_SETDETAILCOLS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_SETDETAILCOLS 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	DETAILID VARCHAR2(32), 
	COLUMNID VARCHAR2(32), 
	SHOWNAME VARCHAR2(200), 
	SUPERGUID VARCHAR2(32), 
	COLSPAN NUMBER(9,0) DEFAULT 0, 
	ROWSPAN NUMBER(9,0) DEFAULT 0, 
	ISGROUPCOL CHAR(1), 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ISLEAF CHAR(1), 
	 CONSTRAINT PK_P#KPI_T_SETDETAILCOLS PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_PUBCHECKDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE BGT_T_PUBCHECKDEF 
   (	GUID VARCHAR2(255), 
	NAME VARCHAR2(255), 
	REMARK VARCHAR2(500), 
	CODE VARCHAR2(200), 
	 CONSTRAINT CHECKTYPECODE_PKY PRIMARY KEY (GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_SETINPUTDETAIL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_SETINPUTDETAIL 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	OBJECTID VARCHAR2(32), 
	TABLEID VARCHAR2(32), 
	PROCESSID VARCHAR2(50), 
	SHOWCOLS NUMBER(9,0) DEFAULT 0, 
	TITLEWIDTH NUMBER(9,0) DEFAULT 0, 
	KPITYPE CHAR(1), 
	 CONSTRAINT PK_P#KPI_T_SETINPUTDETAIL PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DATA_T_DIRLIST</OBJECT_NAME>
      <SQL_COMMENT><![CDATA[存储DIRLIST获取的服务器上的指定目录下的文件]]></SQL_COMMENT>
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE DATA_T_DIRLIST 
   (	FILEPATH VARCHAR2(1024) NOT NULL ENABLE, 
	FILENAME VARCHAR2(1024) NOT NULL ENABLE, 
	FILESIZE NUMBER(18,0), 
	FILEDATE DATE, 
	ISDIRECTORY CHAR(1) DEFAULT '0', 
	REFRESHTIME DATE DEFAULT SYSDATE, 
	 CONSTRAINT PK_DATA_T_DIRLIST PRIMARY KEY (FILEPATH, FILENAME) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_SETINPUTRELA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_SETINPUTRELA 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	KPITABID VARCHAR2(32), 
	PTABLEID VARCHAR2(32), 
	TABLEID VARCHAR2(32), 
	PTABFKID VARCHAR2(32), 
	TABFKID VARCHAR2(32), 
	 CONSTRAINT PK_P#KPI_T_SETINPUTRELA PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_BUSINESSCHECKDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_BUSINESSCHECKDEF 
   (	CHECKID VARCHAR2(32), 
	BUSINESSTYPE VARCHAR2(100), 
	ERRORTYPE CHAR(1), 
	ISUSE CHAR(1), 
	ISMIDCHECK CHAR(1), 
	ISADDCHECK CHAR(1), 
	ISSAVECHECK CHAR(1), 
	CHECKTYPE VARCHAR2(10), 
	ISDIRECT CHAR(1), 
	LDIRECTCOL VARCHAR2(200), 
	RDIRECTCOL VARCHAR2(200), 
	BUDGETLEVEL VARCHAR2(10), 
	NAME VARCHAR2(100), 
	STATUS CHAR(1) DEFAULT 1, 
	GUID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(38,0) DEFAULT 0 NOT NULL ENABLE, 
	OBJECTID VARCHAR2(32), 
	PROCESSID VARCHAR2(20), 
	TYPEFLAG CHAR(1), 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT PK_P#KPI_T_BUSINESSCHECKDEF PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_TABLESQL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE BGT_T_TABLESQL 
   (	TABLEDBNAME VARCHAR2(50), 
	TABLESQL CLOB, 
	 CONSTRAINT PK_BGT_T_TABLESQL PRIMARY KEY (TABLEDBNAME) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_TASKMODEL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE BGT_T_TASKMODEL 
   (	TASKID VARCHAR2(40) NOT NULL ENABLE, 
	TABLEID VARCHAR2(50) NOT NULL ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_TIMEPLAN</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
EXECUTE IMMEDIATE Q'{create table BGT_T_TIMEPLAN
(
  docid        VARCHAR2(32) not null,
  fileguid     VARCHAR2(32) not null,
  provincecode VARCHAR2(32) not null,
  year         VARCHAR2(32) not null,
  status       CHAR(1),
  remark       VARCHAR2(4000),
  userid       VARCHAR2(32),
  direction    CHAR(1),
  runtime      TIMESTAMP(6) default sysdate,
  appid        VARCHAR2(10),
  CONSTRAINT PK_BGT_T_TIMEPLAN primary key (DOCID, FILEGUID, PROVINCECODE, YEAR) ENABLE
)}';
EXECUTE IMMEDIATE Q'{comment on column BGT_T_TIMEPLAN.status is '0为待执行，1为执行中，2为执行成功，3为执行失败'}';
EXECUTE IMMEDIATE Q'{comment on column BGT_T_TIMEPLAN.direction  is ' A为下发，R为上报 , X为不走OA手动下发'}';
EXECUTE IMMEDIATE Q'{comment on column BGT_T_TIMEPLAN.appid is 'appId'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_PPROJSTEP</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_PPROJSTEP 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	CODE VARCHAR2(30) NOT NULL ENABLE, 
	NAME VARCHAR2(50) NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_PPROJSTEP PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_FSPFSTEP</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_FSPFSTEP 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CODE VARCHAR2(30) NOT NULL ENABLE, 
	NAME VARCHAR2(50) NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_FSPFSTEP PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_SETPROJTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_SETPROJTAB 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	OBJECTID VARCHAR2(32) NOT NULL ENABLE, 
	TYPEFLAG CHAR(1) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	TABLEID VARCHAR2(32), 
	ISRESERVE CHAR(1), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	ISMAINTABLE CHAR(1) DEFAULT 0, 
	PROCESSID VARCHAR2(32), 
	ISREADONLY CHAR(1) DEFAULT 0, 
	ISOPENED CHAR(1) DEFAULT 0, 
	 CONSTRAINT PK_P#SPF_T_SETPROJTAB PRIMARY KEY (PROVINCE, YEAR, STATUS, TYPEFLAG, OBJECTID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_SETTABRELATION</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_SETTABRELATION 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	MAINTABID VARCHAR2(32) NOT NULL ENABLE, 
	PROJTABID VARCHAR2(32) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	MAINFKID VARCHAR2(32) NOT NULL ENABLE, 
	FKID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_SETTABRELATION PRIMARY KEY (PROVINCE, YEAR, STATUS, PROJTABID, MAINTABID, TABLEID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_SETINHERIT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_SETINHERIT 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	PROJTABID VARCHAR2(32), 
	COLUMNID VARCHAR2(32), 
	ISMODIFY CHAR(1) DEFAULT '1', 
	CTRLSCOPE CHAR(1) DEFAULT '0', 
	EXPRESSION VARCHAR2(200), 
	PCOLUMNID VARCHAR2(32), 
	 CONSTRAINT PK_P#SPF_T_SETINHERIT PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CDT_T_BUSINESSCHECKDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE CDT_T_BUSINESSCHECKDEF 
   (	CHECKID VARCHAR2(32), 
	BUSINESSTYPE VARCHAR2(100), 
	ERRORTYPE CHAR(1), 
	ISUSE CHAR(1), 
	ISMIDCHECK CHAR(1), 
	CHECKTYPE VARCHAR2(10), 
	BUDGETLEVEL VARCHAR2(10), 
	NAME VARCHAR2(100), 
	STATUS CHAR(1), 
	GUID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(38,0) NOT NULL ENABLE, 
	EXPCATEGORY VARCHAR2(32), 
	 CONSTRAINT CDT_BUSINESSCHECKDEF_PKY PRIMARY KEY (GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_BUSINESSCHECKDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_BUSINESSCHECKDEF 
   (	CHECKID VARCHAR2(32), 
	BUSINESSTYPE VARCHAR2(100), 
	ERRORTYPE CHAR(1), 
	ISUSE CHAR(1), 
	ISMIDCHECK CHAR(1), 
	ISADDCHECK CHAR(1), 
	ISSAVECHECK CHAR(1), 
	CHECKTYPE VARCHAR2(10), 
	ISDIRECT CHAR(1), 
	LDIRECTCOL VARCHAR2(200), 
	RDIRECTCOL VARCHAR2(200), 
	BUDGETLEVEL VARCHAR2(10), 
	NAME VARCHAR2(100), 
	STATUS CHAR(1) DEFAULT 1, 
	GUID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(38,0) DEFAULT 0 NOT NULL ENABLE, 
	OBJECTID VARCHAR2(32), 
	PROCESSID VARCHAR2(20), 
	TYPEFLAG CHAR(1), 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT PK_P#SPF_T_BUSINESSCHECKDEF PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_SETATTACH_B</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_SETATTACH_B 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TYPEID VARCHAR2(32) NOT NULL ENABLE, 
	CLASSID VARCHAR2(32) NOT NULL ENABLE, 
	CLASSNAME VARCHAR2(100), 
	REMARK VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_SETATTACH_B PRIMARY KEY (PROVINCE, YEAR, STATUS, TYPEID, CLASSID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_SETATTACH</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_SETATTACH 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TYPEID CHAR(1), 
	CLASSID VARCHAR2(32) NOT NULL ENABLE, 
	DETCLASSID VARCHAR2(32) NOT NULL ENABLE, 
	DETCLASSNAME VARCHAR2(100), 
	REMARK VARCHAR2(500), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	OBJECTID VARCHAR2(32) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	ISDJ CHAR(1), 
	 CONSTRAINT PK_P#SPF_T_SETATTACH PRIMARY KEY (PROVINCE, YEAR, STATUS, OBJECTID, CLASSID, DETCLASSID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_SETATTACHTOTEM</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_SETATTACHTOTEM 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DETCLASSID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	TEMPLATEID VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	TEMPLATENAME VARCHAR2(100), 
	REMARK VARCHAR2(500), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_SETATTACHTOTEM PRIMARY KEY (PROVINCE, YEAR, STATUS, DETCLASSID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CDT_T_TASKRELA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE CDT_T_TASKRELA 
   (	TASKID VARCHAR2(32), 
	TARGETID VARCHAR2(32)
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_SETCODE_B</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_SETCODE_B 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	BASETYPEID VARCHAR2(32) NOT NULL ENABLE, 
	BASETYPENAME VARCHAR2(100), 
	ISSPESTR CHAR(1), 
	ISUSE CHAR(1), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	CODESHOW VARCHAR2(200), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	TYPEID NUMBER(9,0) DEFAULT 0, 
	 CONSTRAINT PK_P#SPF_T_SETCODE_B PRIMARY KEY (PROVINCE, YEAR, STATUS, BASETYPEID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_SETCODE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_SETCODE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	CODEID VARCHAR2(32) NOT NULL ENABLE, 
	TYPEID NUMBER DEFAULT 0 NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	BASETYPEID VARCHAR2(32) NOT NULL ENABLE, 
	CODESHOW VARCHAR2(200), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	PROJTYPEID VARCHAR2(32), 
	 CONSTRAINT PK_P#SPF_T_SETCODE PRIMARY KEY (PROVINCE, YEAR, STATUS, TYPEID, BASETYPEID, CODEID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_SETCUSTAGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_SETCUSTAGENCY 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	CUSTODYID VARCHAR2(32) NOT NULL ENABLE, 
	AGENCYID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_SETCUSTAGENCY PRIMARY KEY (PROVINCE, YEAR, STATUS, CUSTODYID, AGENCYID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_SETCUSTODY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_SETCUSTODY 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	CUSTODYID VARCHAR2(32) NOT NULL ENABLE, 
	DISTRICTID VARCHAR2(32), 
	SPFID VARCHAR2(32), 
	CUSTDEPTID VARCHAR2(32), 
	CUSTFIRSTDIV VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_SETCUSTODY PRIMARY KEY (PROVINCE, YEAR, STATUS, CUSTODYID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_CUSTODYLOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_CUSTODYLOG 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID CHAR(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CUSTODYID VARCHAR2(32) NOT NULL ENABLE, 
	SPFID VARCHAR2(32), 
	OLDCUSTDEPTID VARCHAR2(32), 
	OLDCUSTFIRSTDIV VARCHAR2(32), 
	CUSTDEPTID VARCHAR2(32), 
	CUSTFIRSTDIV VARCHAR2(32), 
	OPERATORID VARCHAR2(32), 
	DISTRICTID VARCHAR2(32), 
	MODIFYDATE TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT PK_P#SPF_T_CUSTODYLOG PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_COLTOTABLES</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_COLTOTABLES 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	COLUMNID VARCHAR2(32), 
	TABLEID VARCHAR2(32), 
	RELATALBLEID VARCHAR2(32), 
	COLVALUENAME VARCHAR2(200), 
	COLVALUEID VARCHAR2(200), 
	 CONSTRAINT PK_P#SECU_T_COLTOTABLES PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_ROLETOSPF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_ROLETOSPF 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	SPFID VARCHAR2(32), 
	BASESECU CHAR(1) DEFAULT 3, 
	PROJSECU CHAR(1) DEFAULT 3, 
	ROLEID VARCHAR2(32), 
	DISTRICTID VARCHAR2(32), 
	 CONSTRAINT PK_P#SECU_T_ROLETOSPF PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_ROLETOTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_ROLETOTYPE 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	ROLEID VARCHAR2(32), 
	PROJTYPEID VARCHAR2(32), 
	BASESECU CHAR(1) DEFAULT 3, 
	DISTRICTID VARCHAR2(32), 
	 CONSTRAINT PK_P#SECU_T_ROLETOTYPE PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_USERTOSPF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_USERTOSPF 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	USERID VARCHAR2(32) NOT NULL ENABLE, 
	SPFID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BASESECU CHAR(1), 
	PROJSECU CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SECU_T_USERTOSPF PRIMARY KEY (PROVINCE, YEAR, STATUS, USERID, SPFID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PUB_T_PARTITION_DIVID</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE PUB_T_PARTITION_DIVID 
   (	DISTRICTID VARCHAR2(32) NOT NULL ENABLE, 
	ID_TABSPACE VARCHAR2(32) NOT NULL ENABLE, 
	YEAR VARCHAR2(32) NOT NULL ENABLE, 
	 CONSTRAINT PK_PUB_T_PARTITION_DIVID PRIMARY KEY (YEAR, DISTRICTID, ID_TABSPACE) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_USERTOTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_USERTOTYPE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	USERID VARCHAR2(32) NOT NULL ENABLE, 
	PROJTYPEID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BASESECU CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SECU_T_USERTOTYPE PRIMARY KEY (PROVINCE, YEAR, STATUS, PROJTYPEID, USERID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_APPCODE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE DICT_T_APPCODE 
   (	APPID VARCHAR2(32), 
	OBJECTID VARCHAR2(32), 
	TABLENAME VARCHAR2(32), 
	 CONSTRAINT PK_DICT_T_APPCODE PRIMARY KEY (APPID, OBJECTID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_DEPTTOAGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_DEPTTOAGENCY 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	DEPTID VARCHAR2(32), 
	AGENCYID VARCHAR2(32), 
	DISTRICTID VARCHAR2(32), 
	 CONSTRAINT PK_P#SECU_T_DEPTTOAGENCY PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_MODEL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_MODEL 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	NAME VARCHAR2(100), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	DBTABLENAME VARCHAR2(30), 
	TABLETYPE CHAR(1) DEFAULT '1', 
	ISSHOW CHAR(1) DEFAULT '1', 
	APPID VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	REMARK VARCHAR2(500), 
	SUITID VARCHAR2(32), 
	DEALTYPE VARCHAR2(10), 
	ISRESERVED CHAR(1) DEFAULT '1', 
	INPUTLVL VARCHAR2(2), 
	ISADD CHAR(1) DEFAULT '0', 
	SHORTTITLE VARCHAR2(100), 
	EXTPROP VARCHAR2(100), 
	BGTLVL CHAR(1) DEFAULT '1', 
	SECUSQL VARCHAR2(3000), 
	ISSUMTAB CHAR(1) DEFAULT '0', 
	ISMAN CHAR(1) DEFAULT '0', 
	MAINUPTAB VARCHAR2(32), 
	RELATAB VARCHAR2(300), 
	TABSWHERE VARCHAR2(1000), 
	ISPARTITION CHAR(1) DEFAULT '0', 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	ISBAK CHAR(1) DEFAULT '0', 
	INSERTVERSION TIMESTAMP (6) DEFAULT sysdate, 
	INITSQL CLOB, 
	INITSQLTIME VARCHAR2(2), 
	ISTASK VARCHAR2(32) DEFAULT '0', 
	 CONSTRAINT PK_P#DICT_T_MODEL PRIMARY KEY (PROVINCE, YEAR, STATUS, APPID, TABLEID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_FACTOR</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_FACTOR 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	DEID VARCHAR2(32), 
	COLUMNID VARCHAR2(32) NOT NULL ENABLE, 
	NAME VARCHAR2(100), 
	DBCOLUMNNAME VARCHAR2(30), 
	DATATYPE NUMBER(9,0) DEFAULT 0, 
	DATALENGTH NUMBER(9,0) DEFAULT 0, 
	SCALE NUMBER(9,0) DEFAULT 0, 
	NULLABLE CHAR(1) DEFAULT '1', 
	DEFAULTVALUE VARCHAR2(255), 
	CSID VARCHAR2(32), 
	ISUPDATE CHAR(1) DEFAULT '0', 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	SUPERID VARCHAR2(32), 
	ISLEAF CHAR(1) DEFAULT '1', 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(30), 
	COLFORMAT VARCHAR2(100), 
	SHOWFORMAT CHAR(1) DEFAULT '0', 
	SHOWWIDTH NUMBER(9,0) DEFAULT 0, 
	ISKEY CHAR(1) DEFAULT '0', 
	ISVISIBLE CHAR(1) DEFAULT '1', 
	ISRESERVE CHAR(1) DEFAULT '0', 
	ISSUM CHAR(1) DEFAULT '0', 
	ISREGEX CHAR(1) DEFAULT '0', 
	REGEXPR VARCHAR2(4000), 
	REGEXPRINFO VARCHAR2(200), 
	ISBANDCOL CHAR(1) DEFAULT '0', 
	BANDREFDWCOL VARCHAR2(32), 
	EXTPROP VARCHAR2(100), 
	COLTIPS VARCHAR2(255), 
	FRMTABID VARCHAR2(32), 
	FRMCOLID VARCHAR2(32), 
	ISVIRTUAL CHAR(1) DEFAULT '0', 
	VIRCONTEXT VARCHAR2(1000), 
	ISHREF CHAR(1) DEFAULT '0', 
	HREFLOC VARCHAR2(1000), 
	HREFPARMID VARCHAR2(200), 
	BGTLVL CHAR(1) DEFAULT '1', 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	BANDCOLUMNID VARCHAR2(32), 
	INSERTVERSION TIMESTAMP (6) DEFAULT sysdate, 
	PARENTNODECANCHECK CHAR(1) DEFAULT '0', 
	OPENWINDOWTYPE CHAR(1) DEFAULT '1', 
	 CONSTRAINT PK_P#DICT_T_FACTOR PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID, COLUMNID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
<SQL>
      <OBJECT_NAME>P#DICT_T_MODEL_S</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_MODEL_S 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	NAME VARCHAR2(100), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	DBTABLENAME VARCHAR2(30), 
	TABLETYPE CHAR(1) DEFAULT '1', 
	ISSHOW CHAR(1) DEFAULT '1', 
	APPID VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	REMARK VARCHAR2(500), 
	SUITID VARCHAR2(32), 
	DEALTYPE VARCHAR2(10), 
	ISRESERVED CHAR(1) DEFAULT '1', 
	INPUTLVL VARCHAR2(2), 
	ISADD CHAR(1) DEFAULT '0', 
	SHORTTITLE VARCHAR2(100), 
	EXTPROP VARCHAR2(100), 
	BGTLVL CHAR(1) DEFAULT '1', 
	SECUSQL VARCHAR2(3000), 
	ISSUMTAB CHAR(1) DEFAULT '0', 
	ISMAN CHAR(1) DEFAULT '0', 
	MAINUPTAB VARCHAR2(32), 
	RELATAB VARCHAR2(300), 
	TABSWHERE VARCHAR2(1000), 
	ISPARTITION CHAR(1) DEFAULT '0', 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	ISBAK CHAR(1) DEFAULT '0', 
	INSERTVERSION TIMESTAMP (6) DEFAULT sysdate, 
	INITSQL CLOB, 
	INITSQLTIME VARCHAR2(2), 
	ISTASK VARCHAR2(32) DEFAULT '0', 
	 CONSTRAINT PK_P#DICT_T_MODEL_S PRIMARY KEY (PROVINCE, YEAR, STATUS, APPID, TABLEID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_FACTOR_S</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_FACTOR_S 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	DEID VARCHAR2(32), 
	COLUMNID VARCHAR2(32) NOT NULL ENABLE, 
	NAME VARCHAR2(100), 
	DBCOLUMNNAME VARCHAR2(30), 
	DATATYPE NUMBER(9,0) DEFAULT 0, 
	DATALENGTH NUMBER(9,0) DEFAULT 0, 
	SCALE NUMBER(9,0) DEFAULT 0, 
	NULLABLE CHAR(1) DEFAULT '1', 
	DEFAULTVALUE VARCHAR2(255), 
	CSID VARCHAR2(32), 
	ISUPDATE CHAR(1) DEFAULT '0', 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	SUPERID VARCHAR2(32), 
	ISLEAF CHAR(1) DEFAULT '1', 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(30), 
	COLFORMAT VARCHAR2(100), 
	SHOWFORMAT CHAR(1) DEFAULT '0', 
	SHOWWIDTH NUMBER(9,0) DEFAULT 0, 
	ISKEY CHAR(1) DEFAULT '0', 
	ISVISIBLE CHAR(1) DEFAULT '1', 
	ISRESERVE CHAR(1) DEFAULT '0', 
	ISSUM CHAR(1) DEFAULT '0', 
	ISREGEX CHAR(1) DEFAULT '0', 
	REGEXPR VARCHAR2(4000), 
	REGEXPRINFO VARCHAR2(200), 
	ISBANDCOL CHAR(1) DEFAULT '0', 
	BANDREFDWCOL VARCHAR2(32), 
	EXTPROP VARCHAR2(100), 
	COLTIPS VARCHAR2(255), 
	FRMTABID VARCHAR2(32), 
	FRMCOLID VARCHAR2(32), 
	ISVIRTUAL CHAR(1) DEFAULT '0', 
	VIRCONTEXT VARCHAR2(1000), 
	ISHREF CHAR(1) DEFAULT '0', 
	HREFLOC VARCHAR2(1000), 
	HREFPARMID VARCHAR2(200), 
	BGTLVL CHAR(1) DEFAULT '1', 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	BANDCOLUMNID VARCHAR2(32), 
	INSERTVERSION TIMESTAMP (6) DEFAULT sysdate, 
	PARENTNODECANCHECK CHAR(1) DEFAULT '0', 
	OPENWINDOWTYPE CHAR(1) DEFAULT '1', 
	 CONSTRAINT PK_P#DICT_T_FACTOR_S PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID, COLUMNID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_MODELCODE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_MODELCODE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	APPID VARCHAR2(32), 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	NAME VARCHAR2(100), 
	DBTABLENAME VARCHAR2(30), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	ISREPBASE CHAR(1) DEFAULT '0', 
	ISLVL CHAR(1) DEFAULT '1', 
	SQLCON VARCHAR2(4000), 
	DYNAMICWHERE VARCHAR2(4000), 
	ISORGID CHAR(1) DEFAULT '0', 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	INSERTVERSION TIMESTAMP (6) DEFAULT sysdate, 
	FASPCSID VARCHAR2(32), 
	 CONSTRAINT PK_P#DICT_T_MODELCODE PRIMARY KEY (PROVINCE, YEAR, STATUS, APPID, TABLEID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_FACTORCODE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_FACTORCODE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	DEID VARCHAR2(32), 
	COLUMNID VARCHAR2(32) NOT NULL ENABLE, 
	NAME VARCHAR2(100), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	DBCOLUMNNAME VARCHAR2(30), 
	DATATYPE NUMBER(9,0) DEFAULT 0, 
	DATALENGTH NUMBER(9,0) DEFAULT 0, 
	SCALE NUMBER(9,0) DEFAULT 0, 
	DEFAULTVALUE VARCHAR2(255), 
	CSID VARCHAR2(32), 
	ISVISIBLE CHAR(1) DEFAULT '1', 
	ISRESERVE CHAR(1) DEFAULT '1', 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	BGTLVL CHAR(1) DEFAULT '1', 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	INSERTVERSION TIMESTAMP (6) DEFAULT sysdate, 
	 CONSTRAINT PK_P#DICT_T_FACTORCODE PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID, COLUMNID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_TMP_LOGSECUREC</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE SECU_T_TMP_LOGSECUREC 
   (	SQLCLOB CLOB, 
	ORDERID VARCHAR2(32), 
	REMARK VARCHAR2(4000)
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_EXP_STATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE CODE_T_EXP_STATUS 
   (	GUID VARCHAR2(32), 
	STATUS_NAME VARCHAR2(250), 
	SUPERGUID VARCHAR2(32), 
	ISLEAF CHAR(1), 
	STATUS_CODE VARCHAR2(250) NOT NULL ENABLE, 
	URL VARCHAR2(500)
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#EXP_S_PROJECTTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#EXP_S_PROJECTTYPE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	PROJTYPEID VARCHAR2(32) NOT NULL ENABLE, 
	PROJTYPENAME VARCHAR2(100), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	SUPERID VARCHAR2(32), 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ISLEAF CHAR(1), 
	ISBASE CHAR(1), 
	MANADEPT VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	CODE VARCHAR2(200), 
	DISTRICTID VARCHAR2(32), 
	 CONSTRAINT PK_P#EXP_S_PROJECTTYPE PRIMARY KEY (PROVINCE, YEAR, STATUS, PROJTYPEID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_PUBLIC</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_PUBLIC 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	APPID VARCHAR2(32) NOT NULL ENABLE, 
	TYPEID VARCHAR2(32) NOT NULL ENABLE, 
	TYPENAME VARCHAR2(100), 
	KEYID VARCHAR2(20) NOT NULL ENABLE, 
	KEYNAME VARCHAR2(100), 
	ISYES CHAR(1), 
	RESERVE_1 VARCHAR2(4000), 
	RESERVE_2 VARCHAR2(4000), 
	CNUM NUMBER(9,0) DEFAULT 0, 
	REMARK VARCHAR2(4000), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	 CONSTRAINT PK_P#DICT_T_PUBLIC PRIMARY KEY (PROVINCE, YEAR, STATUS, APPID, TYPEID, KEYID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SUIT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SUIT 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	APPID VARCHAR2(32) NOT NULL ENABLE, 
	SUITID VARCHAR2(32) NOT NULL ENABLE, 
	SUITNAME VARCHAR2(100), 
	SUITTYPE CHAR(1) DEFAULT 1, 
	SUPERID VARCHAR2(32), 
	ISLEAF CHAR(1) DEFAULT 1, 
	REMARK VARCHAR2(500), 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	 CONSTRAINT PK_P#DICT_T_SUIT PRIMARY KEY (PROVINCE, YEAR, STATUS, APPID, SUITID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#FORMULA_T_FORMULADEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#FORMULA_T_FORMULADEF 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	FORMULAID VARCHAR2(32) NOT NULL ENABLE, 
	FORMULANAME VARCHAR2(100), 
	FORMULATYPE VARCHAR2(10), 
	FORMULALVL VARCHAR2(10), 
	TABLEID VARCHAR2(32), 
	FORMULADEF CLOB, 
	ISPUBLIC CHAR(1), 
	FORMULADEFCHI CLOB, 
	FORCOMCOL VARCHAR2(32), 
	FORWHERE VARCHAR2(4000), 
	BGTLVL CHAR(1), 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	FORPARMCOL VARCHAR2(1000), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	REFCOLUMN VARCHAR2(1000), 
	FORMULADEFENG CLOB, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	RELAID VARCHAR2(32), 
	DEFTYPE VARCHAR2(32) DEFAULT '0', 
	 CONSTRAINT PK_P#FORMULA_T_FORMULADEF PRIMARY KEY (PROVINCE, YEAR, STATUS, FORMULAID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#FORMULA_T_FORMULADETAIL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#FORMULA_T_FORMULADETAIL 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	FORMULAID VARCHAR2(32) NOT NULL ENABLE, 
	LINEID NUMBER(9,0) DEFAULT 0 NOT NULL ENABLE, 
	FORMULATYPE VARCHAR2(10), 
	TABLEID VARCHAR2(32), 
	FORCOMCOL VARCHAR2(32), 
	FORWHERE VARCHAR2(4000), 
	FORWHERECOL VARCHAR2(1000), 
	REFTABLEID VARCHAR2(32), 
	REFCOLUMN VARCHAR2(4000), 
	REFWHERE VARCHAR2(4000), 
	REFWHERECOL VARCHAR2(1000), 
	REFCOMCONT VARCHAR2(4000), 
	BGTLVL CHAR(1), 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#FORMULA_T_FORMULADETAIL PRIMARY KEY (PROVINCE, YEAR, STATUS, FORMULAID, LINEID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_QUERYOPERATOR</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE CODE_T_QUERYOPERATOR 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	SRCSCALE NUMBER(24,6), 
	 CONSTRAINT PK_CODE_T_QUERYOPERATOR PRIMARY KEY (YEAR, GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_QUERYPICLOGO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE CODE_T_QUERYPICLOGO 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	SRCSCALE NUMBER(24,6), 
	 CONSTRAINT PK_CODE_T_QUERYPICLOGO PRIMARY KEY (GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_ESTIMATE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_ESTIMATE 
   (	ESTID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	ESTNAME VARCHAR2(100), 
	ESTMODELID VARCHAR2(32), 
	FORMULASET CHAR(1), 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1, 
	LOGIC_KEY VARCHAR2(300)
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_FORMULASORT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_FORMULASORT 
   (	QUERYID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(18,0), 
	CONDITIONSQL CLOB, 
	CONDITIONSQLCN CLOB, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	STATUS CHAR(1) DEFAULT 1, 
	 CONSTRAINT PK_BGT_T_FORMULASORT PRIMARY KEY (PROVINCE, YEAR) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_SORTDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_SORTDEF 
   (	ESTID VARCHAR2(32) NOT NULL ENABLE, 
	FORMULASORTID VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	FORMULASORTNAME VARCHAR2(100), 
	QUERYID VARCHAR2(32) DEFAULT sys_guid(), 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	STATUS CHAR(1) DEFAULT 1
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CAL_T_AGSTANDGRADE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CAL_T_AGSTANDGRADE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	AGENCYID VARCHAR2(32) NOT NULL ENABLE, 
	STANDARDID VARCHAR2(32) NOT NULL ENABLE, 
	GRADEID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	NOLID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CAL_T_AGSTANDGRADE PRIMARY KEY (PROVINCE, YEAR, STATUS, AGENCYID, STANDARDID, GRADEID, NOLID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_TASKBUSITYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE CODE_T_TASKBUSITYPE 
   (	GUID VARCHAR2(32), 
	NAME VARCHAR2(250), 
	SUPERGUID VARCHAR2(32), 
	ISLEAF CHAR(1), 
	CODE VARCHAR2(250)
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_TASKCODERULE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE CODE_T_TASKCODERULE 
   (	GUID VARCHAR2(32), 
	NAME VARCHAR2(250), 
	SUPERGUID VARCHAR2(32), 
	ISLEAF CHAR(1), 
	CODE VARCHAR2(250)
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CAL_T_FORMULA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CAL_T_FORMULA 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	FORMULAID VARCHAR2(32) NOT NULL ENABLE, 
	FORMULANAME VARCHAR2(100), 
	FORMULA CLOB, 
	FORMULACHI CLOB, 
	FORMUTYPE CHAR(1) DEFAULT 0 NOT NULL ENABLE, 
	FORMULASQL CLOB, 
	REFTABID VARCHAR2(1000), 
	REFCOLID VARCHAR2(4000), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	STANDARDID VARCHAR2(4000), 
	TABLEID VARCHAR2(32), 
	 CONSTRAINT PK_P#CAL_T_FORMULA PRIMARY KEY (PROVINCE, YEAR, STATUS, FORMUTYPE, FORMULAID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_TASKCYCLETYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE CODE_T_TASKCYCLETYPE 
   (	GUID VARCHAR2(32), 
	NAME VARCHAR2(250), 
	SUPERGUID VARCHAR2(32), 
	ISLEAF CHAR(1), 
	CODE VARCHAR2(250)
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_TASKNAMERULE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE CODE_T_TASKNAMERULE 
   (	GUID VARCHAR2(32), 
	NAME VARCHAR2(250), 
	SUPERGUID VARCHAR2(32), 
	ISLEAF CHAR(1), 
	CODE VARCHAR2(250)
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CAL_T_OUTWINDOWSET</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CAL_T_OUTWINDOWSET 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	PROJTYPEID VARCHAR2(32) NOT NULL ENABLE, 
	EXPECOID VARCHAR2(32) NOT NULL ENABLE, 
	FUNDSOURCEID VARCHAR2(32) NOT NULL ENABLE, 
	AGENCYID VARCHAR2(32), 
	FORMULAID VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	RELATYPE CHAR(1), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	TABLEID VARCHAR2(32), 
	 CONSTRAINT PK_P#CAL_T_OUTWINDOWSET PRIMARY KEY (PROVINCE, YEAR, STATUS, PROJTYPEID, EXPECOID, FUNDSOURCEID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_TASKSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE CODE_T_TASKSTATUS 
   (	GUID VARCHAR2(32), 
	NAME VARCHAR2(250), 
	SUPERGUID VARCHAR2(32), 
	ISLEAF CHAR(1), 
	CODE VARCHAR2(250)
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CAL_T_STANDGRADE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CAL_T_STANDGRADE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	STANDARDID VARCHAR2(32) NOT NULL ENABLE, 
	GRADEID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	NUMVALUE NUMBER(24,6), 
	 CONSTRAINT PK_P#CAL_T_STANDGRADE PRIMARY KEY (PROVINCE, YEAR, STATUS, STANDARDID, GRADEID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CAL_T_GRADE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CAL_T_GRADE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GRADEID VARCHAR2(32) NOT NULL ENABLE, 
	GRADENAME VARCHAR2(255), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CAL_T_GRADE PRIMARY KEY (PROVINCE, YEAR, STATUS, GRADEID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_TABSHOWTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE DICT_T_TABSHOWTYPE 
   (	TABLETYPE VARCHAR2(10) NOT NULL ENABLE, 
	SHOWTYPE VARCHAR2(10), 
	MODELID VARCHAR2(10) NOT NULL ENABLE, 
	 CONSTRAINT DICT_T_TABSHOWTYPE_PK PRIMARY KEY (MODELID, TABLETYPE) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DOC_T_DOCENTITY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE DOC_T_DOCENTITY 
   (	DOCID VARCHAR2(32) NOT NULL ENABLE, 
	DOCNAME VARCHAR2(32), 
	REMARK VARCHAR2(250), 
	DOCTEMPLATE BLOB, 
	DOCMODEL CLOB, 
	DOCTYPEID VARCHAR2(32), 
	CREATEDATE DATE, 
	MODELJSON CLOB, 
	 CONSTRAINT PK_DOC_T_DOCUMENT PRIMARY KEY (DOCID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DOC_T_DOCTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE DOC_T_DOCTYPE 
   (	TYPEID VARCHAR2(32) NOT NULL ENABLE, 
	TYPENAME VARCHAR2(32), 
	ORDERCODE NUMBER, 
	 CONSTRAINT PK_DOC_T_DOCTYPE PRIMARY KEY (TYPEID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EFM_T_COMMONCONDITION</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE EFM_T_COMMONCONDITION 
   (	CONDITIONID VARCHAR2(32) NOT NULL ENABLE, 
	CONDITIONSQL VARCHAR2(4000), 
	ITEMID VARCHAR2(100) NOT NULL ENABLE, 
	L_TYPE VARCHAR2(50), 
	L_SECTION1 VARCHAR2(100), 
	L_SECTION2 VARCHAR2(1000), 
	L_SECTION3 VARCHAR2(100), 
	L_SECTION4 VARCHAR2(100), 
	L_SECTION5 VARCHAR2(100), 
	L_SECTION6 VARCHAR2(100), 
	L_SECTION7 VARCHAR2(100), 
	L_SECTION8 VARCHAR2(100), 
	L_SECTION9 VARCHAR2(100), 
	RELAEXPNAME VARCHAR2(20), 
	RELAEXPID VARCHAR2(20), 
	R_TYPE VARCHAR2(50), 
	R_SECTION1 VARCHAR2(100), 
	R_VALUES VARCHAR2(4000), 
	R_IDS VARCHAR2(4000), 
	R_SECTION2 VARCHAR2(1000), 
	R_SECTION3 VARCHAR2(100), 
	R_SECTION4 VARCHAR2(100), 
	R_SECTION5 VARCHAR2(100), 
	R_SECTION6 VARCHAR2(100), 
	R_SECTION7 VARCHAR2(100), 
	R_SECTION8 VARCHAR2(100), 
	R_SECTION9 VARCHAR2(100), 
	REFID VARCHAR2(32), 
	ISTREE VARCHAR2(1), 
	DATATYPE VARCHAR2(50), 
	LEVELID VARCHAR2(100), 
	NODE_TYPE VARCHAR2(50), 
	LOGICITEM VARCHAR2(10), 
	R_DATATYPE VARCHAR2(50), 
	ENDFLAG VARCHAR2(1), 
	FUNCTIONCLASSIFY VARCHAR2(100), 
	 CONSTRAINT PK_EFM_T_COMMONCONDITION PRIMARY KEY (CONDITIONID, ITEMID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EFM_T_COMMONFUNCTION</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE EFM_T_COMMONFUNCTION 
   (	FUNCTIONID VARCHAR2(32) NOT NULL ENABLE, 
	FUNCTIONNAME VARCHAR2(50) NOT NULL ENABLE, 
	FUNCTIONTYPE VARCHAR2(32) NOT NULL ENABLE, 
	PARAMNUM NUMBER(*,0) NOT NULL ENABLE, 
	ORACLEFUNCTION VARCHAR2(32), 
	FUNCTIONCLASSIFY VARCHAR2(32), 
	PARADATATYPE VARCHAR2(100), 
	 CONSTRAINT PK_EFM_COMMONFUNCTION PRIMARY KEY (FUNCTIONID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EFM_T_COMMONQUERYDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE EFM_T_COMMONQUERYDEF 
   (	BUSINESSTYPEID VARCHAR2(32) NOT NULL ENABLE, 
	MODELID VARCHAR2(100) NOT NULL ENABLE, 
	QUERYID VARCHAR2(32) NOT NULL ENABLE, 
	QUERYNAME VARCHAR2(200), 
	USERID VARCHAR2(32), 
	ISPUBLIC CHAR(1) DEFAULT 1, 
	CONDITIONID VARCHAR2(32), 
	QUERYREMARK VARCHAR2(1000), 
	ORDERNO NUMBER(8,0), 
	 CONSTRAINT PK_EFM_T_COMMONQUERYDEF PRIMARY KEY (BUSINESSTYPEID, MODELID, QUERYID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EFM_T_DATABACKUPLOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE EFM_T_DATABACKUPLOG 
   (	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	TASKID VARCHAR2(32), 
	USERGUID VARCHAR2(32), 
	OPERATION VARCHAR2(500), 
	BAKVERSION NUMBER(5,0) DEFAULT 0, 
	BACKUPDATE TIMESTAMP (6) DEFAULT SYSDATE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CAL_T_STANDARD</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CAL_T_STANDARD 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	STANDARDID VARCHAR2(32) NOT NULL ENABLE, 
	STANDARDNAME VARCHAR2(255), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	SUPERID VARCHAR2(32), 
	ISLEAF CHAR(1) DEFAULT 1, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CAL_T_STANDARD PRIMARY KEY (PROVINCE, YEAR, STATUS, STANDARDID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>FACT_DEMO_AGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE FACT_DEMO_AGENCY 
   (	DEMO_AGENCY_KEY VARCHAR2(32), 
	YEAR VARCHAR2(32), 
	DEPT VARCHAR2(32), 
	EXPFUNC VARCHAR2(32), 
	EXPECO VARCHAR2(32), 
	AGENCY VARCHAR2(32), 
	DEPPRO VARCHAR2(32), 
	AMOUNT NUMBER
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>FACT_T_DEMO_DWRY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE FACT_T_DEMO_DWRY 
   (	ID VARCHAR2(32), 
	DW VARCHAR2(200), 
	ND VARCHAR2(200), 
	PJJBGZ NUMBER(18,2), 
	PJGZ NUMBER(18,2), 
	JT NUMBER(18,2), 
	JBGZ NUMBER(18,2), 
	GZ NUMBER(18,2), 
	ZZCGRS NUMBER(18,2), 
	ZZSYRS NUMBER(18,2), 
	ZZHZRS NUMBER(18,2), 
	BZCGRS NUMBER(18,2), 
	BZSYRS NUMBER(18,2), 
	BZHZRS NUMBER(18,2), 
	TXRS NUMBER(18,2), 
	LXRS NUMBER(18,2), 
	LTRS NUMBER(18,2), 
	ZZRS NUMBER(18,2), 
	BZRS NUMBER(18,2), 
	PJJT NUMBER(18,2)
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CHECK_T_DEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CHECK_T_DEF 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	APPID VARCHAR2(32) NOT NULL ENABLE, 
	BUSITYPEID VARCHAR2(32) NOT NULL ENABLE, 
	CHECKID VARCHAR2(32) NOT NULL ENABLE, 
	CHECKNAME VARCHAR2(100), 
	LTABLEID VARCHAR2(32), 
	RTABLEID VARCHAR2(32), 
	LCOL VARCHAR2(4000), 
	RCOL VARCHAR2(4000), 
	LWHERE VARCHAR2(4000), 
	RWHERE VARCHAR2(4000), 
	SHOWTEXT VARCHAR2(4000), 
	LGROUP VARCHAR2(250), 
	RGROUP VARCHAR2(250), 
	PUBGROUP VARCHAR2(250), 
	RELATYPE VARCHAR2(10), 
	CHECKTYPE VARCHAR2(10), 
	ISUSE CHAR(1) DEFAULT 1, 
	CHECKSQL CLOB, 
	ROWFLAG CHAR(1), 
	CHECKDIV CHAR(3), 
	LROWTABID VARCHAR2(32), 
	RROWTABID VARCHAR2(32), 
	LROWCOL VARCHAR2(32), 
	RROWCOL VARCHAR2(32), 
	BGTLVL CHAR(1), 
	EXTPROP VARCHAR2(100), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	ISSAVEC CHAR(1), 
	ISCOLLC CHAR(1), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	CBGTLVL CHAR(4), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	ISMUST CHAR(1), 
	LROWCOLID VARCHAR2(32), 
	ERRORDEF NUMBER(24,6), 
	 CONSTRAINT PK_P#CHECK_T_DEF PRIMARY KEY (PROVINCE, YEAR, STATUS, APPID, BUSITYPEID, CHECKID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_BUSINESSCHECKDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE BGT_T_BUSINESSCHECKDEF 
   (	CHECKID VARCHAR2(32), 
	BUSINESSTYPE VARCHAR2(100), 
	ERRORTYPE CHAR(1), 
	ISUSE CHAR(1), 
	ISMIDCHECK CHAR(1), 
	ISADDCHECK CHAR(1), 
	ISSAVECHECK CHAR(1), 
	CHECKTYPE VARCHAR2(10), 
	ISDIRECT CHAR(1), 
	LDIRECTCOL VARCHAR2(200), 
	RDIRECTCOL VARCHAR2(200), 
	BUDGETLEVEL VARCHAR2(10), 
	NAME VARCHAR2(100), 
	STATUS CHAR(1) DEFAULT 1, 
	GUID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(38,0) DEFAULT 0 NOT NULL ENABLE, 
	EXPCATEGORY VARCHAR2(32), 
	 CONSTRAINT BUSINESSCHECKDEF_PKY PRIMARY KEY (GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_CHECKDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_CHECKDEF 
   (	CHECKID VARCHAR2(32) NOT NULL ENABLE, 
	SERID NUMBER(38,0), 
	DEFNAME VARCHAR2(100), 
	CHECKSORTID VARCHAR2(32), 
	RMODELID VARCHAR2(32), 
	RCOMPCOL CLOB, 
	RQUERY CLOB, 
	RIGHTGROUP VARCHAR2(250), 
	RDESC VARCHAR2(250), 
	RELATYPE VARCHAR2(10), 
	LMODELID VARCHAR2(32), 
	LCOMPCOL CLOB, 
	LQUERY CLOB, 
	LEFTGROUP VARCHAR2(250), 
	PUBGROUP VARCHAR2(250), 
	LDESC VARCHAR2(250), 
	SHOWTEXT VARCHAR2(4000), 
	CHECKSQL CLOB, 
	ERRORDEF NUMBER(18,4), 
	CHECKEXCELSQL CLOB, 
	BUDGETLEVEL CHAR(1), 
	CHECKTYPE VARCHAR2(10), 
	STATUS CHAR(1) DEFAULT 1, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	APPID VARCHAR2(32), 
	 CONSTRAINT BGT_T_CHECKDEF_PKY PRIMARY KEY (PROVINCE, YEAR, STATUS, CHECKID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EFM_T_CHECKADDCOL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE EFM_T_CHECKADDCOL 
   (	BUSINESSTYPE VARCHAR2(100) NOT NULL ENABLE, 
	ADDCOL VARCHAR2(250), 
	 CONSTRAINT EFM_T_CHECKADDCOL_PKY PRIMARY KEY (BUSINESSTYPE) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CHECK_T_REGVIEW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CHECK_T_REGVIEW 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	APPID VARCHAR2(32) NOT NULL ENABLE, 
	VIEWID VARCHAR2(32) NOT NULL ENABLE, 
	VIEWDBNAME VARCHAR2(250) NOT NULL ENABLE, 
	VIEWCNNAME VARCHAR2(250) NOT NULL ENABLE, 
	ORDERID NUMBER(*,0) DEFAULT 0, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CHECK_T_REGVIEW PRIMARY KEY (PROVINCE, YEAR, STATUS, APPID, VIEWID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CHECK_T_VTOTABLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CHECK_T_VTOTABLE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	VIEWID VARCHAR2(32) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	BGTLVL CHAR(1), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CHECK_T_VTOTABLE PRIMARY KEY (PROVINCE, YEAR, STATUS, VIEWID, TABLEID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CACHE_T_APPOBJECT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CACHE_T_APPOBJECT 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	APPID VARCHAR2(32) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	OBJECTID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CACHE_T_APPOBJECT PRIMARY KEY (PROVINCE, YEAR, STATUS, APPID, TABLEID, OBJECTID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CACHE_T_CHECK</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CACHE_T_CHECK 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	CHECKID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CACHE_T_CHECK PRIMARY KEY (PROVINCE, YEAR, STATUS, CHECKID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_AGENCYDEPT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_AGENCYDEPT 
   (	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	DEPTID VARCHAR2(32) NOT NULL ENABLE, 
	AGENCYID VARCHAR2(32) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CACHE_T_CODE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CACHE_T_CODE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABID VARCHAR2(32) NOT NULL ENABLE, 
	DICTVERSION NUMBER(9,0) DEFAULT 0, 
	DATAVERSION NUMBER(9,0) DEFAULT 0, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CACHE_T_CODE PRIMARY KEY (PROVINCE, YEAR, STATUS, TABID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_CHECKSORT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_CHECKSORT 
   (	CHECKSORTID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CHECKSORTNAME VARCHAR2(100), 
	LVLID VARCHAR2(60), 
	SUPERID VARCHAR2(32), 
	ENDFLAG CHAR(1), 
	REMARK VARCHAR2(200), 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1, 
	APPID VARCHAR2(32)
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_CUSCONFIG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_CUSCONFIG 
   (	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	USERID VARCHAR2(32) NOT NULL ENABLE, 
	FUNCID VARCHAR2(100) NOT NULL ENABLE, 
	REMARK VARCHAR2(100), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	CONFIGNAME VARCHAR2(100), 
	TABLEID VARCHAR2(32), 
	ORDERID NUMBER(10,0) DEFAULT 0 NOT NULL ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE UNIQUE INDEX PK_BGT_T_CUSCONFIG ON P#BGT_T_CUSCONFIG (PROVINCE, YEAR, STATUS, GUID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CACHE_T_FORMULA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CACHE_T_FORMULA 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	FORMULAID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CACHE_T_FORMULA PRIMARY KEY (PROVINCE, YEAR, STATUS, FORMULAID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_CUSORDER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_CUSORDER 
   (	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CONFIGID VARCHAR2(32) NOT NULL ENABLE, 
	COLUMNID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERTYPE VARCHAR2(4) DEFAULT 'ASC' NOT NULL ENABLE, 
	ORDERID NUMBER(10,0) DEFAULT 0, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE UNIQUE INDEX PK_BGT_T_CUSORDER ON P#BGT_T_CUSORDER (PROVINCE, YEAR, STATUS, GUID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_CUSQUERY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_CUSQUERY 
   (	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CONFIGID VARCHAR2(32) NOT NULL ENABLE, 
	COLUMNID VARCHAR2(32) NOT NULL ENABLE, 
	OPERATORTYPE VARCHAR2(100) NOT NULL ENABLE, 
	QUERYVALUE VARCHAR2(100), 
	ORDERID NUMBER(10,0) DEFAULT 0, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE UNIQUE INDEX PK_BGT_T_CUSQUERY ON P#BGT_T_CUSQUERY (PROVINCE, YEAR, STATUS, GUID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CACHE_T_MODEL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CACHE_T_MODEL 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CACHE_T_MODEL PRIMARY KEY (PROVINCE, YEAR, STATUS, TABID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_FORMUALSORTQUERY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_FORMUALSORTQUERY 
   (	QUERYID VARCHAR2(32) NOT NULL ENABLE, 
	LVLID VARCHAR2(60), 
	SUPERID VARCHAR2(32), 
	ITEMID VARCHAR2(32) DEFAULT sys_guid(), 
	CONTENTENG CLOB, 
	CONTENTCHI CLOB, 
	ISLEAF CHAR(1), 
	SORTTYPE CHAR(1), 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	STATUS CHAR(1) DEFAULT 1, 
	 CONSTRAINT SYS_1C0070026 CHECK (QUERYID IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0070028 CHECK (YEAR IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0070029 CHECK (PROVINCE IS NOT NULL) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_FORMULA_REF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_FORMULA_REF 
   (	REFRESH_ID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NAME VARCHAR2(100), 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1, 
	 CONSTRAINT PK_BGT_T_FORMULA_REF PRIMARY KEY (PROVINCE, YEAR, STATUS, REFRESH_ID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_FORMULA_REF_RELA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_FORMULA_REF_RELA 
   (	RELA_ID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	REFRESH_ID VARCHAR2(32) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID VARCHAR2(32) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1,
	CONSTRAINT PK_BGT_T_FORMULA_REF_RELA PRIMARY KEY (PROVINCE, YEAR, STATUS, RELA_ID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CACHE_T_QREPORT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CACHE_T_QREPORT 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	OBJECTID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CACHE_T_QREPORT PRIMARY KEY (PROVINCE, YEAR, STATUS, OBJECTID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_OARELATION</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_OARELATION 
   (	DOCID VARCHAR2(32), 
	TASKID VARCHAR2(32), 
	USERID VARCHAR2(32), 
	ORGID VARCHAR2(32), 
	REMARK VARCHAR2(100), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE UNIQUE INDEX PK_BGT_T_OARELATION ON P#BGT_T_OARELATION (PROVINCE, YEAR, STATUS, GUID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_SOURTABLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_SOURTABLE 
   (	ESTID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	SOURMODELID VARCHAR2(32) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_SYSFUNCDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_SYSFUNCDEF 
   (	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NAME VARCHAR2(200), 
	TITLE VARCHAR2(200), 
	PARAMS VARCHAR2(1000), 
	RETVAL VARCHAR2(1000), 
	TBODY VARCHAR2(4000), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DEFTYPE VARCHAR2(2), 
	APPID VARCHAR2(10), 
	ISPASS VARCHAR2(1), 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	 CONSTRAINT PK_BGT_T_SYSFUNCDEF PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CACHE_T_TABDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CACHE_T_TABDEF 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	GROUPVERSION NUMBER(9,0) DEFAULT 0, 
	SORTVERSION NUMBER(9,0) DEFAULT 0, 
	SINGLEVERSION NUMBER(9,0) DEFAULT 0, 
	QUERYVERSION NUMBER(9,0) DEFAULT 0, 
	TOANAVERSION NUMBER(9,0) DEFAULT 0, 
	FIXTABVERSION NUMBER(9,0) DEFAULT 0, 
	FDTABVERSION NUMBER(9,0) DEFAULT 0, 
	RELAREFVERSION NUMBER(9,0) DEFAULT 0, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CACHE_T_TABDEF PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_USERPAGESET</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_USERPAGESET 
   (	DATAKEY VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	USERID VARCHAR2(32) NOT NULL ENABLE, 
	TYPEID VARCHAR2(32) NOT NULL ENABLE, 
	TYPENAME VARCHAR2(100), 
	TYPEVALUE VARCHAR2(100), 
	REMARK VARCHAR2(4000), 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	FUNCID VARCHAR2(100), 
	PROVINCE VARCHAR2(9), 
	YEAR CHAR(4), 
	STATUS CHAR(1) DEFAULT '1', 
	 CONSTRAINT SYS_1C0045613 CHECK (DATAKEY IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0045614 CHECK (USERID IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0045615 CHECK (TYPEID IS NOT NULL) ENABLE, 
	 CONSTRAINT BGT_T_USERPAGESET PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#BGT_T_VERSION</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#BGT_T_VERSION 
   (	VERSION_ID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	ESTID VARCHAR2(32) NOT NULL ENABLE, 
	VERSION_NAME VARCHAR2(32), 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1, 
	VERSION_CODE VARCHAR2(32)
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CAL_T_CELLSUMSET</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CAL_T_CELLSUMSET 
   (	GUID VARCHAR2(32), 
	FUNDSOURCEID VARCHAR2(32), 
	PROJTYPEID VARCHAR2(32), 
	TABLEID VARCHAR2(32), 
	RELATYPE CHAR(1), 
	STATUS CHAR(1) DEFAULT '1', 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	 CONSTRAINT SYS_1C0050419 CHECK (YEAR IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0050420 CHECK (PROVINCE IS NOT NULL) ENABLE, 
	 CONSTRAINT CAL_T_CELLSUMSET_PKY PRIMARY KEY (GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CACHE_T_USER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CACHE_T_USER 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	USERID VARCHAR2(32) NOT NULL ENABLE, 
	AGENCYVERSION NUMBER(9,0) DEFAULT 0, 
	DEPTVERSION NUMBER(9,0) DEFAULT 0, 
	FUNCVERSION NUMBER(9,0) DEFAULT 0, 
	PROJVERSION NUMBER(9,0) DEFAULT 0, 
	TABVERSION NUMBER(9,0) DEFAULT 0, 
	COLVERSION NUMBER(9,0) DEFAULT 0, 
	ROWVERSION NUMBER(9,0) DEFAULT 0, 
	LOCKVERSION NUMBER(9,0) DEFAULT 0, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CACHE_T_USER PRIMARY KEY (PROVINCE, YEAR, STATUS, USERID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CDT_T_TASKINFO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CDT_T_TASKINFO 
   (	TASKID VARCHAR2(32) NOT NULL ENABLE, 
	TASKNAME VARCHAR2(200), 
	SUPERTASKID VARCHAR2(32), 
	TASKTYPEID VARCHAR2(32), 
	ROOTTASKID VARCHAR2(32), 
	DISTRICTID VARCHAR2(32), 
	RECEIVEID VARCHAR2(32), 
	TASKLVLID VARCHAR2(60), 
	TASKCODE VARCHAR2(100), 
	TASKCYCLE VARCHAR2(32), 
	DATASTARTDATE VARCHAR2(10), 
	DATAENDDATE VARCHAR2(10), 
	CREATOR VARCHAR2(32), 
	CREATEDATE DATE, 
	TASKDESC VARCHAR2(500), 
	ENDDATE VARCHAR2(10), 
	TASKSTATUS CHAR(1), 
	REMARK VARCHAR2(500), 
	LEVELNO CHAR(1), 
	APPID VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	INSERTVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1, 
	ISINSTEAD CHAR(1), 
	ISLEAF CHAR(1), 
	 CONSTRAINT PK_P#CDT_T_TASKINFO PRIMARY KEY (TASKID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CDT_T_TASKLOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CDT_T_TASKLOG 
   (	TASKID VARCHAR2(32), 
	LOGID VARCHAR2(32) NOT NULL ENABLE, 
	LOGDATE DATE, 
	DISTRICTID VARCHAR2(32), 
	OPERATOR VARCHAR2(32), 
	OLDSTATUS CHAR(1), 
	NEWSTATUS CHAR(1), 
	LOGDESC VARCHAR2(500), 
	PROVINCE VARCHAR2(9), 
	YEAR CHAR(4), 
	STATUS CHAR(1) DEFAULT '1', 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CDT_T_TASKTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CDT_T_TASKTYPE 
   (	TASKTYPEID VARCHAR2(32) NOT NULL ENABLE, 
	TASKTYPENAME VARCHAR2(32), 
	TASKTYPEDESC VARCHAR2(500), 
	DISTRICTID VARCHAR2(32), 
	ORDERID NUMBER(10,0) DEFAULT 0, 
	TASKBUSITYPE VARCHAR2(32), 
	TASKCYCLE_TYPE VARCHAR2(32), 
	CODERULE VARCHAR2(250), 
	NAMERULE VARCHAR2(250), 
	TARGET_VIEWNAME VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	APPID VARCHAR2(32), 
	PROCESS_TPLID VARCHAR2(32), 
	TRANSFORMTYPE VARCHAR2(32), 
	COLLECTRANGE VARCHAR2(32), 
	CONFIRMFUNC VARCHAR2(32), 
	ISSECUCTRL CHAR(1) DEFAULT '1', 
	ISSUM CHAR(1) DEFAULT '0', 
	SUMCYC NUMBER(10,0), 
	REFPROC VARCHAR2(250), 
	 CONSTRAINT PK_CDT_T_TASKTYPE PRIMARY KEY (STATUS, TASKTYPEID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_APPREGISTER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_APPREGISTER 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	APPID VARCHAR2(32) NOT NULL ENABLE, 
	APPNAME VARCHAR2(100), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#DICT_T_APPREGISTER PRIMARY KEY (PROVINCE, YEAR, STATUS, DBID, APPID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CDT_T_TASKTYPEFILE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CDT_T_TASKTYPEFILE 
   (	TASKTYPEID VARCHAR2(32) NOT NULL ENABLE, 
	FILEID VARCHAR2(32), 
	ORDERID NUMBER(10,0) DEFAULT 0, 
	DISTRICTID VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CDT_T_TASKTYPEFILE PRIMARY KEY (GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CDT_T_TASKTYPEMODEL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CDT_T_TASKTYPEMODEL 
   (	TASKTYPEID VARCHAR2(32) NOT NULL ENABLE, 
	MODELID VARCHAR2(32), 
	DISTRICTID VARCHAR2(32), 
	ORDERID NUMBER(10,0) DEFAULT 0, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	REPCONDITION VARCHAR2(4000), 
	 CONSTRAINT PK_P#CDT_T_TASKTYPEMODEL PRIMARY KEY (GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETANALY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETANALY 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	HREFNAME VARCHAR2(100), 
	HREFLOC VARCHAR2(1000), 
	HREFPARMID VARCHAR2(32) NOT NULL ENABLE, 
	PICTUREID VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	 CONSTRAINT PK_P#DICT_T_SETANALY PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID, HREFPARMID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CDT_T_TASKTYPESPF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CDT_T_TASKTYPESPF 
   (	TASKTYPEID VARCHAR2(32) NOT NULL ENABLE, 
	SPFID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(10,0) DEFAULT 0, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CDT_T_TASKTYPESPF PRIMARY KEY (GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CHECK_T_IDTOTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CHECK_T_IDTOTAB 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	CHECKID VARCHAR2(32) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	BGTLVL CHAR(1), 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	GUID VARCHAR2(32) DEFAULT sys_guid(), 
	STATUS CHAR(1) DEFAULT 1
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_APPROVAL_TYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_APPROVAL_TYPE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	SRCSCALE NUMBER(24,6), 
	 CONSTRAINT PK_P#CODE_T_APPROVAL_TYPE PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETBASENUMSUB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETBASENUMSUB 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	COLUMNID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	COLVALUE VARCHAR2(100) NOT NULL ENABLE, 
	BGTLVL CHAR(1), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#DICT_T_SETBASENUMSUB PRIMARY KEY (PROVINCE, YEAR, STATUS, COLUMNID, COLVALUE, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_COLLECTTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_COLLECTTYPE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	SRCSCALE NUMBER(24,6), 
	REFTABLE VARCHAR2(32)
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_CONTRACTTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_CONTRACTTYPE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	STEPTYPE VARCHAR2(32) NOT NULL ENABLE, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	SRCSCALE NUMBER(24,6), 
	 CONSTRAINT PK_P#CODE_T_CONTRACTTYPE PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_DIVREPORTSTATS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_DIVREPORTSTATS 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	SRCSCALE NUMBER(24,6), 
	 CONSTRAINT PK_P#CODE_T_DIVREPORTSTATS PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETBASENUMTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETBASENUMTAB 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	COLUMNID VARCHAR2(32) NOT NULL ENABLE, 
	BGTLVL CHAR(1), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#DICT_T_SETBASENUMTAB PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID, COLUMNID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_FUND_LEVEL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_FUND_LEVEL 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	SRCSCALE NUMBER(24,6), 
	 CONSTRAINT PK_P#CODE_T_FUND_LEVEL PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_FUND_M_M</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_FUND_M_M 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	SRCSCALE NUMBER(24,6), 
	 CONSTRAINT PK_P#CODE_T_FUND_M_M PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETFDDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETFDDEF 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	ISFIX CHAR(1), 
	LVLNANMECOL VARCHAR2(32), 
	LAYERINDENT VARCHAR2(10), 
	REFID VARCHAR2(32), 
	REFWHERE VARCHAR2(1000), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	COLORDER VARCHAR2(4000), 
	 CONSTRAINT PK_P#DICT_T_SETFDDEF PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_KPISECTORS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_KPISECTORS 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_PLANSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_PLANSTATUS 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	SRCSCALE NUMBER(24,6), 
	 CONSTRAINT PK_P#CODE_T_PLANSTATUS PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_PROJAUDITINGSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_PROJAUDITINGSTATUS 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	SRCSCALE NUMBER(24,6), 
	 CONSTRAINT PK_P#CODE_T_PROJAUDITINGSTATUS PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETFIX</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETFIX 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	TYPEID CHAR(1), 
	FDCODETOCOLS VARCHAR2(1000), 
	LVLNANMECOL VARCHAR2(32), 
	LAYERINDENT VARCHAR2(10), 
	REFID VARCHAR2(32), 
	REFWHERE VARCHAR2(1000), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	COLORDER VARCHAR2(4000), 
	 CONSTRAINT PK_P#DICT_T_SETFIX PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_PROJAUDITSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_PROJAUDITSTATUS 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	SRCSCALE NUMBER(24,6), 
	 CONSTRAINT PK_P#CODE_T_PROJAUDITSTATUS PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_PROJCHECKSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_PROJCHECKSTATUS 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	SRCSCALE NUMBER(24,6), 
	 CONSTRAINT PK_P#CODE_T_PROJCHECKSTATUS PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_PRORELEASE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_PRORELEASE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	SRCSCALE NUMBER(24,6), 
	 CONSTRAINT PK_P#CODE_T_PRORELEASE PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETGROUP</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETGROUP 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	COLUMNID VARCHAR2(32) NOT NULL ENABLE, 
	IDSHOWCOL VARCHAR2(32), 
	NAMESHOWCOL VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	ISASC CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#DICT_T_SETGROUP PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID, COLUMNID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_SPFSETUPSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_SPFSETUPSTATUS 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	SRCSCALE NUMBER(24,6), 
	 CONSTRAINT PK_P#CODE_T_SPFSETUPSTATUS PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CODE_T_UPDATESTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CODE_T_UPDATESTATUS 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	CODE VARCHAR2(200) NOT NULL ENABLE, 
	NAME VARCHAR2(255) NOT NULL ENABLE, 
	SUPERGUID VARCHAR2(32) NOT NULL ENABLE, 
	ISLEAF CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ALIAS VARCHAR2(100), 
	PINYIN VARCHAR2(20), 
	REMARK VARCHAR2(500), 
	CREATEDATE VARCHAR2(10), 
	STARTDATE VARCHAR2(10), 
	ENDDATE VARCHAR2(10), 
	SRCGUID VARCHAR2(32), 
	DESGUID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	SRCSCALE NUMBER(24,6)
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE UNIQUE INDEX PK_CODE_T_UPDATESTATUS ON P#CODE_T_UPDATESTATUS (PROVINCE, YEAR, GUID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_LOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_LOG 
   (	YEAR CHAR(4), 
	PROVINCE VARCHAR2(9), 
	LOGID VARCHAR2(32) NOT NULL ENABLE, 
	LOGCONTENT CLOB, 
	INVALID CHAR(1) DEFAULT '0', 
	OBJECTTYPE VARCHAR2(200), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE UNIQUE INDEX PK_DICT_T_LOG ON P#DICT_T_LOG (PROVINCE, YEAR, STATUS, LOGID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SINGLRECORD</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SINGLRECORD 
   (	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	RECID VARCHAR2(32) NOT NULL ENABLE, 
	SHOWCOLS NUMBER(9,0) DEFAULT 0, 
	TITLEWIDTH NUMBER(9,0) DEFAULT 0, 
	REMARK VARCHAR2(500), 
	PROCESSID VARCHAR2(32), 
	PROVINCE VARCHAR2(9), 
	YEAR CHAR(4), 
	STATUS CHAR(1) DEFAULT '1', 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE UNIQUE INDEX PK_DICT_T_SINGLRECORD ON P#DICT_T_SINGLRECORD (PROVINCE, YEAR, STATUS, TABLEID, RECID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETHREFPARM</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETHREFPARM 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	HREFPARMID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	PARMNAME VARCHAR2(100), 
	PARMCON VARCHAR2(1000), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	HREFID VARCHAR2(32) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#DICT_T_SETHREFPARM PRIMARY KEY (PROVINCE, YEAR, STATUS, HREFPARMID, HREFID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SINRECDETAIL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SINRECDETAIL 
   (	RECID VARCHAR2(32) NOT NULL ENABLE, 
	CTRLID VARCHAR2(32) NOT NULL ENABLE, 
	CTRLNAME VARCHAR2(100), 
	SUPERID VARCHAR2(32), 
	ISLEAF CHAR(1) DEFAULT 1, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	ISTEXT CHAR(1), 
	COLSPAN NUMBER(9,0) DEFAULT 0, 
	ROWSPAN NUMBER(9,0) DEFAULT 0, 
	ISGROUPCTRL CHAR(1), 
	ISSHOW CHAR(1), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9), 
	YEAR CHAR(4), 
	STATUS CHAR(1) DEFAULT '1', 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE UNIQUE INDEX PK_DICT_T_SINRECDETAIL ON P#DICT_T_SINRECDETAIL (PROVINCE, YEAR, STATUS, RECID, GUID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#EXP_S_PROJINVEST</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#EXP_S_PROJINVEST 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	FUNDSOURCEID VARCHAR2(32) NOT NULL ENABLE, 
	FUNDSOURCENAME VARCHAR2(100), 
	SUPERID VARCHAR2(32), 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ISLEAF CHAR(1), 
	TOBASETAB VARCHAR2(32), 
	TOBASECOL VARCHAR2(32), 
	TOPROJTAB VARCHAR2(32), 
	TOPROJCOL VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL NUMBER(1,0) DEFAULT 0, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	CODE VARCHAR2(32), 
	FUNDTYPE VARCHAR2(32), 
	 CONSTRAINT PK_P#EXP_S_PROJINVEST PRIMARY KEY (PROVINCE, YEAR, STATUS, FUNDSOURCEID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#EXP_S_PROJTYPETO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#EXP_S_PROJTYPETO 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	AGENCYID VARCHAR2(32) NOT NULL ENABLE, 
	PROJTYPEID VARCHAR2(32) NOT NULL ENABLE, 
	EXPFUNCID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#EXP_S_PROJTYPETO PRIMARY KEY (PROVINCE, YEAR, STATUS, AGENCYID, PROJTYPEID, EXPFUNCID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETMAINSUBRELA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETMAINSUBRELA 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	MAINSUBID VARCHAR2(32) NOT NULL ENABLE, 
	MAINTABID VARCHAR2(32) NOT NULL ENABLE, 
	SUBTABID VARCHAR2(32) NOT NULL ENABLE, 
	MAINFKID VARCHAR2(32) NOT NULL ENABLE, 
	FKID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#DICT_T_SETMAINSUBRELA PRIMARY KEY (PROVINCE, YEAR, STATUS, MAINSUBID, MAINTABID, MAINFKID, SUBTABID, FKID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#EXP_T_COLTOTABLES</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#EXP_T_COLTOTABLES 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT to_char(sysdate,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT sys_guid(), 
	COLUMNID VARCHAR2(32), 
	TABLEID VARCHAR2(32), 
	RELATALBLEID VARCHAR2(32), 
	COLVALUENAME VARCHAR2(200), 
	COLVALUEID VARCHAR2(200), 
	COLLTYPEID VARCHAR2(32), 
	 CONSTRAINT SYS_1C0030696 CHECK (PROVINCE IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0030697 CHECK (YEAR IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0030698 CHECK (STATUS IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0030699 CHECK (DATAKEY IS NOT NULL) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#EXP_T_PBUDGET</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#EXP_T_PBUDGET 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	PROJECTID VARCHAR2(32), 
	PROJNAME VARCHAR2(200), 
	ACCTCODE VARCHAR2(32), 
	INBDGNUM NUMBER(24,6) DEFAULT 0, 
	DEALTYPE NUMBER(32,0) DEFAULT 0, 
	AGENCYID VARCHAR2(32), 
	FUNDSOURCEID VARCHAR2(32), 
	LEVELNO VARCHAR2(10), 
	ORDERID NUMBER(10,0) DEFAULT 0, 
	FINYEAR VARCHAR2(10), 
	EXPECOID VARCHAR2(32), 
	 CONSTRAINT PK_P#EXP_T_PBUDGET PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETMAINSUBTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETMAINSUBTAB 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	COLLTYPEID VARCHAR2(32) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	ISMAINTABLE CHAR(1) DEFAULT 0 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#DICT_T_SETMAINSUBTAB PRIMARY KEY (PROVINCE, YEAR, STATUS, COLLTYPEID, ISMAINTABLE, TABLEID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#KPI_T_KPITOCALIBER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#KPI_T_KPITOCALIBER 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	KPIID VARCHAR2(32), 
	OBJECTID VARCHAR2(32), 
	KPITYPE VARCHAR2(2), 
	 CONSTRAINT PK_P#KPI_T_KPITOCALIBER PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETQUERYD</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETQUERYD 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	RECID VARCHAR2(32) NOT NULL ENABLE, 
	SHOWCOLS NUMBER(9,0) DEFAULT 0, 
	TITLEWIDTH NUMBER(9,0) DEFAULT 0, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	ISSHOWTITLE CHAR(1), 
	INVLAID CHAR(1) DEFAULT 0 NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#DICT_T_SETQUERYD PRIMARY KEY (PROVINCE, YEAR, STATUS, INVLAID, TABLEID, RECID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETQUERYDDET</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETQUERYDDET 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	RECID VARCHAR2(32) NOT NULL ENABLE, 
	CTRLID VARCHAR2(32) NOT NULL ENABLE, 
	CTRLNAME VARCHAR2(100), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	COLSPAN NUMBER(9,0) DEFAULT 0, 
	ISSHOW CHAR(1), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	OPERATOR VARCHAR2(32), 
	DEFVALUE VARCHAR2(100), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#DICT_T_SETQUERYDDET PRIMARY KEY (PROVINCE, YEAR, STATUS, RECID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETREC</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETREC 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	OBJECTID VARCHAR2(32) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	RECID VARCHAR2(32) NOT NULL ENABLE, 
	SHOWCOLS NUMBER(9,0) DEFAULT 0, 
	TITLEWIDTH NUMBER(9,0) DEFAULT 0, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	REMARK VARCHAR2(500), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	PROCESSID VARCHAR2(32), 
	 CONSTRAINT PK_P#DICT_T_SETREC PRIMARY KEY (PROVINCE, YEAR, STATUS, OBJECTID, TABLEID, RECID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETRECDETAIL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETRECDETAIL 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	RECID VARCHAR2(32) NOT NULL ENABLE, 
	CTRLID VARCHAR2(32) NOT NULL ENABLE, 
	CTRLNAME VARCHAR2(100), 
	SUPERID VARCHAR2(32), 
	ISLEAF CHAR(1) DEFAULT 1, 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	ISTEXT CHAR(1), 
	COLSPAN NUMBER(9,0) DEFAULT 0, 
	ROWSPAN NUMBER(9,0) DEFAULT 0, 
	ISGROUPCTRL CHAR(1), 
	ISSHOW CHAR(1), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#DICT_T_SETRECDETAIL PRIMARY KEY (PROVINCE, YEAR, STATUS, RECID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETREFRELA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETREFRELA 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	RELAID VARCHAR2(32) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	COLUMNID VARCHAR2(32), 
	CONDCOLUMNID VARCHAR2(32), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	RELANAME VARCHAR2(100), 
	RELADBTAB VARCHAR2(30), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#DICT_T_SETREFRELA PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID, RELAID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETSORT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETSORT 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	COLUMNID VARCHAR2(32) NOT NULL ENABLE, 
	ASCFLAG CHAR(1), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	ISRESERVE CHAR(1), 
	ISDEFAULT CHAR(1), 
	 CONSTRAINT PK_P#DICT_T_SETSORT PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID, COLUMNID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETTABTITLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETTABTITLE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	CELLREGION VARCHAR2(100) NOT NULL ENABLE, 
	COLWIDTH NUMBER(*,0) DEFAULT 0, 
	ROWHEIGHT NUMBER(*,0) DEFAULT 0, 
	TITLETEXT VARCHAR2(1000), 
	FONTNAME VARCHAR2(20), 
	FONTSIZE NUMBER(*,0) DEFAULT 0, 
	ISITALIC CHAR(1), 
	ISUNDERLINE CHAR(1), 
	ISBOLD CHAR(1), 
	ALIGMENT CHAR(1), 
	ISBORDER CHAR(1) DEFAULT '1', 
	BGCOLOR VARCHAR2(1000), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#DICT_T_SETTABTITLE PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_UPDATEVIEW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_UPDATEVIEW 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	COLUMNID VARCHAR2(32), 
	TOCOLUMNID VARCHAR2(500), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#DICT_T_UPDATEVIEW PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_CENTETIMG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_CENTETIMG 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	NEEDUPDATE VARCHAR2(4000), 
	FINYEAR VARCHAR2(4) DEFAULT to_char(sysdate,'YYYY'), 
	AGENCYID VARCHAR2(32), 
	ID VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	IMAGEID VARCHAR2(32) NOT NULL ENABLE, 
	SHOW CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	LINK VARCHAR2(100), 
	 CONSTRAINT PK_P#SPF_T_CENTETIMG PRIMARY KEY (PROVINCE, YEAR, STATUS, ID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_FADJUSTSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_FADJUSTSTATUS 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	SPFID VARCHAR2(32) NOT NULL ENABLE, 
	ADJUSTSTATUS NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	SPFNAME VARCHAR2(200) NOT NULL ENABLE, 
	BAKVERSION NUMBER(5,0), 
	 CONSTRAINT PK_P#SPF_T_FADJUSTSTATUS PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#EXP_S_FIXTABSHOW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#EXP_S_FIXTABSHOW 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	CELLREGION VARCHAR2(100) NOT NULL ENABLE, 
	REFID VARCHAR2(32), 
	COLWIDTH NUMBER(*,0) DEFAULT 0, 
	ROWHEIGHT NUMBER(*,0) DEFAULT 0, 
	TITLETEXT VARCHAR2(1000), 
	FONTNAME VARCHAR2(20), 
	FONTSIZE NUMBER(*,0) DEFAULT 0, 
	ISITALIC CHAR(1), 
	ISUNDERLINE CHAR(1), 
	ISBOLD CHAR(1), 
	FORMULAID VARCHAR2(32), 
	ALIGMENT CHAR(1), 
	ISBORDER CHAR(1) DEFAULT '1', 
	BGCOLOR VARCHAR2(1000), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#EXP_S_FIXTABSHOW PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_FAUDITINFO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_FAUDITINFO 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	NEEDUPDATE VARCHAR2(4000), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	AGENCYID VARCHAR2(32), 
	STEPNAME VARCHAR2(50), 
	AUDITRESULT VARCHAR2(50), 
	OPERATORID VARCHAR2(32), 
	AUDITOPINION VARCHAR2(2000), 
	DOCDATAKEY VARCHAR2(32), 
	SPFID VARCHAR2(32) NOT NULL ENABLE, 
	AUDITSTATUSID VARCHAR2(1), 
	AUDITTYPE CHAR(1), 
	AUDITCLASS CHAR(1), 
	AUDITERID VARCHAR2(32), 
	AUDITDATE VARCHAR2(20) DEFAULT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'), 
	 CONSTRAINT PK_P#SPF_T_FAUDITINFO PRIMARY KEY (PROVINCE, YEAR, STATUS, SPFID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_FOOTLINK</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_FOOTLINK 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	NEEDUPDATE VARCHAR2(4000), 
	FINYEAR VARCHAR2(4) DEFAULT to_char(sysdate,'YYYY'), 
	AGENCYID VARCHAR2(32), 
	CODE VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	NAME VARCHAR2(100) NOT NULL ENABLE, 
	SHOW CHAR(1) DEFAULT '1', 
	 CONSTRAINT PK_P#SPF_T_FOOTLINK PRIMARY KEY (PROVINCE, YEAR, STATUS, CODE, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#PUB_T_ATTACH</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#PUB_T_ATTACH 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	ATTACHID VARCHAR2(32) NOT NULL ENABLE, 
	ATTACHNAME VARCHAR2(200), 
	FILENAME VARCHAR2(200), 
	FILEPATH VARCHAR2(500), 
	FILESIZE NUMBER(18,0) DEFAULT 0, 
	ISUSE CHAR(1) DEFAULT 1, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	UPLOADDATE VARCHAR2(20) DEFAULT TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI'), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#PUB_T_ATTACH PRIMARY KEY (PROVINCE, YEAR, STATUS, ATTACHID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_FSPF2JATTACH</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_FSPF2JATTACH 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	AGENCYID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	FDCODE VARCHAR2(100), 
	LEVELNO NUMBER(1,0) DEFAULT 0, 
	ISLEAF CHAR(1), 
	ISINSERT CHAR(1), 
	TEMPLATEID VARCHAR2(32), 
	CELLSECU VARCHAR2(1000), 
	SYNSTATUS CHAR(1), 
	ISQZX CHAR(1), 
	ISDJ CHAR(1), 
	ISUPDATE CHAR(1), 
	ORIGCODE VARCHAR2(32), 
	ISTEMPLATE CHAR(1) DEFAULT '1', 
	SUPERID VARCHAR2(32), 
	FIRATTNAME VARCHAR2(200), 
	DETCLASSID VARCHAR2(50), 
	REMARK VARCHAR2(1000), 
	ISMUST CHAR(1), 
	NEEDUPDATE VARCHAR2(4000), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	ATTACHID VARCHAR2(32), 
	SPFID VARCHAR2(32), 
	TEMPLATENAME VARCHAR2(32), 
	ATTNAME VARCHAR2(200), 
	 CONSTRAINT PK_P#SPF_T_FSPF2JATTACH PRIMARY KEY (PROVINCE, YEAR, STATUS, AGENCYID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_FZXZJDWSBFW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_FZXZJDWSBFW 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1', 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32), 
	SPFID VARCHAR2(32), 
	AGENCYID VARCHAR2(32) DEFAULT NULL, 
	 CONSTRAINT PK_P#SPF_T_FZXZJDWSBFW PRIMARY KEY (PROVINCE, YEAR, STATUS, AGENCYID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_FZXZJSDQ</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_FZXZJSDQ 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1', 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32), 
	SPFID VARCHAR2(32), 
	DISTRICTID VARCHAR2(32), 
	DECLQUOTA NUMBER(24,6), 
	DECLTIMES NUMBER(24,0), 
	 CONSTRAINT PK_P#SPF_T_FZXZJSDQ PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_HEAD</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_HEAD 
   (	TYPEID VARCHAR2(32) NOT NULL ENABLE, 
	TYPENAME VARCHAR2(100), 
	DISTRICTID VARCHAR2(32) NOT NULL ENABLE, 
	ISSHOW CHAR(1) DEFAULT '1', 
	CONTENT CLOB, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DATAKEY VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_HEAD PRIMARY KEY (PROVINCE, YEAR, STATUS, TYPEID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_LIMITCOL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_LIMITCOL 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	COLUMNID VARCHAR2(32) NOT NULL ENABLE, 
	LIMITCON VARCHAR2(4000), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	BGTLVL CHAR(1), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	LIMITCONFUNC VARCHAR2(4000), 
	SHOWLIMIT VARCHAR2(256), 
	 CONSTRAINT PK_P#SECU_T_LIMITCOL PRIMARY KEY (PROVINCE, YEAR, STATUS, TABLEID, COLUMNID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_HELPLINK</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_HELPLINK 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	NEEDUPDATE VARCHAR2(4000), 
	FINYEAR VARCHAR2(4) DEFAULT to_char(sysdate,'YYYY'), 
	AGENCYID VARCHAR2(32), 
	ID VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	CONTENT VARCHAR2(32) NOT NULL ENABLE, 
	TYPE CHAR(1) NOT NULL ENABLE, 
	SHOW CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_HELPLINK PRIMARY KEY (PROVINCE, YEAR, STATUS, ID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_LINKCONTENT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_LINKCONTENT 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	NEEDUPDATE VARCHAR2(4000), 
	FINYEAR VARCHAR2(4) DEFAULT to_char(sysdate,'YYYY'), 
	AGENCYID VARCHAR2(32), 
	ID VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	CODE VARCHAR2(32) NOT NULL ENABLE, 
	LINK VARCHAR2(100) NOT NULL ENABLE, 
	NAME VARCHAR2(100) NOT NULL ENABLE, 
	SHOW CHAR(1) DEFAULT '1', 
	 CONSTRAINT PK_P#SPF_T_LINKCONTENT PRIMARY KEY (PROVINCE, YEAR, STATUS, ID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_NDECLAREAGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_NDECLAREAGENCY 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	NEEDUPDATE VARCHAR2(40), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	AGENCYID VARCHAR2(32), 
	SPFID VARCHAR2(32), 
	 CONSTRAINT PK_P#SPF_T_NDECLAREAGENCY PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_LOCK</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_LOCK 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	APPID VARCHAR2(32) NOT NULL ENABLE, 
	TYPEID CHAR(1) NOT NULL ENABLE, 
	OBJECTID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	TOID VARCHAR2(32) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SECU_T_LOCK PRIMARY KEY (PROVINCE, YEAR, STATUS, APPID, TYPEID, OBJECTID, TOID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_NFAUDITINFO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_NFAUDITINFO 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) NOT NULL ENABLE, 
	AGENCYID VARCHAR2(32), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	STEPNAME VARCHAR2(50), 
	AUDITRESULT VARCHAR2(50), 
	AUDITOPINION VARCHAR2(2000), 
	SPFID VARCHAR2(32), 
	FINYEAR VARCHAR2(4), 
	AUDITSTATUS VARCHAR2(32), 
	AUDITTYPE CHAR(1), 
	AUDITCLASS CHAR(1), 
	AUDITERID VARCHAR2(32), 
	AUDITDATE VARCHAR2(20) DEFAULT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'), 
	 CONSTRAINT PK_P#SPF_T_NFAUDITINFO PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_NOTICE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_NOTICE 
   (	NOTICEID VARCHAR2(32 CHAR) NOT NULL ENABLE, 
	SUPERMENUID VARCHAR2(32 CHAR), 
	MENUID VARCHAR2(32 CHAR), 
	TITLE VARCHAR2(500 CHAR), 
	PUBLISHTIME TIMESTAMP (7), 
	EDITTIME TIMESTAMP (7), 
	ENDTIME TIMESTAMP (7), 
	CONTENT CLOB, 
	KEYWORDS VARCHAR2(2000 CHAR), 
	STATUSCODE VARCHAR2(32 CHAR), 
	PUBLISHER VARCHAR2(32 CHAR), 
	AUDITOR VARCHAR2(32 CHAR), 
	ISFILENOTICE CHAR(1) DEFAULT '0', 
	ATTACHMENT_ID VARCHAR2(32 CHAR), 
	IMAGEID VARCHAR2(32 CHAR), 
	ISIMGNOTICE VARCHAR2(1 CHAR) DEFAULT '0', 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DATAKEY VARCHAR2(32 CHAR) DEFAULT sys_guid() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_NOTICE PRIMARY KEY (PROVINCE, YEAR, STATUS, NOTICEID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_ROLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_ROLE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NAME VARCHAR2(100), 
	ORGID VARCHAR2(32), 
	ROLETYPE VARCHAR2(10) NOT NULL ENABLE, 
	REMARK VARCHAR2(100), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT PK_P#SECU_T_ROLE PRIMARY KEY (PROVINCE, YEAR, STATUS, ROLETYPE, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_NOTICE_HOMEPAGEMENU</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_NOTICE_HOMEPAGEMENU 
   (	MENUID VARCHAR2(32 CHAR) NOT NULL ENABLE, 
	SHOWID VARCHAR2(32 CHAR), 
	MENUNAME VARCHAR2(32 CHAR), 
	MENUALIAS VARCHAR2(32 CHAR), 
	BRIEF VARCHAR2(200 CHAR), 
	PAGENAME VARCHAR2(100 CHAR), 
	PAGETYPE VARCHAR2(20 CHAR), 
	PAGETARGET VARCHAR2(20 CHAR) DEFAULT '0', 
	LEVELID VARCHAR2(32 CHAR), 
	ENDFLAG VARCHAR2(32 CHAR), 
	SUPERID VARCHAR2(32 CHAR), 
	ORDERID VARCHAR2(32 CHAR), 
	ISUSED CHAR(1) DEFAULT '1', 
	NETFLAG CHAR(1) DEFAULT '0', 
	NEEDRECEIVER CHAR(1) DEFAULT '0', 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DATAKEY VARCHAR2(32 CHAR) DEFAULT sys_guid() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_NOTICE_HOMEPAGEMENU PRIMARY KEY (PROVINCE, YEAR, STATUS, MENUID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_NPAUDITINFO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_NPAUDITINFO 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	PROJECTID VARCHAR2(32), 
	AGENCYID VARCHAR2(32), 
	AUDITOPINION VARCHAR2(200), 
	AUDITCLASS CHAR(1), 
	AUDITTYPE CHAR(1), 
	AUDITSTATUS VARCHAR2(1), 
	AUDITERID VARCHAR2(32), 
	AUDITRESULT VARCHAR2(50), 
	TASKID VARCHAR2(100), 
	STEPNAME VARCHAR2(50), 
	AUDITLEVEL CHAR(1), 
	ISTEMP VARCHAR2(1), 
	AUDITDATE VARCHAR2(20) DEFAULT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'), 
	 CONSTRAINT PK_P#SPF_T_NAUDITINFO PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_USER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_USER 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CODE VARCHAR2(100), 
	NAME VARCHAR2(100), 
	USERTYPE VARCHAR2(10), 
	ORGID VARCHAR2(50), 
	DEPTID VARCHAR2(32), 
	ISADMIN CHAR(1), 
	ISSUPERMAN CHAR(1), 
	PASSWORD VARCHAR2(50), 
	PASSTIMESTAMP DATE, 
	IDCARD VARCHAR2(20), 
	TEL VARCHAR2(20), 
	MAIL VARCHAR2(50), 
	PHOTO VARCHAR2(100), 
	UPAGENCYID VARCHAR2(32), 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT PK_P#SECU_T_USER PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_NPBASEINFO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_NPBASEINFO 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	PROJECTID VARCHAR2(32), 
	AGENCYID VARCHAR2(32), 
	PROJNAME VARCHAR2(200), 
	PROJCODE VARCHAR2(60), 
	PROJTYPEID VARCHAR2(32), 
	EXPFUNCID VARCHAR2(32), 
	STARTTIME VARCHAR2(10), 
	ENDTIME VARCHAR2(10), 
	CHARGER VARCHAR2(50), 
	CHARGERPHONE NUMBER(20,0) DEFAULT 0, 
	CHARGERMOBILE VARCHAR2(46), 
	CREATEUSER VARCHAR2(32), 
	CREATEUSERNAME VARCHAR2(1000), 
	CREATETIME VARCHAR2(20) DEFAULT TO_CHAR(SYSDATE,'FXYYYY-MM-DD'), 
	ENDYEAR VARCHAR2(10), 
	STARTYEAR VARCHAR2(10), 
	MAINCONTENT VARCHAR2(2000), 
	ISPUBSHOW VARCHAR2(1), 
	ISBGT VARCHAR2(1), 
	ISMEASURED VARCHAR2(1), 
	UPSTATUS VARCHAR2(1) DEFAULT 0, 
	UPTIME VARCHAR2(20) DEFAULT SYSDATE, 
	IMPORTANCE NUMBER(10,0) DEFAULT 0, 
	ISGROVPROC VARCHAR2(32), 
	ISJX VARCHAR2(1), 
	APPROVEDDATE VARCHAR2(20), 
	APPROVEDNUM VARCHAR2(20), 
	LONGKPI VARCHAR2(4000), 
	CHECKSTATUS VARCHAR2(1) DEFAULT 0, 
	BGTSOURCEID VARCHAR2(32), 
	CONTENTTYPE VARCHAR2(32), 
	ISTHREECLASS CHAR(1), 
	DISTRICTID VARCHAR2(32), 
	PUBLICITYBATCHID VARCHAR2(32), 
	SPFID VARCHAR2(32), 
	FINANCEHOLD VARCHAR2(1) DEFAULT 0, 
	PROJAUDITINGSTATUS VARCHAR2(32), 
	ISPLANDOWN CHAR(1) DEFAULT 0, 
	ISBUDGETDOWN NUMBER(1,0) DEFAULT 0, 
	ISINSTEAD VARCHAR2(1) DEFAULT '0', 
	CDL VARCHAR2(3), 
	ISDISTRICT CHAR(1) DEFAULT 0, 
	ISCUT CHAR(1) DEFAULT 0, 
	TEMPDEPTID VARCHAR2(32), 
	TEMPFIRAGENCYID VARCHAR2(32), 
	ISTEMP CHAR(1), 
	TEMPUPTIME VARCHAR2(20), 
	TEMPCHECKSTATUS VARCHAR2(32), 
	TEMPUPSTATUS CHAR(1), 
	ISZD VARCHAR2(32), 
	 CONSTRAINT PK_P#SPF_T_NBASEINFO PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_OARELATION</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_OARELATION 
   (	DOCID VARCHAR2(32), 
	TASKID VARCHAR2(32), 
	USERID VARCHAR2(32), 
	ORGID VARCHAR2(32), 
	REMARK VARCHAR2(100), 
	TASKTYPE CHAR(1), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	 CONSTRAINT SPF_T_OARELATION_PK PRIMARY KEY (GUID, PROVINCE, YEAR, STATUS) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE INDEX SPF_T_OARELATION_INDEX ON P#SPF_T_OARELATION (DOCID, TASKID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#TASK_T_TASKAGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#TASK_T_TASKAGENCY 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TASKID VARCHAR2(32) NOT NULL ENABLE, 
	AGENCYID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#TASK_T_TASKAGENCY PRIMARY KEY (PROVINCE, YEAR, STATUS, TASKID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_PADJUSTSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_PADJUSTSTATUS 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	PROJECTID VARCHAR2(32) NOT NULL ENABLE, 
	ADJUSTSTATUS CHAR(1) NOT NULL ENABLE, 
	PROJNAME VARCHAR2(200) NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_PADJUSTSTATUS PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_PAUDITINFO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_PAUDITINFO 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) NOT NULL ENABLE, 
	PROJECTID VARCHAR2(32), 
	FINYEAR VARCHAR2(4) NOT NULL ENABLE, 
	STEPNAME VARCHAR2(50), 
	AUDITRESULT VARCHAR2(50), 
	AUDITERID VARCHAR2(32), 
	AUDITSTATUS VARCHAR2(1), 
	AUDITTYPE VARCHAR2(1), 
	AUDITOPINION VARCHAR2(2000), 
	AUDITCLASS VARCHAR2(1), 
	AGENCYID VARCHAR2(32), 
	REPORTTITLE VARCHAR2(200), 
	REPORTFILENUM VARCHAR2(200), 
	REPORTATTACHFILES VARCHAR2(150), 
	PROJECTREVIEWID VARCHAR2(32), 
	TASKID VARCHAR2(100), 
	AUDITLEVEL CHAR(1), 
	ORDERID NUMBER, 
	ISMAINNODE VARCHAR2(32), 
	ISTEMP CHAR(1), 
	AUDITDATE VARCHAR2(20) DEFAULT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'), 
	 CONSTRAINT PK_P#SPF_T_PAUDITINFO PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE INDEX IDX_P#SPF_T_PAUDITINFO ON P#SPF_T_PAUDITINFO (PROVINCE, YEAR, STATUS, PROJECTID, AGENCYID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#TASK_T_TASKATTACH</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#TASK_T_TASKATTACH 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TASKID VARCHAR2(64) NOT NULL ENABLE, 
	ATTACHID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#TASK_T_TASKATTACH PRIMARY KEY (PROVINCE, YEAR, STATUS, TASKID, ATTACHID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_PPROJPLAN</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_PPROJPLAN 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	PROJECTID VARCHAR2(32) NOT NULL ENABLE, 
	DIVID VARCHAR2(32), 
	PLANLEVEL CHAR(1) DEFAULT 2, 
	PLANSTATUS CHAR(1) DEFAULT 0, 
	CREATEDATE VARCHAR2(10), 
	CREATEUSER VARCHAR2(32), 
	BATCHID VARCHAR2(32) NOT NULL ENABLE, 
	FINYEAR VARCHAR2(10) NOT NULL ENABLE, 
	TARGETID VARCHAR2(32), 
	PLANMONEY NUMBER(24,6), 
	BALANCE NUMBER(24,6), 
	APPROVEDMONEY NUMBER(24,6), 
	 CONSTRAINT PK_P#SPF_T_PPROJPLAN PRIMARY KEY (PROVINCE, YEAR, STATUS, FINYEAR, BATCHID, PROJECTID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_PPROJPLANBT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_PPROJPLANBT 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	SPFID VARCHAR2(32), 
	PLANREFNO VARCHAR2(50), 
	PLANFILETITLE VARCHAR2(200) DEFAULT 200, 
	PLANFILEID VARCHAR2(32), 
	PLANLEVEL CHAR(1) DEFAULT 2, 
	PLANSTATUS CHAR(1) DEFAULT 0, 
	FINYEAR VARCHAR2(10), 
	ISMIGRATIONDATA CHAR(1) DEFAULT 0 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_PPROJPLANBT PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#TASK_T_TASKTABLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#TASK_T_TASKTABLE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TASKID VARCHAR2(32) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	ISSUIT CHAR(1), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#TASK_T_TASKTABLE PRIMARY KEY (PROVINCE, YEAR, STATUS, TASKID, TABLEID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_PPUBLICITY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_PPUBLICITY 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	NEEDUPDATE VARCHAR2(4000), 
	FINYEAR VARCHAR2(4) DEFAULT to_char(sysdate,'YYYY'), 
	AGENCYID VARCHAR2(32), 
	PUBLICITYBATCHID VARCHAR2(32) NOT NULL ENABLE, 
	TITLE VARCHAR2(500), 
	PUBLICITYTIME TIMESTAMP (6) DEFAULT SYSDATE, 
	USERID VARCHAR2(32) NOT NULL ENABLE, 
	CONTENT CLOB, 
	LOGICSTATE NUMBER(2,0) DEFAULT 0, 
	ATTACHID VARCHAR2(32), 
	 CONSTRAINT PK_P#SPF_T_PPUBLICITY PRIMARY KEY (PROVINCE, YEAR, STATUS, PUBLICITYBATCHID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_P_B_RECORD</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_P_B_RECORD 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NEEDUPDATE VARCHAR2(4000), 
	ORDERID NUMBER(9,0), 
	FINYEAR VARCHAR2(4) DEFAULT TO_CHAR(SYSDATE,'YYYY'), 
	OPERATETYPE CHAR(1) NOT NULL ENABLE, 
	PROJECTID VARCHAR2(32) NOT NULL ENABLE, 
	BATCHID VARCHAR2(32) NOT NULL ENABLE, 
	TARGETID VARCHAR2(32) NOT NULL ENABLE, 
	OPERATELEVEL CHAR(1) NOT NULL ENABLE, 
	OPERATOR VARCHAR2(32) NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_P_B_RECORD PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE INDEX IDX_P#SPF_T_P_B_RECORD ON P#SPF_T_P_B_RECORD (OPERATETYPE, PROJECTID, BATCHID, OPERATELEVEL)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#CHECK_T_REGCOL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#CHECK_T_REGCOL 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	VIEWID VARCHAR2(32) NOT NULL ENABLE, 
	COLID VARCHAR2(32) NOT NULL ENABLE, 
	COLDBNAME VARCHAR2(250) NOT NULL ENABLE, 
	COLCNNAME VARCHAR2(250), 
	DATATYPE VARCHAR2(32) NOT NULL ENABLE, 
	CSID VARCHAR2(32), 
	ORDERID NUMBER(*,0) DEFAULT 0, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT PK_P#CHECK_T_REGCOL PRIMARY KEY (PROVINCE, YEAR, STATUS, VIEWID, COLID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_RELATEDLINK</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_RELATEDLINK 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	NEEDUPDATE VARCHAR2(4000), 
	FINYEAR VARCHAR2(4) DEFAULT to_char(sysdate,'YYYY'), 
	AGENCYID VARCHAR2(32), 
	ID VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	IMAGEID VARCHAR2(32), 
	LINK VARCHAR2(100) NOT NULL ENABLE, 
	SHOW CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_RELATEDLINK PRIMARY KEY (PROVINCE, YEAR, STATUS, ID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_REPORTSECU</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_REPORTSECU 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	NEEDUPDATE VARCHAR2(4000), 
	FINYEAR VARCHAR2(4), 
	AGENCYID VARCHAR2(32), 
	COLUMNID VARCHAR2(32), 
	PROJTABID VARCHAR2(32), 
	COLSECU CHAR(1), 
	APPID VARCHAR2(20), 
	GUID VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	 CONSTRAINT SYS_1C0034897 CHECK (PROVINCE IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0034898 CHECK (YEAR IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0034899 CHECK (STATUS IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0034900 CHECK (DATAKEY IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0034901 CHECK (GUID IS NOT NULL) ENABLE, 
	 CONSTRAINT PK_SPF_T_REPORTSECU PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_USERROLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_USERROLE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	USERID VARCHAR2(32) NOT NULL ENABLE, 
	ROLEID VARCHAR2(32) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	CACHEVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT PK_P#SECU_T_USERROLE PRIMARY KEY (PROVINCE, YEAR, STATUS, USERID, ROLEID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_SQL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_SQL 
   (	SQL_STATEMENT CLOB, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	SQLID VARCHAR2(32 CHAR) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_SQL PRIMARY KEY (PROVINCE, YEAR, STATUS, SQLID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_ROW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_ROW 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	MANID VARCHAR2(32) NOT NULL ENABLE, 
	BASESECU CHAR(1) NOT NULL ENABLE, 
	SQLWHERE VARCHAR2(4000), 
	SHOWWHERE VARCHAR2(4000), 
	MANTYPE CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	CACHEVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT PK_P#SECU_T_ROW PRIMARY KEY (PROVINCE, YEAR, STATUS, MANTYPE, MANID, TABLEID, BASESECU, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_SQL_LOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_SQL_LOG 
   (	LOGINNAME VARCHAR2(100) NOT NULL ENABLE, 
	SQLSTATEMENT CLOB, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_SQL_LOG PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_STAPAGE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_STAPAGE 
   (	CODEID VARCHAR2(32 CHAR) DEFAULT sys_guid() NOT NULL ENABLE, 
	CONTENT CLOB, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	DATAKEY VARCHAR2(32) DEFAULT sys_guid() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SPF_T_STAPAGE PRIMARY KEY (PROVINCE, YEAR, STATUS, CODEID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_XMJBXXB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_XMJBXXB 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1', 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	PROJECTID VARCHAR2(32), 
	DATAKEY VARCHAR2(32), 
	XINGMMC VARCHAR2(200), 
	ZJSQQSN VARCHAR2(32), 
	ZJSQJSN VARCHAR2(32), 
	SHIFGS VARCHAR2(32), 
	BAOSDQ VARCHAR2(32), 
	XMFZR VARCHAR2(100), 
	FZRDH VARCHAR2(100), 
	XMSBDKXX VARCHAR2(4000), 
	XMLXYJ VARCHAR2(4000), 
	XMSBDBYX VARCHAR2(4000), 
	ZYJSNR VARCHAR2(4000), 
	XMJXBS VARCHAR2(32), 
	ZFCGBS VARCHAR2(32), 
	AGENCYID VARCHAR2(32), 
	AGENCYNAME VARCHAR2(100), 
	XMBM VARCHAR2(32), 
	XMKSSJ VARCHAR2(32), 
	XMJSSJ VARCHAR2(32), 
	 CONSTRAINT PK_P#SPF_T_XMJBXXB PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_CACHE_USERROW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_CACHE_USERROW 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	MANID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6), 
	A_COUNT NUMBER
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE INDEX P#SECU_CACHE_USERROW_IN_1 ON P#SECU_CACHE_USERROW (PROVINCE, YEAR, MANID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_XMTZJHB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_XMTZJHB 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1', 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32), 
	PROJECTID VARCHAR2(32), 
	FINYEAR VARCHAR2(4), 
	FUNDSOURCEID VARCHAR2(32), 
	PROVNUM NUMBER(24,6) DEFAULT 0, 
	PROVAGNUM NUMBER(24,6), 
	COUNTYNUM NUMBER(24,6), 
	COUNTYAGNUM NUMBER(24,6), 
	CITYNUM NUMBER(24,6), 
	CITYAGNUM NUMBER(24,6), 
	CENTNUM NUMBER(24,6), 
	CENTAGNUM NUMBER(24,6) DEFAULT 0, 
	APPLYNUM NUMBER(24,6), 
	ISPLANVALID CHAR(1) DEFAULT 1, 
	USERID VARCHAR2(32), 
	INBUDGETNUM NUMBER(24,6), 
	ADDINDEXNUM NUMBER(24,6), 
	ZYZJ NUMBER(18,4) DEFAULT 0, 
	YXDKWY NUMBER(18,4) DEFAULT 0, 
	QTZJ NUMBER(18,4) DEFAULT 0, 
	HEJII NUMBER(18,4) DEFAULT 0, 
	 CONSTRAINT PK_P#SPF_T_XMTZJHB PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_ZXZJJBXXB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_ZXZJJBXXB 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1', 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32), 
	AGENCYID VARCHAR2(32), 
	SPFID VARCHAR2(32), 
	INVALID CHAR(1), 
	PROJTYPEID VARCHAR2(32), 
	SPFNAME VARCHAR2(200), 
	SPFCODE VARCHAR2(150), 
	DISTRICTID VARCHAR2(32), 
	EXPFUNCID VARCHAR2(32) DEFAULT NULL, 
	FUNDMANAGE VARCHAR2(32) DEFAULT NULL, 
	FUNDLEVEL VARCHAR2(32), 
	EFFTYPE VARCHAR2(32), 
	BEGINYEAR VARCHAR2(32) DEFAULT NULL, 
	ENDYEAR VARCHAR2(32) DEFAULT NULL, 
	ISPUBSHOW VARCHAR2(32), 
	PRJREPLY VARCHAR2(32), 
	ISNEEDJX VARCHAR2(32) DEFAULT NULL, 
	ISRELEASE VARCHAR2(32) DEFAULT NULL, 
	HOTTYPE VARCHAR2(32) DEFAULT NULL, 
	FIRAGENCYID VARCHAR2(32) DEFAULT NULL, 
	DEPTID VARCHAR2(32) DEFAULT NULL, 
	CREATEUSER VARCHAR2(32), 
	CREATETIME VARCHAR2(20), 
	APPROVALTYPE VARCHAR2(32) DEFAULT NULL, 
	SETUPSTATUS CHAR(1), 
	CUTOFFTIME VARCHAR2(10), 
	SZGX VARCHAR2(32) DEFAULT NULL, 
	ISMATCHFUNDS VARCHAR2(32) DEFAULT NULL, 
	DECLRANGE VARCHAR2(4), 
	ISREPEATAPP VARCHAR2(32) DEFAULT NULL, 
	ISGROVPROC CHAR(1), 
	SHOWPROJLOGDAYS NUMBER(9,0) DEFAULT 0, 
	ISMOREYEARPROJ CHAR(1), 
	ISTEMP CHAR(1), 
	ZHICFX VARCHAR2(32), 
	XMSBTJ VARCHAR2(32), 
	SBXMJX VARCHAR2(32), 
	ZQGHBS VARCHAR2(32), 
	ZXZJSLYJGS VARCHAR2(4000), 
	ZXZJSLDKXXGS VARCHAR2(4000), 
	ZXZJDBYXGS VARCHAR2(4000), 
	BEIZHU VARCHAR2(4000), 
	 CONSTRAINT PK_P#SPF_T_ZXZJJBXXB PRIMARY KEY (PROVINCE, YEAR, STATUS, AGENCYID, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SPF_T_ZXZJKZSB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SPF_T_ZXZJKZSB 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1', 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DATAKEY VARCHAR2(32), 
	FINYEAR VARCHAR2(4), 
	SPFID VARCHAR2(32), 
	CTRLNUM NUMBER(24,6), 
	FUNDKINDID VARCHAR2(32) DEFAULT NULL, 
	FUNDSOURCEID VARCHAR2(32) DEFAULT NULL, 
	ACCTCODE VARCHAR2(32) DEFAULT NULL, 
	ISCUT CHAR(1), 
	 CONSTRAINT PK_P#SPF_T_ZXZJKZSB PRIMARY KEY (PROVINCE, YEAR, STATUS, DATAKEY) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_TABLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_TABLE 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	ISSUIT CHAR(1) NOT NULL ENABLE, 
	MANID VARCHAR2(32) NOT NULL ENABLE, 
	EXTADD CHAR(1), 
	EXTDEL CHAR(1), 
	EXTUPDATE CHAR(1), 
	BASESECU CHAR(1), 
	MANTYPE CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	CACHEVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT PK_P#SECU_T_TABLE PRIMARY KEY (PROVINCE, YEAR, STATUS, MANTYPE, MANID, ISSUIT, TABLEID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PUB_T_WORDTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE PUB_T_WORDTAB 
   (	WORDID NUMBER(6,0) NOT NULL ENABLE, 
	LETTER VARCHAR2(2), 
	CHINESEWORD VARCHAR2(4), 
	 CONSTRAINT PK_PUB_T_WORDTAB PRIMARY KEY (WORDID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_CACHE_USERTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_CACHE_USERTAB 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	MANID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6), 
	A_COUNT NUMBER
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE INDEX P#SECU_CACHE_USERTAB_IN_1 ON P#SECU_CACHE_USERTAB (PROVINCE, YEAR, MANID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_AGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_AGENCY 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	APPID VARCHAR2(32) NOT NULL ENABLE, 
	MANID VARCHAR2(32) NOT NULL ENABLE, 
	AGENCYID VARCHAR2(32) NOT NULL ENABLE, 
	MANTYPE CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	CACHEVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT PK_P#SECU_T_AGENCY PRIMARY KEY (PROVINCE, YEAR, STATUS, APPID, MANTYPE, MANID, AGENCYID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_CACHE_AGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_CACHE_AGENCY 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	MANID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6), 
	A_COUNT NUMBER
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE INDEX P#SECU_CACHE_AGENCY_IN_1 ON P#SECU_CACHE_AGENCY (PROVINCE, YEAR, MANID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_T_COL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_T_COL 
   (	YEAR CHAR(4) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	COLID VARCHAR2(32) NOT NULL ENABLE, 
	MANID VARCHAR2(32) NOT NULL ENABLE, 
	BASESECU CHAR(1) NOT NULL ENABLE, 
	MANTYPE CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	CACHEVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT PK_P#SECU_T_COL PRIMARY KEY (PROVINCE, YEAR, STATUS, MANTYPE, MANID, TABLEID, COLID, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SECU_CACHE_USERCOL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SECU_CACHE_USERCOL 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	MANID VARCHAR2(32) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6), 
	A_COUNT NUMBER
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE INDEX P#SECU_CACHE_USERCOL_IN_1 ON P#SECU_CACHE_USERCOL (PROVINCE, YEAR, MANID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CHECK_T_EXTPROP</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE CHECK_T_EXTPROP 
   (	APPID VARCHAR2(32) NOT NULL ENABLE, 
	EXTID VARCHAR2(10) NOT NULL ENABLE, 
	EXTNAME VARCHAR2(100), 
	SUPERID VARCHAR2(10), 
	ISLEAF CHAR(1), 
	REMARK VARCHAR2(500), 
	ORDERID NUMBER(9,0) DEFAULT 0
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_COLEXTPROP</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE DICT_T_COLEXTPROP 
   (	APPID VARCHAR2(32) NOT NULL ENABLE, 
	EXTID VARCHAR2(10) NOT NULL ENABLE, 
	EXTNAME VARCHAR2(100), 
	SUPERID VARCHAR2(10), 
	ISLEAF CHAR(1), 
	REMARK VARCHAR2(500), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	 CONSTRAINT PK_DICT_T_COLEXTPROP PRIMARY KEY (APPID, EXTID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_DEALTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE DICT_T_DEALTYPE 
   (	APPID VARCHAR2(10) NOT NULL ENABLE, 
	DEALID VARCHAR2(10) NOT NULL ENABLE, 
	DEALNAME VARCHAR2(100), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	NEEDCONFIG CHAR(1) DEFAULT 0, 
	 CONSTRAINT PK_DICT_T_DEALTYPE PRIMARY KEY (APPID, DEALID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_DEFAULTCOL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE DICT_T_DEFAULTCOL 
   (	DEALID VARCHAR2(10) NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	NAME VARCHAR2(100), 
	DBCOLUMNNAME VARCHAR2(100), 
	DATATYPE NUMBER(9,0) DEFAULT 0, 
	DATALENGTH NUMBER(9,0) DEFAULT 0, 
	SCALE NUMBER(9,0) DEFAULT 0, 
	CSID VARCHAR2(32), 
	ISPRIMARY CHAR(1) DEFAULT '0', 
	ISRESERVE CHAR(1) DEFAULT '1', 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	DEFAULTVALUE VARCHAR2(255), 
	ISLOGICKEY CHAR(1) DEFAULT '0', 
	DEID VARCHAR2(32), 
	 CONSTRAINT PK_DICT_T_DEFAULTCOL PRIMARY KEY (DEALID, GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_TABEXTPROP</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE DICT_T_TABEXTPROP 
   (	APPID VARCHAR2(32) NOT NULL ENABLE, 
	EXTID VARCHAR2(10) NOT NULL ENABLE, 
	EXTNAME VARCHAR2(100), 
	SUPERID VARCHAR2(10), 
	ISLEAF CHAR(1), 
	REMARK VARCHAR2(500), 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	 CONSTRAINT PK_DICT_T_TABEXTPROP PRIMARY KEY (APPID, EXTID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PUB_T_PARTITION_TABLENAME</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE PUB_T_PARTITION_TABLENAME 
   (	TABLEDBNAME VARCHAR2(32) NOT NULL ENABLE, 
	ISUPDATE CHAR(1), 
	 CONSTRAINT PK_PUB_T_PARTITION_TABLENAME PRIMARY KEY (TABLEDBNAME) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_AGENCY_RELATION</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE SPF_T_AGENCY_RELATION 
   (	GUID VARCHAR2(32) NOT NULL ENABLE, 
	CODE VARCHAR2(30) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 PRIMARY KEY (GUID, CODE) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SEP_T_PLAN</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE SEP_T_PLAN 
   (	DATAKEY VARCHAR2(32) NOT NULL ENABLE, 
	PROJECTID VARCHAR2(32), 
	AGENCYID VARCHAR2(32), 
	PLANLEVEL VARCHAR2(1), 
	PLANSTATUS VARCHAR2(32), 
	CREATEDATE VARCHAR2(10), 
	CREATEUSER VARCHAR2(32), 
	BATCHID VARCHAR2(10), 
	ZYLY VARCHAR2(100), 
	ZJXZ VARCHAR2(100), 
	TY_DATAKEY VARCHAR2(100), 
	ADMDIVCODE VARCHAR2(32), 
	INVALID VARCHAR2(1), 
	PLANMONEY NUMBER(24,6), 
	APPROVEDMONEY NUMBER(24,6)
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SEP_T_PLANBATCH</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE SEP_T_PLANBATCH 
   (	DATAKEY VARCHAR2(32) NOT NULL ENABLE, 
	AGENCYID VARCHAR2(32), 
	PROJECTID VARCHAR2(32), 
	PLANPEFNO VARCHAR2(50), 
	PLANFILETITLE VARCHAR2(200), 
	ISSUEDDATE VARCHAR2(10), 
	PLANFILEID VARCHAR2(32), 
	ISSUEDUSER VARCHAR2(32), 
	PLANLEVEL VARCHAR2(1), 
	PLANSTATUS VARCHAR2(1), 
	FINYEAR VARCHAR2(10), 
	INVALID VARCHAR2(1), 
	 CONSTRAINT SEP_T_PLANBATCH_DATAKEY PRIMARY KEY (DATAKEY) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_BUSINESSDB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE DICT_T_BUSINESSDB 
   (	BUSDBID VARCHAR2(32) NOT NULL ENABLE, 
	BUSDBNAME VARCHAR2(1000) NOT NULL ENABLE, 
	DATASOURCEKEY VARCHAR2(50) NOT NULL ENABLE, 
	ISSYS CHAR(1) DEFAULT '0', 
	ORDERID NUMBER(2,0) NOT NULL ENABLE, 
	DBUSERNAME VARCHAR2(32) NOT NULL ENABLE, 
	 CONSTRAINT PK_EFM_T_BUSINESSDB PRIMARY KEY (BUSDBID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_BUSINESSSYS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE DICT_T_BUSINESSSYS 
   (	BUSDBID VARCHAR2(32) NOT NULL ENABLE, 
	BUSSYSID VARCHAR2(32) NOT NULL ENABLE, 
	BUSSYSNAME VARCHAR2(100) NOT NULL ENABLE, 
	ORDERID NUMBER(2,0) NOT NULL ENABLE, 
	BUSSYSICON VARCHAR2(200) NOT NULL ENABLE, 
	SHORTNAME VARCHAR2(5) NOT NULL ENABLE, 
	 CONSTRAINT PK_EFM_T_BUSINESSSYS PRIMARY KEY (BUSSYSID, BUSDBID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EFM_T_SYNTABLEREG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE EFM_T_SYNTABLEREG 
   (	TABLENAME VARCHAR2(32) NOT NULL ENABLE, 
	SYNTYPE CHAR(1) NOT NULL ENABLE, 
	ISBLOB CHAR(1), 
	ISCLOB CHAR(1), 
	NEWVER NUMBER DEFAULT 0, 
	OLDVER NUMBER DEFAULT 0, 
	SYNCONDITION VARCHAR2(2000), 
	FINYEAR CHAR(4) NOT NULL ENABLE, 
	ORDERID NUMBER, 
	SYNCFLAG CHAR(1) DEFAULT ('1'), 
	SYNCDIR CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DISTRICTID VARCHAR2(32) DEFAULT '**' NOT NULL ENABLE, 
	SYNCORDERBY VARCHAR2(200), 
	DISABLETRIGGER CHAR(1) DEFAULT '0', 
	NEWEFMVER NUMBER DEFAULT 0, 
	OLDEFMVER NUMBER DEFAULT 0, 
	UNSYNCOLS VARCHAR2(200)
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PUB_T_SYSCODE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE PUB_T_SYSCODE 
   (	TYPEID VARCHAR2(12) NOT NULL ENABLE, 
	ID VARCHAR2(5) NOT NULL ENABLE, 
	TYPENAME VARCHAR2(50) NOT NULL ENABLE, 
	NAME VARCHAR2(50) NOT NULL ENABLE, 
	REMARK VARCHAR2(50), 
	NEEDUPDATE VARCHAR2(1) DEFAULT '0', 
	ISBUDGET VARCHAR2(1) DEFAULT '0', 
	ISTOIN VARCHAR2(1) DEFAULT '0', 
	ISRELABGT VARCHAR2(1) DEFAULT '0', 
	 CONSTRAINT PK_PUB_T_SYSCODE PRIMARY KEY (TYPEID, ID) ENABLE
   )}';
    EXECUTE IMMEDIATE Q'{CREATE INDEX IX_PUB_T_SYSCODE_ ON PUB_T_SYSCODE (TYPEID)}';
    EXECUTE IMMEDIATE Q'{CREATE INDEX IX_PUB_TYPENAME ON PUB_T_SYSCODE (TYPENAME)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_SYSVSSYSCLASS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE SECU_T_SYSVSSYSCLASS 
   (	SYSID VARCHAR2(30) NOT NULL ENABLE, 
	SYSCLASSID VARCHAR2(32) NOT NULL ENABLE, 
	ITEMVER NUMBER DEFAULT (1), 
	EFMVER NUMBER DEFAULT 1
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SYNCH_T_SYNCHCONFIG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SYNCH_T_SYNCHCONFIG 
   (	PHYSDBNAME VARCHAR2(50) NOT NULL ENABLE, 
	SYNCHORDER NUMBER(10,0) DEFAULT 0, 
	SYNCHCONDITION VARCHAR2(4000), 
	PKCOL VARCHAR2(500), 
	SYNCHEDHANDLER VARCHAR2(100), 
	SYNCHRECOGCOL VARCHAR2(50) DEFAULT 'DBVERSION', 
	TABLETYPE VARCHAR2(2) DEFAULT '1', 
	MAXROW NUMBER(10,0) DEFAULT '0', 
	NETTYPE VARCHAR2(2) DEFAULT '0', 
	REMARK VARCHAR2(500), 
	YEAR CHAR(4), 
	PROVINCE VARCHAR2(9), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	DIRECTION VARCHAR2(2) DEFAULT 'O' NOT NULL ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE UNIQUE INDEX PK_SYNCH_T_SYNCHCONFIG ON P#SYNCH_T_SYNCHCONFIG (PROVINCE, YEAR, STATUS, GUID, DIRECTION)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SYNCH_T_MAINLOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SYNCH_T_MAINLOG 
   (	LOGID VARCHAR2(32), 
	BATCHID VARCHAR2(32), 
	USERID VARCHAR2(32), 
	IPADDRESS VARCHAR2(15), 
	FILENAME VARCHAR2(100), 
	STARTDATE VARCHAR2(100), 
	ENDDATE VARCHAR2(100), 
	USEDDATE VARCHAR2(10), 
	DIRECTION VARCHAR2(2), 
	REMARK VARCHAR2(500), 
	YEAR CHAR(4), 
	PROVINCE VARCHAR2(9), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SYNCH_T_MAINLOG PRIMARY KEY (PROVINCE, YEAR, STATUS, LOGID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SYNCH_T_IMPORTLOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SYNCH_T_IMPORTLOG 
   (	LOGID VARCHAR2(32), 
	EXPFILENAME VARCHAR2(100), 
	EXPDATAS VARCHAR2(10), 
	EXPPHYSDBNAME VARCHAR2(50), 
	IMPUSEDDATE VARCHAR2(10), 
	INSERTDATAS NUMBER(10,0), 
	UPDATEDATAS NUMBER(10,0), 
	FAILDATAS NUMBER(10,0), 
	REMARK VARCHAR2(500), 
	YEAR CHAR(4), 
	PROVINCE VARCHAR2(9), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	 CONSTRAINT PK_P#SYNCH_T_IMPORTLOG PRIMARY KEY (PROVINCE, YEAR, STATUS, LOGID, EXPPHYSDBNAME) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SYNCH_T_IMPORTSQL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SYNCH_T_IMPORTSQL 
   (	LOGID VARCHAR2(32), 
	PHYSDBNAME VARCHAR2(50), 
	IMPSQL VARCHAR2(4000), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9), 
	YEAR CHAR(4), 
	STATUS CHAR(1) DEFAULT '1', 
	 CONSTRAINT IMPORTSQL_LOGID_PK PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SYNCH_T_EXPORTLOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SYNCH_T_EXPORTLOG 
   (	LOGID VARCHAR2(32), 
	EXPFILENAME VARCHAR2(100), 
	EXPPHYSDBNAME VARCHAR2(50), 
	EXPDATAS NUMBER(10,0), 
	LASTEXPDATE TIMESTAMP (6), 
	REMARK VARCHAR2(500), 
	YEAR CHAR(4), 
	PROVINCE VARCHAR2(9), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	DISTRICTID VARCHAR2(32)
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE UNIQUE INDEX PK_SYNCH_T_EXPORTLOG ON P#SYNCH_T_EXPORTLOG (PROVINCE, YEAR, STATUS, LOGID, EXPPHYSDBNAME)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EFM_T_DBUPDATE_4BS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE EFM_T_DBUPDATE_4BS 
   (	TYPEID VARCHAR2(32) NOT NULL ENABLE, 
	KEYID VARCHAR2(32) NOT NULL ENABLE, 
	TYPENAME VARCHAR2(100) NOT NULL ENABLE, 
	KEYNAME VARCHAR2(100) NOT NULL ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SHORTCUTMENU</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SHORTCUTMENU 
   (	DATAKEY VARCHAR2(32) NOT NULL ENABLE, 
	STMENUID VARCHAR2(32) NOT NULL ENABLE, 
	ROLEID VARCHAR2(32) NOT NULL ENABLE, 
	MENUID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERNUM NUMBER NOT NULL ENABLE, 
	ICON VARCHAR2(100), 
	STATUS CHAR(1) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(32), 
	YEAR CHAR(4) NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	ORDERID NUMBER(10,0) DEFAULT 0, 
	 CONSTRAINT PK_P#DICT_T_SHORTCUTMENU PRIMARY KEY (YEAR, STATUS, DATAKEY) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EXP_T_TASKLOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE EXP_T_TASKLOG 
   (	GUID VARCHAR2(32), 
	TASKID VARCHAR2(32), 
	STATUS_CODE VARCHAR2(250), 
	STATUS_NAME VARCHAR2(250), 
	OPERATOR_ID VARCHAR2(200), 
	OPERATION_TIME TIMESTAMP (6) NOT NULL ENABLE, 
	NODE_ID VARCHAR2(32), 
	DESCRIBE VARCHAR2(200), 
	AUDIT_COMMENT VARCHAR2(2000), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT PK_EXP_T_TASKLOG PRIMARY KEY (GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EXP_T_TRACKSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE EXP_T_TRACKSTATUS 
   (	TASKID VARCHAR2(32), 
	STATUS_CODE VARCHAR2(250), 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT PK_EXP_T_TRACKSTATUS PRIMARY KEY (GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EXP_T_CHECKSORT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE EXP_T_CHECKSORT 
   (	CHECKSORTID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CHECKSORTNAME VARCHAR2(100), 
	LVLID VARCHAR2(60), 
	SUPERID VARCHAR2(32), 
	ENDFLAG CHAR(1), 
	REMARK VARCHAR2(200), 
	STATUS CHAR(1) DEFAULT 1, 
	 CONSTRAINT CHECKSORTID_PKY PRIMARY KEY (CHECKSORTID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EXP_T_TASKAUDIT_LOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE EXP_T_TASKAUDIT_LOG 
   (	GUID VARCHAR2(32) NOT NULL ENABLE, 
	TASK_ID VARCHAR2(32) NOT NULL ENABLE, 
	CREATE_TM TIMESTAMP (6), 
	RECEIVE_ID VARCHAR2(32), 
	STATUS VARCHAR2(20) DEFAULT 1, 
	COMMENTS VARCHAR2(2000), 
	OPERATOR_ID VARCHAR2(32), 
	NODE_ID VARCHAR2(32), 
	OPERATE_TM TIMESTAMP (6), 
	AUDIT_STATUS CHAR(1) DEFAULT 0, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT EXP_T_TASKAUDIT_LOG_PK PRIMARY KEY (GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EFM_T_CHECKSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE EFM_T_CHECKSTATUS 
   (	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CHECKID VARCHAR2(32), 
	ADDCOL VARCHAR2(255), 
	STATUS CHAR(1), 
	UNIQUEID VARCHAR2(100), 
	CONTROLID VARCHAR2(100), 
	RESULTSTATUS CHAR(1), 
	 CONSTRAINT EFM_T_CHECKSTATUS_PKY PRIMARY KEY (GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SYNCH_T_DECRYPTDATA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SYNCH_T_DECRYPTDATA 
   (	LOGID VARCHAR2(32) NOT NULL ENABLE, 
	PHYSDBNAME VARCHAR2(50) NOT NULL ENABLE, 
	SYNCHDATA CLOB, 
	YEAR CHAR(4), 
	PROVINCE VARCHAR2(9), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE UNIQUE INDEX PK_SYNCH_T_DECRYPTDATA ON P#SYNCH_T_DECRYPTDATA (PROVINCE, YEAR, STATUS, GUID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SYNCH_T_BLOBCLOB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SYNCH_T_BLOBCLOB 
   (	LOGID VARCHAR2(32), 
	PHYSDBNAME VARCHAR2(50), 
	COLUNAME VARCHAR2(50), 
	CONDITION VARCHAR2(4000), 
	BDATA BLOB, 
	CDATA CLOB, 
	YEAR CHAR(4), 
	PROVINCE VARCHAR2(9), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EFM_T_CHECKRESULT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE EFM_T_CHECKRESULT 
   (	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CHECKID VARCHAR2(32), 
	ADDCOL VARCHAR2(255), 
	CHECKRESULT CLOB, 
	STATUS CHAR(1), 
	 CONSTRAINT EFM_T_CHECKRESULT_PKY PRIMARY KEY (GUID) ENABLE
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_SETANGLEVIEW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_SETANGLEVIEW 
   (	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	ORDERID NUMBER(9,0) DEFAULT 0, 
	COLUMNID VARCHAR2(32) NOT NULL ENABLE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	ISDEFAULT CHAR(1) DEFAULT 0 NOT NULL ENABLE, 
	 CONSTRAINT PK_DICT_T_SETANGLEVIEW PRIMARY KEY (PROVINCE, YEAR) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_VISIT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE SPF_T_VISIT 
   (	VISIT_COUNT NUMBER DEFAULT 0 NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT sysdate
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_MODELRELA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_MODELRELA 
   (	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	SUBTABLEID VARCHAR2(32) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9) NOT NULL ENABLE, 
	YEAR CHAR(4) NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT '1' NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	CONSTRAINT PK_P#DICT_T_MODELRELA PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SYNCH_T_SETTING</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SYNCH_T_SETTING 
   (	PHYSDBNAME VARCHAR2(50), 
	SYNCHORDER NUMBER(10,0) DEFAULT 0, 
	SYNCHCONDITION VARCHAR2(4000), 
	PKCOL VARCHAR2(500), 
	SYNCHEDHANDLER VARCHAR2(100), 
	SYNCHRECOGCOL VARCHAR2(50) DEFAULT 'DBVERSION', 
	TABLETYPE VARCHAR2(2) DEFAULT '1', 
	MAXROW NUMBER(10,0) DEFAULT '0', 
	NETTYPE VARCHAR2(2) DEFAULT '0', 
	REMARK VARCHAR2(500), 
	YEAR CHAR(4), 
	PROVINCE VARCHAR2(9), 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	STATUS CHAR(1) DEFAULT 1, 
	GUID VARCHAR2(32) DEFAULT SYS_GUID(), 
	DIRECTION VARCHAR2(2) DEFAULT 'O'
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
    EXECUTE IMMEDIATE Q'{CREATE UNIQUE INDEX PK_SYNCH_T_SETTING ON P#SYNCH_T_SETTING (PROVINCE, YEAR, STATUS, GUID)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#SYNCH_T_REMOTEPROCEDURE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#SYNCH_T_REMOTEPROCEDURE 
   (	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	NAME VARCHAR2(500) NOT NULL ENABLE, 
	DESCRIBE VARCHAR2(2000), 
	AVAILABLE CHAR(1) DEFAULT 0 NOT NULL ENABLE, 
	STATUS CHAR(1) DEFAULT 1 NOT NULL ENABLE, 
	PROGRAMCODE CLOB NOT NULL ENABLE, 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	PROVINCE VARCHAR2(9), 
	YEAR CHAR(4), 
	 CONSTRAINT SYS_1C0044042 CHECK (STATUS IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0044043 CHECK (PROGRAMCODE IS NOT NULL) ENABLE, 
	 CONSTRAINT PK_REMOTEPRO PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE, 
	 CONSTRAINT SYS_1C0044039 CHECK (GUID IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0044040 CHECK (NAME IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0044041 CHECK (AVAILABLE IS NOT NULL) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SQL_T_SCRIPT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE SQL_T_SCRIPT 
   (	BUSI_NAME VARCHAR2(32), 
	OBJ_NAME VARCHAR2(30), 
	OBJ_TYPE VARCHAR2(32), 
	EXEC_ORDER NUMBER, 
	PARENT_OBJ VARCHAR2(30), 
	SQL_TEXT CLOB, 
	OBJ_COMMENT VARCHAR2(200)
   )}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>P#DICT_T_ASSIGNPROJ</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE TABLE P#DICT_T_ASSIGNPROJ 
   (	GUID VARCHAR2(32) DEFAULT SYS_GUID() NOT NULL ENABLE, 
	TABLEID VARCHAR2(32) NOT NULL ENABLE, 
	PROVINCE VARCHAR2(9), 
	YEAR CHAR(4), 
	STATUS CHAR(1) DEFAULT '1', 
	DBVERSION TIMESTAMP (6) DEFAULT SYSDATE, 
	 CONSTRAINT ASSIGNPROJ_PK PRIMARY KEY (PROVINCE, YEAR, STATUS, GUID) ENABLE, 
	 CONSTRAINT SYS_1C0044045 CHECK (GUID IS NOT NULL) ENABLE, 
	 CONSTRAINT SYS_1C0044046 CHECK (TABLEID IS NOT NULL) ENABLE
   ) 
  PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
END;]]></SQL_CONTENT>
    </SQL>
  </TABLE>
  <PACKAGE>
    <SQL>
      <OBJECT_NAME>GLOBAL_ISMULTDB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[create or replace package GLOBAL_IsMultDb is
  --0单财政单年度；1：单财政多年度；2多财政多年度。
  v_ISMULT constant char(1) := '2';
  --是否中央库：0表示地方；1表示中央。
  v_ISZY constant char(1) := '0';
end GLOBAL_IsMultDb;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EFM_PKG_BASEDATA_TRIG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PACKAGE EFM_PKG_BASEDATA_TRIG IS
   V_DATAIDS         VARCHAR2(32767);
   V_ISINSERTING     BOOLEAN;
   V_ISUPDATING      BOOLEAN;
   V_ISDELETING      BOOLEAN;
   V_LOCALBGTLEVEL   CHAR(1) :='2';--1中央，2省，3市，4区县
END EFM_PKG_BASEDATA_TRIG;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>GLOBAL_MULTYEAR_CZ</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PACKAGE GLOBAL_MULTYEAR_CZ is
  v_pmYear  varchar2(32) :='#DEFAULT_YEAR#';
  v_pmDivID varchar2(32) := '#DEFAULT_PROVINCE#';
  v_userID  varchar2(32);
  v_pmYA varchar2(32);
  v_ACCTSYSTYPEID varchar2(128);
  V_TASKID VARCHAR2(32);
    ---全局函数
  function Secu_f_Global_Setparm(v_Userida varchar2,v_pmDIvida varchar2,v_pmYeara varchar2,v_pmYAa varchar2 default null)  RETURN varchar2;
  function Secu_f_Global_Parm(v_parm varchar2) RETURN varchar2;
  function secu_f_global_setacctsystype(v_acctsystype varchar2) RETURN varchar2;
  function secu_f_global_getacctsystype(v_parm varchar2) RETURN varchar2;
  FUNCTION F_SET_TASKID(P_TASKID VARCHAR2) RETURN VARCHAR2;
end GLOBAL_MULTYear_CZ;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PKG_MULTYEAR</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PACKAGE PKG_MULTYEAR is
  ---存储过程
  procedure sp_Create_Table(Table_Con clob);
  procedure sp_Create_View(v_tableid varchar2,v_New_tableName varchar2,v_viewName varchar2);
  procedure sp_Create_View_1(v_tableName varchar2,v_viewName varchar2);
  procedure sp_Refresh_View(v_ret out varchar2);
  procedure sp_Refresh_Trigger(v_ret out varchar2);
  procedure sp_Create_Trigger(v_new_dbname varchar2);
  procedure sp_Drop_index(v_tableName varchar2,v_IndName varchar2,v_type varchar2);
  function f_Get_Tab2ViewCont(v_tableid varchar2,v_new_tablename varchar2)  Return clob;
  procedure sp_Create_Index(v_tablename varchar2,v_indexName varchar2,v_type varchar2,ind_cont varchar2,v_flag char default null);
  function f_Get_TabStruct(v_tablename varchar2,v_new_tableName varchar2)  Return clob;
  function f_Get_TabConstraint(v_tablename varchar2,v_ConstraintName varchar2)  Return varchar2;
  function f_Get_Tri_RepTabName(v_old_tablename varchar2,v_trigger_Name varchar2,v_type varchar2,v_sysTriName varchar2,v_new_tableName varchar2)  Return clob;
  procedure sp_ReCreate_TabAndData(v_oldname varchar2,v_newName varchar2,v_districtid varchar2 default null);
  procedure sp_Add_Partition(v_flag varchar2,v_tablename varchar2,v_province varchar2,v_tabspace varchar2);
  procedure sp_Del_Partition(v_flag varchar2,v_parm varchar2);
  procedure sp_Change_Tabspace(v_districtid varchar2,v_year varchar2,v_newPart varchar2);
  procedure Secu_SP_MANY_Y_CZ_Do(v_table_name varchar2,v_DBNAME_parm varchar2 default null);
end PKG_MULTYEAR;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PKG_UTILS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PACKAGE PKG_UTILS IS

  -- Author  : HUANGSHCH
  -- Created : 2014-8-11 10:18:05
  -- Purpose : 实用工具包
  
  -- Public type declarations
  
  -- Public constant declarations

  -- Public variable declarations

  -- Public function and procedure declarations
  --PROCEDURE EXECCOMMAND(CMD VARCHAR2);
  --FUNCTION  GETCOMMANDRET(CMD VARCHAR2) RETURN VARCHAR2;
  --PROCEDURE GETFILELIST(P_PATH VARCHAR2);
  FUNCTION ISIDCNO(SDATA VARCHAR2) RETURN NUMBER;
  TYPE T_STRING IS RECORD (CID VARCHAR2(4000));
  TYPE STRINGLIST IS TABLE OF T_STRING;
  FUNCTION SPLIT_STRING(P_STRINGLIST CLOB,P_DELIMITER VARCHAR2 DEFAULT ',') RETURN STRINGLIST PIPELINED;
  FUNCTION SPLIT_STRING(P_STRINGLIST VARCHAR2,P_DELIMITER VARCHAR2 DEFAULT ',') RETURN STRINGLIST PIPELINED;
  FUNCTION SPLIT_STRING2(P_STRINGLIST VARCHAR2,P_DELIMITER1 VARCHAR2,P_DELIMITER2 VARCHAR2) RETURN VARCHAR2;
  FUNCTION  MD5(S VARCHAR2) RETURN VARCHAR2;
  PROCEDURE DIRLIST(P_DIRECTORY VARCHAR2 DEFAULT 'DATA_PUMP_DIR');
  FUNCTION READFILE(FILE_NAME VARCHAR2,P_DIR VARCHAR2 DEFAULT 'DATA_PUMP_DIR') RETURN BLOB;
  PROCEDURE REMOVEFILE(FILE_NAME VARCHAR2,P_DIR VARCHAR2 DEFAULT 'DATA_PUMP_DIR');
  PROCEDURE EXPDP;
  PROCEDURE EXP_TABLE(P_TABLE VARCHAR2);
  PROCEDURE PUTDMPFILE(P_FILENAME VARCHAR2,P_CONTENT BLOB,P_DIR VARCHAR2 DEFAULT 'DATA_PUMP_DIR');
  PROCEDURE IMPDP(P_FILENAME VARCHAR2,P_IMPORTED_SCHEMA VARCHAR2, P_DIR VARCHAR2 DEFAULT 'DATA_PUMP_DIR');
  PROCEDURE IMP_TABLE(P_FILENAME VARCHAR2,P_IMPORTED_SCHEMA VARCHAR2,P_TABLE VARCHAR2,P_DIR VARCHAR2 DEFAULT 'DATA_PUMP_DIR');
END PKG_UTILS;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PKG_FORMULA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PACKAGE PKG_FORMULA IS

  -- Author  : HUANGSHCH
  -- Created : 2014-3-11 14:37:50
  -- Purpose : 公式相关变量、存储过程和函数
  
  -- Public type declarations
  TYPE R_FORMULA IS RECORD(TABLEID VARCHAR2(32),FORMULAID VARCHAR2(32),FORMULATYPE P#FORMULA_T_FORMULADEF.FORMULATYPE%TYPE,ISDEFAULT CHAR(1),STATUS CHAR(1));
  R_FORMULA_NEW R_FORMULA;
  R_FORMULA_OLD R_FORMULA;
  
  -- Public constant declarations

  -- Public variable declarations
  V_BEGIN INT;

  -- Public function and procedure declarations
  --公式定义相关
  PROCEDURE P_CREATE_VIEW_TRIGGER(P_TABLEID VARCHAR2);
  PROCEDURE P_DROP_VIEW_TRIGGER(P_TABLEID VARCHAR2);
  PROCEDURE P_REFRESH_TRIGGER_8_ALL;
  FUNCTION REPLACE_STR(P_CONTENT VARCHAR2) RETURN VARCHAR2;
  FUNCTION CONTAIN_COLUMN(P_CONTENT VARCHAR2,P_COLUMN VARCHAR2,P_START NUMBER DEFAULT 0) RETURN NUMBER;
  FUNCTION F_CHECKFORMULA(V_DATA CLOB) RETURN VARCHAR2;
  FUNCTION F_GETPHYSICTABLE(P_TABLEID VARCHAR2) RETURN VARCHAR2;
  FUNCTION F_GETNEEDUPDATE_689(P_TABLEID IN VARCHAR2) RETURN VARCHAR2;
  FUNCTION ISEQUSTR( UPDATECOL IN VARCHAR2, RELACOL IN VARCHAR2 ) RETURN BOOLEAN;
  PROCEDURE FORMULA_P_PARSECOLUMN (V_TABLEID VARCHAR2,V_FORMULAID VARCHAR2,V_FORMULACON VARCHAR2);
  PROCEDURE FORMULA_DEF_INSERT_0(TABLEID VARCHAR2,FORMULAID VARCHAR2,FORMULACON VARCHAR2);
  PROCEDURE FORMULA_DEF_INSERT_8 (TABLEID VARCHAR2,FORMULAID VARCHAR2,FORMULACON VARCHAR2);
  PROCEDURE FORMULA_DEF_INSERT_A8 (TABLEID VARCHAR2,FORMULAID VARCHAR2,FORMULACON VARCHAR2);
  PROCEDURE P_DEF_INSERT_1(TABLEID VARCHAR2,FORMULAID VARCHAR2,FORMULACON VARCHAR2);
  PROCEDURE P_DROPVOIDTRIGGER(P_TABLEID VARCHAR2 DEFAULT '%');
  PROCEDURE FORMULA_P_GENTRIGGER (P_REFTABLEID VARCHAR2,V_FORMULATYPE VARCHAR2);
  PROCEDURE P_CREATE_TRIGGER_8(P_TABLEID VARCHAR2);
  PROCEDURE FORMULA_P_GENTRIGGER_6 (P_TABLEID VARCHAR2);
  PROCEDURE FORMULA_P_GENTRIGGER_6_ALL;
  PROCEDURE P_CREATE_FORMULA_TRIGGER(P_TABLEID VARCHAR2);
  PROCEDURE FORMULA_P_GENTRIGGER_ALL;
  PROCEDURE P_DEF_INSERT_10(P_TABLEID VARCHAR2,P_FORMULAID VARCHAR2,P_FORMULACON VARCHAR2);
  
  --公式计算相关
  FUNCTION GETCELLDATA(V_TABLE VARCHAR2,COL VARCHAR2,WHERECLAUSE VARCHAR2) RETURN NUMBER;
  PROCEDURE FORMULA_REFTABLE_TABCOL_PSN (V_TABLEID VARCHAR2,V_AGENCYID VARCHAR2);
  PROCEDURE P_CALCULATEFORMULA_1(P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2);
  PROCEDURE FORMULA_P_CALCULATEFORMULA_A8 (V_TABLEID VARCHAR2,V_AGENCYID VARCHAR2);
  PROCEDURE FORMULA_P_CALCULATEHIRACHY(V_AGENCYID VARCHAR2,V_TABLEID VARCHAR2);
  FUNCTION FORMULA_F_CALCULATEFORMULA_0(P_TABLEID VARCHAR2,P_DATA CLOB) RETURN CLOB;
  PROCEDURE FORMULA_P_CALULATEBLOCK(P_AGENCYID VARCHAR2,P_TABLEID VARCHAR2);
  PROCEDURE REFRESH_ALL(P_APPID VARCHAR2,P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2);
  FUNCTION F_CALCULATEFORMULA_ROW(P_TABLEID VARCHAR2,P_ROWDATA CLOB) RETURN CLOB;
  PROCEDURE P_CALCULATEFORMULA(P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2);
  FUNCTION F_CALCULATEFORMULA_1(P_TABLEID VARCHAR2,P_FORMULA_CELLS VARCHAR2,P_REFERENCED_CELLS VARCHAR2) RETURN VARCHAR2;
  FUNCTION F_GET_FORMULA_CELL(P_TABLEID VARCHAR2) RETURN SYS_REFCURSOR;
  PROCEDURE P_CALCULATEFORMULA_10(P_ESTID VARCHAR2,P_WHERE VARCHAR2 DEFAULT '');
  PROCEDURE P_MARKNEEDUPDATE(P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2 DEFAULT '%');
  PROCEDURE P_CALCULATEFORMULA_0(P_TABLEID VARCHAR2,P_WHERE VARCHAR2 DEFAULT '');
  
  --定额公式相关
  FUNCTION GETSTANDARDGRADVALUE(P_AGENCYID VARCHAR2,P_STANDARID VARCHAR2,P_FLAG CHAR DEFAULT '0') RETURN NUMBER;
  PROCEDURE FORMULA_P_CALCULATE_SPF_QUOTA(P_TABLEID VARCHAR2,P_PROJECTID VARCHAR2,P_SPFID VARCHAR2);
  PROCEDURE FORMULA_P_CALCULATE_ALL_SPF(P_TABLEID VARCHAR2,P_PROJECTIDLIST VARCHAR2,P_SPFID VARCHAR2);
  PROCEDURE FORMULA_P_CALCULATE_SPF(P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2 DEFAULT '%');
  PROCEDURE FORMULA_P_CALCULATEQUOTA(P_TABLEID VARCHAR2,P_YEAR VARCHAR2,P_AGENCYID VARCHAR2);
  PROCEDURE FORMULA_P_CALCULATE_ALL_QUOTA(P_TABLEID VARCHAR2,P_AGENCYIDLIST VARCHAR2,P_YEAR VARCHAR2);
  PROCEDURE FORMULA_P_MARKNEEDUPDATE(P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2 DEFAULT '%',P_FORMULAID VARCHAR2);
  PROCEDURE FORMULA_P_MARKALLTABLE(P_FORMULAID VARCHAR2,P_AGENCYID VARCHAR2 DEFAULT '%');
  PROCEDURE FORMULA_P_MARKBYSTANDARD(P_STANDARDID VARCHAR2,P_AGENCYID VARCHAR2 DEFAULT '%');
  PROCEDURE FORMULA_P_MARKBYGRADE(P_GRADEID VARCHAR2,P_AGENCYID VARCHAR2 DEFAULT '%');
  FUNCTION FORMULA_F_CALCULATEFORMULA_6(P_TABLEID VARCHAR2,P_DATA CLOB) RETURN CLOB;
END PKG_FORMULA;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PKG_CHECK</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PACKAGE PKG_CHECK IS

  -- Author  : HUANGSHCH
  -- Created : 2014-4-1 15:39:31
  -- Purpose : 审核用包
  
  -- Public type declarations
  
  -- Public constant declarations

  -- Public variable declarations

  -- Public function and procedure declarations
 
  FUNCTION F_EXCEUTE(P_AGENCYID VARCHAR2,P_CHECKID VARCHAR2) RETURN VARCHAR2;
  PROCEDURE P_CHECKTABLE(P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2,P_RESULT OUT SYS_REFCURSOR);
  PROCEDURE P_EXECCHECK(P_CHECKID VARCHAR2,P_PARM VARCHAR2,P_RESULT OUT SYS_REFCURSOR);
  PROCEDURE P_CREATE_TRIGGER(P_GUID VARCHAR2);
  PROCEDURE P_START_CHECK(P_CHECKID VARCHAR2,P_PARM VARCHAR2,P_DELTA_DATA VARCHAR2 DEFAULT '0',P_RESULT OUT CLOB);
  PROCEDURE P_DROP_VOID_TRIGGER;
END PKG_CHECK;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PK_BGT_SECU</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[create or replace package PK_BGT_SECU is
  --此变量表示用户对应角色是否变化，如果未变化则表示0，否则1.
  p_RoleChange_Flag int:=0;
  --系统的缓存内容Index
  p_CacheCode   varchar2(100);
  p_user_Roles type_bgt_securole;
  function f_Get_CacheCode(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2 ) return varchar2;
  function f_Set_ArrayNull return varchar2;
  ------------------------用户角色部分
  p_c_userrole timestamp;
  p_c_userAgency timestamp;
  --
  type p_t_time_userRole is record(userrole_time timestamp,userAgency_time timestamp,userRoleArray type_bgt_securole);
  Type p_type_Cache_userRole is table of p_t_time_userRole index by varchar2(200);
  p_secu_userRole p_type_Cache_userRole;
  --用户对应的角色函数
  function f_get_UserRole_Time(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2) return varchar2;
  function f_Get_UserToRole(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2) return varchar2;
  function f_Get_UserToRole_Array(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2) return type_bgt_securole;
  function f_Get_UserToRole_0_CZ(v_appid varchar2,v_manid varchar2,user_type varchar2,v_agencycode varchar2 ) return type_bgt_securole;
  function f_Get_UserToRole_1_CZ(v_appid varchar2,v_manid varchar2,user_type varchar2,v_agencycode varchar2 ) return type_bgt_securole;
  ------------------------表权限相关
  p_c_tab  timestamp;
  type p_t_time_userTab is record(user_tab_time timestamp,TabArray type_bgt_securole);
  Type p_type_Cache_userTab is table of p_t_time_userTab index by varchar2(200);
  p_secu_Tabs p_type_Cache_userTab;
  --
  function f_get_Table_Time(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2) return varchar2;
  function f_Secu_Tab(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2) return varchar2;
  function f_Get_UserToTab_0(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2 ) return type_bgt_securole;
  function f_Get_UserToTab_1(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2 ) return type_bgt_securole;
  function f_Secu_Return_Tabs(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2) return type_bgt_tab_secutab pipelined;
  ------------------------列权限相关
  p_c_Col  timestamp;
  type p_t_time_userCol is record(user_Col_time timestamp,ColArray type_bgt_securole);
  Type p_type_Cache_userCol is table of p_t_time_userCol index by varchar2(200);
  p_secu_Cols p_type_Cache_userCol;
  --
  function f_get_Col_Time(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2) return varchar2;
  function f_Secu_Col(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2) return type_bgt_tab_secutab pipelined;
  function f_Get_UserToCol_0(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2 ) return type_bgt_securole;
  function f_Get_UserToCol_1(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2 ) return type_bgt_securole;
  ------------------------行权限相关
  p_c_Row  timestamp;
  type p_t_time_userRow is record(user_Row_time timestamp,RowArray TYPE_BGT_ROW);
  Type p_type_Cache_userRow is table of p_t_time_userRow index by varchar2(200);
  p_secu_Rows p_type_Cache_userRow;
  --
  function f_get_Row_Time(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2) return varchar2;
  function f_Secu_Row(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2,v_flag varchar2 default '0') return varchar2;
  function f_Get_UserToRow_0(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2) return TYPE_BGT_ROW;
  function f_Get_UserToRow_1(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2) return TYPE_BGT_ROW;
  
  FUNCTION F_GET_SECU_TAB(V_APPID VARCHAR2,V_MANID VARCHAR2,V_USERTYPE VARCHAR2,V_TABLEID VARCHAR2,V_AGENCYCODE VARCHAR2) RETURN VARCHAR2;
end PK_BGT_SECU;]]></SQL_CONTENT>
    </SQL>
  </PACKAGE>
  <FUNCTION>
    <SQL>
      <OBJECT_NAME>F_GET_LPAD</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[create or replace function f_get_lpad(code varchar2,codemode varchar2)   return  VARCHAR2
is
  v_ret varchar2(1000);
  v_len int;
  v_i   int;
  v_len_t int;
begin
  if codemode is null then
    return code;
  end if;
  v_len:=to_number(substr(codemode,1,1));
  v_i:=1;
  v_len_t:=1;
  while (v_len>0 and v_len_t<=length(code)) loop
    v_ret:=v_ret||lpad(substr(code,v_len_t,v_len),4,'0000');
    v_len_t:=v_len_t+v_len;
    v_len:=to_number(nvl(substr(codemode,1+v_i*2,1),'0'));
    v_i:=v_i+1;
  end loop;
  return v_ret;
end f_get_lpad;
]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CONNSTRA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE FUNCTION CONNSTRA (p_input VARCHAR2)
RETURN VARCHAR2
PARALLEL_ENABLE AGGREGATE USING CONNSTRIMPLA;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CONNSTRLOB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE FUNCTION CONNSTRLOB(input VARCHAR2) RETURN clob
  PARALLEL_ENABLE
  AGGREGATE USING CONNSTRIMPLCLOB;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYS_F_GETBANDCOLUMNDATA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE FUNCTION SYS_F_GETBANDCOLUMNDATA(P_TABLEID VARCHAR2,P_ROWDATA CLOB) RETURN VARCHAR2 IS
  V_SQL VARCHAR2(32760);
  V_TMP VARCHAR2(32760);
  V_THECURSOR INTEGER;
  V_COLCNT INTEGER;
  V_DEST_T DBMS_SQL.DESC_TAB;
  V_DATA VARCHAR2(4000);
  V_NUM NUMBER;
BEGIN
  V_TMP := DBMS_LOB.SUBSTR(P_ROWDATA,32000,1);
  IF V_TMP IS NULL THEN
    RETURN '';
  END IF;
  V_SQL := '';
  FOR C_COL IN (SELECT X.DBCOLUMNNAME ,Y.DBCOLUMNNAME BOUND_COLUMN,Z.DBCOLUMNNAME DATA_SOURCE_COLUMN,(SELECT DBTABLENAME FROM DICT_T_MODELCODE WHERE TABLEID = Z.TABLEID) DATA_SOURCE_TABLE
                FROM DICT_T_FACTOR X ,DICT_T_FACTOR Y ,DICT_T_FACTORCODE Z
                WHERE X.TABLEID = Y.TABLEID AND X.BANDCOLUMNID = Y.COLUMNID AND X.BANDREFDWCOL = Z.COLUMNID AND X.ISBANDCOL = '1'  AND X.TABLEID = P_TABLEID) LOOP
    V_SQL := V_SQL||'(SELECT '||C_COL.DATA_SOURCE_COLUMN||' FROM '||C_COL.DATA_SOURCE_TABLE||' WHERE GUID = TX.'||C_COL.BOUND_COLUMN||') '||C_COL.DBCOLUMNNAME||',';

  END LOOP;
  IF V_SQL IS NULL THEN
    RETURN '';
  END IF;
  V_SQL := SUBSTR(V_SQL,1,LENGTH(V_SQL) - 1);
  V_SQL := 'SELECT '||V_SQL||' FROM TX';
  V_SQL := 'WITH TX AS(SELECT '||V_TMP||' FROM DUAL ) '||V_SQL;

  V_THECURSOR := DBMS_SQL.OPEN_CURSOR;
  DBMS_SQL.PARSE(V_THECURSOR, V_SQL, DBMS_SQL.NATIVE);
  DBMS_SQL.DESCRIBE_COLUMNS(V_THECURSOR, V_COLCNT, V_DEST_T);
  FOR V_I IN 1..V_COLCNT LOOP
    DBMS_SQL.DEFINE_COLUMN(V_THECURSOR,V_I,V_DATA,4000);
  END LOOP;
  V_NUM := DBMS_SQL.EXECUTE(V_THECURSOR);
  V_NUM := DBMS_SQL.FETCH_ROWS(V_THECURSOR);
  V_TMP := '';
  IF V_NUM > 0 THEN
    FOR V_I IN 1 .. V_COLCNT LOOP
     DBMS_SQL.COLUMN_VALUE(V_THECURSOR,V_I,V_DATA);
     V_TMP := V_TMP||'['||V_DEST_T(V_I).COL_NAME||':'||NVL(V_DATA,'')||'],';
    END LOOP;
    V_TMP := SUBSTR(V_TMP,1,LENGTH(V_TMP) - 1);
  END IF;
  DBMS_SQL.CLOSE_CURSOR(V_THECURSOR);
  RETURN V_TMP ;
END SYS_F_GETBANDCOLUMNDATA;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_F_SYN_CHECKTABLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[create or replace function DICT_F_SYN_CHECKTABLE(TableName in varchar2) return varchar2 is
  Result varchar2(4000);
  v_count  int;
  v_count_1  int;
  v_count_2  int;
  v_pos      int;
  v_tableName_P varchar2(32);
  v_clob        clob;
  v_part_count  int;
begin
  v_tableName_P:=upper(tableName);
  --特殊分区表特殊处理
  if v_tableName_P in ('P#FASP_T_PUBAGENCY', 'P#FASP_T_PUBDEPARTMENT',  'P#FASP_T_PUBPROVINCE', 'P#SPF_T_AGENCY_RELATION') then
    return '';
  end if;

  ---其他表正常处理
  select count(*) into v_count from user_objects where object_name=v_tableName_P and object_type='TABLE';
  if v_count <1 then
    Result:='['||v_tableName_P||']：物理表不存在！';
    return Result;
  end if;
  select count(*) into v_part_count from pub_t_partition_divid where year='*';
  if substr(v_tableName_P,1,2)='P#' then
    --判断视图对应物理表是否正确
    select case when count(*)=v_part_count then 1 else 0 end into v_count_1 from user_tab_partitions  where table_name=v_tableName_P ;
    select count(*) into v_count_2 from user_triggers  where table_name=v_tableName_P and trigger_name='TR_'||v_tableName_P;
    if (v_count_1 >0 and v_count_2 > 0) then
      select dbms_metadata.get_ddl('TRIGGER','TR_'||v_tableName_P) into v_clob from dual;
      v_pos:=instr(v_clob,'2012-01-01',1,3);
      if v_pos < 1 then
        Result:='['||v_tableName_P||']：触发器不是最新版本';
      end if;
    else
      Result:='['||v_tableName_P||']:分区表问题（检查分区表或触发器是否存在且正确！）';
    end if;
  end if;
  return(Result);
end DICT_F_SYN_CHECKTABLE;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYS_F_GETDDL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE FUNCTION SYS_F_GETDDL(P_OBJ VARCHAR2,P_OBJTYPE VARCHAR2) return CLOB is
  V_SQL CLOB;
  V_PAR VARCHAR2(4000);
  V_OBJ VARCHAR2(30);
  V_OBJTYPE VARCHAR2(30);
  V_CNT VARCHAR2(3000);
  V_POS NUMBER;
  V_TMP VARCHAR2(32760);
  V_LEN NUMBER;
  V_USER VARCHAR2(100);
BEGIN
  DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'SEGMENT_ATTRIBUTES',FALSE);
  V_OBJTYPE := P_OBJTYPE;
  V_OBJ := P_OBJ;
  SELECT DBMS_METADATA.GET_DDL(V_OBJTYPE,V_OBJ) INTO V_SQL FROM DUAL;
  V_USER := '"'||USER||'".';
  --截取前1000个字符替换用户名"EFMIS_23".
  V_TMP := DBMS_LOB.SUBSTR(V_SQL,1000,1);
  V_TMP := REPLACE(V_TMP,V_USER,'');
  V_SQL := DBMS_LOB.SUBSTR(V_SQL,DBMS_LOB.GETLENGTH(V_SQL),1001);
  V_SQL := V_TMP||V_SQL;
  IF V_OBJTYPE = 'TYPE' THEN
    V_SQL := TRIM(REPLACE(V_SQL,'"',''));
    V_SQL := TRIM(LEADING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(LEADING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
  END IF;
  IF V_OBJTYPE = 'SEQUENCE' THEN
    V_SQL := TRIM(REPLACE(V_SQL,'"',''));
    V_SQL := TRIM(LEADING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(LEADING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
  END IF;
  IF V_OBJTYPE = 'TRIGGER' THEN
    V_SQL := TRIM(REPLACE(V_SQL,'"',''));
    V_SQL := TRIM(LEADING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(LEADING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
  END IF;
  IF V_OBJTYPE = 'VIEW' THEN
    V_SQL := TRIM(REPLACE(V_SQL,'"',''));
    V_SQL := REPLACE(V_SQL,'CREATE OR REPLACE FORCE VIEW','CREATE OR REPLACE FORCE VIEW');
    V_POS := INSTR(V_SQL,') AS ');
    IF V_POS > 0 THEN
      V_SQL := SUBSTR(V_SQL,V_POS + 1);
      V_SQL := 'CREATE OR REPLACE FORCE VIEW '||V_OBJ||V_SQL;
    END IF;
    V_SQL := TRIM(LEADING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(LEADING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := 'BEGIN
    EXECUTE IMMEDIATE Q''{'||V_SQL||'}'';
END;';
  END IF;
  IF V_OBJTYPE = 'INDEX' THEN
    V_SQL := TRIM(REPLACE(V_SQL,'"',''));
    V_SQL := TRIM(LEADING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(LEADING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
  END IF;
  IF V_OBJTYPE = 'TABLE' THEN
    V_SQL := TRIM(REPLACE(V_SQL,'"',''));
    V_SQL := TRIM(LEADING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(LEADING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(10) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    V_SQL := TRIM(TRAILING CHR(13) FROM V_SQL);
    V_SQL := TRIM(V_SQL);
    SELECT  COUNT(*) INTO V_CNT FROM USER_TABLES X WHERE X.TABLE_NAME = V_OBJ AND PARTITIONED = 'YES';
    IF V_CNT > 0 THEN
      SELECT COUNT(*) INTO V_CNT FROM USER_PART_KEY_COLUMNS WHERE NAME = V_OBJ AND COLUMN_NAME = 'PROVINCE';
      IF V_CNT > 0 THEN
        SELECT COUNT(*) INTO V_CNT FROM USER_SUBPART_KEY_COLUMNS WHERE NAME = V_OBJ AND COLUMN_NAME = 'YEAR';
         IF V_CNT > 0 THEN
           V_POS := INSTR(V_SQL,'PARTITION BY');
           IF V_POS > 0 THEN
             V_SQL := SUBSTR(V_SQL,1,V_POS - 1);
             V_PAR := Q'{PARTITION BY LIST (PROVINCE)
SUBPARTITION BY LIST (YEAR)
(
  PARTITION P87 VALUES ('87')
  (
    SUBPARTITION P87_Y2016 VALUES ('2016')
  )
)}';
             V_SQL := V_SQL||V_PAR;
           END IF;
         ELSE
           NULL;
         END IF;
      ELSE
        NULL;
      END IF;
    ELSE
      NULL;
    END IF;
    V_SQL := 'BEGIN
    EXECUTE IMMEDIATE Q''{'||V_SQL||'}'';
    ';
    FOR C_IND IN (SELECT INDEX_NAME FROM USER_INDEXES WHERE TABLE_NAME = P_OBJ AND INDEX_TYPE <> 'LOB' AND STATUS = 'VALID'
                  AND INDEX_NAME NOT IN (SELECT CONSTRAINT_NAME FROM USER_CONSTRAINTS  WHERE TABLE_NAME = P_OBJ AND CONSTRAINT_TYPE = 'P')) LOOP
       V_TMP := SYS_F_GETDDL(C_IND.INDEX_NAME,'INDEX');
       V_SQL := V_SQL||'EXECUTE IMMEDIATE Q''{'||V_TMP||'}'';
    ';
    END LOOP;
    V_SQL := TRIM(V_SQL)||'END;';
  END IF;
    
  RETURN V_SQL;
END SYS_F_GETDDL;]]></SQL_CONTENT>
    </SQL>
  </FUNCTION>
  <PROCEDURE>
    <SQL>
      <OBJECT_NAME>DS_SP_SETUPDATFLAG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE DS_SP_SETUPDATFLAG
(dqrType varchar2, criteria varchar2)-- ds：数据源，qry：查询，rep：报表-- 格式为 103,85,或 'query1','query2',
 is
/*
设置数据源、查询或报表的更新标志
*/
sqlwhere varchar2(250);
sqlstring varchar2(250);
begin
-- 去掉条件中的逻辑操作符“ or ”
 sqlwhere := rtrim(criteria);
 sqlwhere := substr(sqlwhere,1,length(sqlwhere) - 3);

if dqrType = 'ds' then
  sqlstring := 'UPDATE Ds_t_DataSource SET NeedUpdate = ''1'' WHERE ' || sqlwhere;
  EXECUTE IMMEDIATE sqlstring;
--  exec('UPDATE Ds_t_DataSource SET NeedUpdate = ''1'' WHERE ' || criteria)
end if;
/*if dqrType = 'qry' then
  sqlstring := 'UPDATE report1 SET NeedUpdate = ''1''  WHERE ' || sqlwhere;
  EXECUTE IMMEDIATE sqlstring;
--  exec('UPDATE report1 SET NeedUpdate = ''1''  WHERE ' || criteria)
end if;*/
if dqrType = 'rep' then
  sqlstring := 'UPDATE Rep_t_RepPage SET NeedUpdate = ''1'' WHERE ' || sqlwhere;
  EXECUTE IMMEDIATE sqlstring;
--  exec('UPDATE Rep_t_RepPage SET NeedUpdate = ''1'' WHERE ' || criteria)
end if;
end ds_sp_setUpdatFlag;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EXECPROCEDURE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE EXECPROCEDURE(SQLSTR CLOB) AS
  BEGIN
    IF SQLSTR IS NULL THEN
      RETURN;
    ELSE
      EXECUTE IMMEDIATE SQLSTR;
    END IF;
  END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>GET_DB_UUID_VAL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE GET_DB_UUID_VAL(U_ID OUT VARCHAR2)IS
BEGIN
  U_ID:=SYS_GUID();
  --DBMS_OUTPUT.PUT_LINE(S);
END GET_DB_UUID_VAL;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>GET_GLOBAL_ISMULTDB_VAL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE GET_GLOBAL_ISMULTDB_VAL(s OUT varchar2)is
begin
  s:=GLOBAL_IsMultDb.v_ISMULT;
  --DBMS_OUTPUT.put_line(s);
end GET_GLOBAL_ISMULTDB_VAL;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>GET_IF_EXISTS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE GET_IF_EXISTS(V OUT NUMBER,V_SQL IN VARCHAR2)IS
BEGIN
   --SELECT COUNT(1) INTO V FROM USER_TABLES WHERE TABLE_NAME='W#AACC'
   --SELECT COUNT(1) INTO V FROM USER_VIEWS WHERE VIEW_NAME=VIEWS_NAME;
   --   0 不存在    1 存在
  EXECUTE IMMEDIATE V_SQL INTO V;
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EXECDLL_LONG_PARAM</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE EXECDLL_LONG_PARAM(ERRORMESSAGE OUT VARCHAR, STRSQL CLOB) AUTHID CURRENT_USER IS
 PRAGMA AUTONOMOUS_TRANSACTION;
 V_EXECSQL VARCHAR2(30000);
BEGIN
  V_EXECSQL:=STRSQL;
  EXECUTE IMMEDIATE V_EXECSQL;
  COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
    ERRORMESSAGE:=SUBSTR(DBMS_UTILITY.FORMAT_ERROR_STACK,1,200);
    --RAISE_APPLICATION_ERROR(-20001,'脚本执行过程中出现错误，请查看表SECU_T_TMP_LOGSECUREC内容！');
END EXECDLL_LONG_PARAM;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EXECDLL_LONG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE EXECDLL_LONG (strsql clob) AUTHID CURRENT_USER is
 pragma autonomous_transaction;
 v_ret     varchar2(100);
 v_clob    clob;
 v_code    varchar2(100);
begin
  EXECUTE IMMEDIATE strsql;
  commit;
  EXCEPTION
  WHEN OTHERS THEN
    v_clob:=EMPTY_CLOB;
    v_code:=to_char(sqlcode);
    dbms_lob.createtemporary(v_clob,TRUE);
    insert into Secu_T_Tmp_LogSecuRec(orderid,remark,sqlclob) values(to_char(Secu_seq_FQ.nextval),substr(dbms_utility.format_error_stack,1,200),EMPTY_CLOB()) returning sqlclob into v_clob;
    DBMS_LOB.Copy(v_clob, strSql,90000,1,1);
    commit;
    if v_code<>'-24344' then
      RAISE_APPLICATION_ERROR(-20001,'脚本执行过程中出现错误，请查看表Secu_T_Tmp_LogSecuRec内容！');
    end if;
end ExecDll_Long;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PRINT_OUTPUT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE PRINT_OUTPUT (input_string in clob )
is
   --此功能主要为长字符的打印（功能调试）
   string_lenth int;
   loop_count number default 0;
begin
   string_lenth:=length(input_string);
   dbms_output.enable(1000000);
   while (loop_count < string_lenth)
   loop
      dbms_output.put_line( substr( input_string, loop_count +1, 255 ) );
      loop_count := loop_count +255;
   end loop;
end Print_OutPut;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYS_P_ADDPARTITION</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[
      CREATE OR REPLACE PROCEDURE SYS_P_ADDPARTITION(P_TABLE_NAME VARCHAR2,P_PROVINCE VARCHAR2) IS
        V_SQL VARCHAR2(4000);
        V_CNT NUMBER;
        V_PARNAME VARCHAR2(30);
        V_SUBPARNAME VARCHAR2(30);
        V_PAR VARCHAR2(4000);
      BEGIN
        V_PARNAME := 'P'||P_PROVINCE;
        SELECT COUNT(*) INTO V_CNT FROM USER_TAB_PARTITIONS WHERE TABLE_NAME = P_TABLE_NAME AND PARTITION_NAME = V_PARNAME;
        IF V_CNT < 1 THEN
          V_SQL := 'ALTER TABLE '||P_TABLE_NAME||' ADD PARTITION '||V_PARNAME||' VALUES('''||P_PROVINCE||''')';
          V_PAR := ' ';
          FOR C_YEAR IN(SELECT DISTINCT YEAR FROM PUB_T_PARTITION_DIVID WHERE DISTRICTID = P_PROVINCE AND YEAR <> '*' ORDER BY YEAR) LOOP
            /*BEGIN
            INSERT INTO PUB_T_PARTITION_DIVID(DISTRICTID,ID_TABSPACE,YEAR)
            SELECT DISTINCT P_PROVINCE,'EFMIS',YEAR FROM PUB_T_PARTITION_DIVID 
            WHERE YEAR <> '*' AND NOT EXISTS(SELECT 1 FROM PUB_T_PARTITION_DIVID WHERE DISTRICTID = P_PROVINCE AND YEAR = C_YEAR.YEAR);
            EXCEPTION WHEN OTHERS THEN
              DBMS_OUTPUT.PUT_LINE(P_PROVINCE||','||C_YEAR.YEAR);
              RAISE;
              RETURN;
            END;*/
            V_SUBPARNAME := 'P'||P_PROVINCE||'_Y'||C_YEAR.YEAR;
            V_PAR := V_PAR||'SUBPARTITION '||V_SUBPARNAME||' VALUES('''||C_YEAR.YEAR||'''),';
          END LOOP;
          V_PAR := TRIM(SUBSTR(V_PAR,1,LENGTH(V_PAR) - 1));
          IF V_PAR IS NOT NULL THEN
            V_SQL := V_SQL||'('||V_PAR||')';
          END IF;
          BEGIN
            EXECUTE IMMEDIATE V_SQL;
          EXCEPTION WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(V_SQL);
            RAISE;
            RETURN;
          END;
        ELSE
          FOR C_YEAR IN(SELECT DISTINCT YEAR FROM PUB_T_PARTITION_DIVID WHERE YEAR <> '*' ORDER BY YEAR) LOOP
            INSERT INTO PUB_T_PARTITION_DIVID(DISTRICTID,ID_TABSPACE,YEAR)
            SELECT DISTINCT P_PROVINCE,'EFMIS',YEAR FROM PUB_T_PARTITION_DIVID 
            WHERE NOT EXISTS(SELECT 1 FROM PUB_T_PARTITION_DIVID WHERE DISTRICTID = P_PROVINCE AND YEAR = C_YEAR.YEAR);
            V_SUBPARNAME := 'P'||P_PROVINCE||'_Y'||C_YEAR.YEAR;
            SELECT COUNT(*) INTO V_CNT FROM USER_TAB_SUBPARTITIONS WHERE TABLE_NAME = P_TABLE_NAME AND PARTITION_NAME = V_PARNAME AND SUBPARTITION_NAME = V_SUBPARNAME;
            IF V_CNT < 1 THEN
              V_SQL := 'ALTER TABLE '||P_TABLE_NAME||' MODIFY PARTITION '||V_PARNAME||' ADD  SUBPARTITION '||V_SUBPARNAME||' VALUES('''||C_YEAR.YEAR||''')'; 
              BEGIN
                EXECUTE IMMEDIATE V_SQL;
              EXCEPTION WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(V_SQL);
                RAISE;
                RETURN;
              END;
            END IF;
          END LOOP;
        END IF;
        RETURN;
      END SYS_P_ADDPARTITION;
      ]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYS_P_ADDPARTITION_ALL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE SYS_P_ADDPARTITION_ALL IS
BEGIN
  FOR C_TAB IN (SELECT TABLE_NAME FROM USER_TABLES T
WHERE PARTITIONED = 'YES'
AND EXISTS(SELECT 1 FROM USER_PART_KEY_COLUMNS WHERE NAME = T.TABLE_NAME AND COLUMN_NAME = 'PROVINCE')
AND EXISTS(SELECT 1 FROM USER_SUBPART_KEY_COLUMNS WHERE NAME = T.TABLE_NAME AND COLUMN_NAME = 'YEAR')) LOOP
    FOR C_PROVINCE IN (SELECT DISTINCT DISTRICTID FROM PUB_T_PARTITION_DIVID WHERE YEAR = '*') LOOP
      SYS_P_ADDPARTITION(P_TABLE_NAME => C_TAB.TABLE_NAME, P_PROVINCE => C_PROVINCE.DISTRICTID);
    END LOOP;
  END LOOP;
END SYS_P_ADDPARTITION_ALL;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYS_P_ADD_PARTITION_TRIGGER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE SYS_P_ADD_PARTITION_TRIGGER(P_TABLE VARCHAR2 DEFAULT '%') IS
  V_SQL VARCHAR2(32000);
  V_TMP VARCHAR2(32000);
  V_ISTASK VARCHAR2(32);
  V_TMP2 VARCHAR2(32000);
BEGIN
  V_TMP := Q'{CREATE OR REPLACE TRIGGER TR_@TABLE_NAME@
BEFORE INSERT OR UPDATE ON  @TABLE_NAME@ FOR EACH ROW 
BEGIN 
  IF INSERTING THEN 
    :NEW.PROVINCE:=NVL(:NEW.PROVINCE,GLOBAL_MULTYEAR_CZ.V_PMDIVID); 
    :NEW.YEAR:=NVL(:NEW.YEAR,GLOBAL_MULTYEAR_CZ.V_PMYEAR); 
    :NEW.DBVERSION := CASE WHEN TO_CHAR(:NEW.DBVERSION, 'YYYY-MM-DD') = '2012-01-01' THEN TO_DATE('2012-01-01', 'YYYY-MM-DD') ELSE SYSDATE END; 
  END IF; 
  IF (TO_CHAR(:NEW.DBVERSION,'YYYY-MM-DD') ='2012-01-01' AND ((UPDATING AND UPDATING('DBVERSION')) OR INSERTING ) ) THEN 
    RETURN ;
  END IF; 
  IF UPDATING THEN 
    :NEW.DBVERSION:=SYSDATE;
  END IF;
END TR_@TABLE_NAME@;}';
  V_TMP2 := Q'{CREATE OR REPLACE TRIGGER TR_@TABLE_NAME@
BEFORE INSERT OR UPDATE ON  @TABLE_NAME@ FOR EACH ROW 
BEGIN 
  IF INSERTING THEN 
    :NEW.PROVINCE:=NVL(:NEW.PROVINCE,GLOBAL_MULTYEAR_CZ.V_PMDIVID); 
    :NEW.YEAR:=NVL(:NEW.YEAR,GLOBAL_MULTYEAR_CZ.V_PMYEAR); 
    :NEW.TASKID:=NVL(:NEW.TASKID,GLOBAL_MULTYEAR_CZ.V_TASKID); 
    :NEW.DBVERSION := CASE WHEN TO_CHAR(:NEW.DBVERSION, 'YYYY-MM-DD') = '2012-01-01' THEN TO_DATE('2012-01-01', 'YYYY-MM-DD') ELSE SYSDATE END; 
  END IF; 
  IF (TO_CHAR(:NEW.DBVERSION,'YYYY-MM-DD') ='2012-01-01' AND ((UPDATING AND UPDATING('DBVERSION')) OR INSERTING ) ) THEN 
    RETURN ;
  END IF; 
  IF UPDATING THEN 
    :NEW.DBVERSION:=SYSDATE;
  END IF;
END TR_@TABLE_NAME@;}';
EXECUTE IMMEDIATE 'PURGE RECYCLEBIN';
  FOR C_TAB IN (SELECT TABLE_NAME FROM USER_TABLES T
WHERE TABLE_NAME LIKE P_TABLE||'%' AND PARTITIONED = 'YES'
AND EXISTS(SELECT 1 FROM USER_PART_KEY_COLUMNS WHERE NAME = T.TABLE_NAME AND COLUMN_NAME = 'PROVINCE')
AND EXISTS(SELECT 1 FROM USER_SUBPART_KEY_COLUMNS WHERE NAME = T.TABLE_NAME AND COLUMN_NAME = 'YEAR')) LOOP
    IF SUBSTR(C_TAB.TABLE_NAME,1,2) = 'P#' THEN
      SELECT nvl((SELECT ISTASK FROM DICT_T_MODEL WHERE DBTABLENAME = SUBSTR(C_TAB.TABLE_NAME,3)),'0') INTO V_ISTASK FROM DUAL;
     END IF;
    IF V_ISTASK = '0' THEN
      V_SQL := REPLACE(V_TMP,'@TABLE_NAME@',C_TAB.TABLE_NAME);
    ELSE
      V_SQL := REPLACE(V_TMP2,'@TABLE_NAME@',C_TAB.TABLE_NAME);
    END IF;
    BEGIN
    EXECUTE IMMEDIATE V_SQL;
    EXCEPTION WHEN OTHERS THEN
      dbms_output.put_line(v_sql);
      dbms_output.put_line(SQLERRM);
      RAISE;
    END;
  END LOOP;
END SYS_P_ADD_PARTITION_TRIGGER;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYS_P_PARTITION_TABLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE SYS_P_PARTITION_TABLE(P_TABLE VARCHAR2) IS
  V_SQL VARCHAR2(3000);
  V_CNT NUMBER;
  V_TABLE VARCHAR2(30);
  V_COL VARCHAR2(30);
  V_NAME VARCHAR2(30);
  V_COLLIST VARCHAR2(300);
BEGIN
  V_TABLE := UPPER(TRIM(P_TABLE));
  --必须有PROVINCE,YEAR,STATUS四个默认字段 
  V_COL := 'PROVINCE';
  SELECT COUNT(*) INTO V_CNT FROM USER_TAB_COLUMNS WHERE TABLE_NAME = V_TABLE AND COLUMN_NAME = V_COL;
  IF V_CNT > 0 THEN
    SELECT COUNT(*) INTO V_CNT FROM USER_TAB_COLUMNS WHERE TABLE_NAME = V_TABLE AND COLUMN_NAME = V_COL AND DATA_TYPE = 'VARCHAR2' AND DATA_LENGTH >= 9;
    IF V_CNT < 1 THEN
      RAISE_APPLICATION_ERROR(-20001,'表中存在名为PROVINCE的字段，但是数据类型不是VARCHAR2,或者长度小于9!');
      RETURN;
    END IF;
  ELSE
    V_SQL := 'ALTER TABLE '||V_TABLE||' ADD  '||V_COL||' VARCHAR2(9)';
    EXECUTE IMMEDIATE V_SQL;
  END IF;
  V_COL := 'YEAR';
  SELECT COUNT(*) INTO V_CNT FROM USER_TAB_COLUMNS WHERE TABLE_NAME = V_TABLE AND COLUMN_NAME = V_COL;
  IF V_CNT > 0 THEN
    SELECT COUNT(*) INTO V_CNT FROM USER_TAB_COLUMNS WHERE TABLE_NAME = V_TABLE AND COLUMN_NAME = V_COL AND DATA_TYPE IN ('CHAR','VARCHAR2') AND DATA_LENGTH >= 4;
    IF V_CNT < 1 THEN
      RAISE_APPLICATION_ERROR(-20001,'表中存在名为YEAR的字段，但是数据类型不是CHAR或者VARCHAR2,或者长度小于9!');
      RETURN;
    END IF;
  ELSE
    V_SQL := 'ALTER TABLE '||V_TABLE||' ADD  '||V_COL||' CHAR(4)';
    EXECUTE IMMEDIATE V_SQL;
  END IF;
  V_COL := 'STATUS';
  SELECT COUNT(*) INTO V_CNT FROM USER_TAB_COLUMNS WHERE TABLE_NAME = V_TABLE AND COLUMN_NAME = V_COL;
  IF V_CNT > 0 THEN
    SELECT COUNT(*) INTO V_CNT FROM USER_TAB_COLUMNS WHERE TABLE_NAME = V_TABLE AND COLUMN_NAME = V_COL AND DATA_TYPE IN ('CHAR','VARCHAR2') AND DATA_LENGTH >= 1;
    IF V_CNT < 1 THEN
      RAISE_APPLICATION_ERROR(-20001,'表中存在名为STATUS的字段，但是数据类型不是CHAR或者VARCHAR2!');
      RETURN;
    END IF;
  ELSE
    V_SQL := 'ALTER TABLE '||V_TABLE||' ADD  '||V_COL||' CHAR(1) DEFAULT ''1''';
    EXECUTE IMMEDIATE V_SQL;
  END IF;
  V_COL := 'DBVERSION';
  SELECT COUNT(*) INTO V_CNT FROM USER_TAB_COLUMNS WHERE TABLE_NAME = V_TABLE AND COLUMN_NAME = V_COL;
  IF V_CNT > 0 THEN
    SELECT COUNT(*) INTO V_CNT FROM USER_TAB_COLUMNS WHERE TABLE_NAME = V_TABLE AND COLUMN_NAME = V_COL AND DATA_TYPE = 'TIMESTAMP(6)' AND DATA_LENGTH >= 1;
    IF V_CNT < 1 THEN
      RAISE_APPLICATION_ERROR(-20001,'表中存在名为DBVERSION的字段，但是数据类型不是TIMESTAMP(6)!');
      RETURN;
    END IF;
  ELSE
    V_SQL := 'ALTER TABLE '||V_TABLE||' ADD '||V_COL||' TIMESTAMP(6) DEFAULT SYSDATE';
    EXECUTE IMMEDIATE V_SQL;
  END IF;
  
  SELECT NVL((SELECT CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME = V_TABLE AND CONSTRAINT_TYPE = 'P'),'') 
  INTO V_NAME FROM DUAL;
  IF V_NAME IS NOT NULL THEN
    V_COLLIST := 'PROVINCE,YEAR,STATUS';
    FOR C_COL IN (SELECT COLUMN_NAME FROM USER_CONS_COLUMNS  WHERE CONSTRAINT_NAME = V_NAME AND COLUMN_NAME NOT IN ('PROVINCE','YEAR','STATUS') ORDER BY POSITION) LOOP
      V_COLLIST := V_COLLIST||','||C_COL.COLUMN_NAME;
    END LOOP;
    V_SQL := 'ALTER TABLE '||V_TABLE||' DROP CONSTRAINT '||V_NAME;
    EXECUTE IMMEDIATE V_SQL;
    V_SQL := 'ALTER TABLE '||V_TABLE||' ADD CONSTRAINT '||V_NAME||' PRIMARY KEY ('||V_COLLIST||')';
    EXECUTE IMMEDIATE V_SQL;
  END IF;
  
  PKG_MULTYEAR.SECU_SP_MANY_Y_CZ_DO(V_TABLE); 
END SYS_P_PARTITION_TABLE;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>TRIGGERS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE TRIGGERS(VFLAG VARCHAR2 DEFAULT 'ENABLE')
AS
  TRIGGERS_NAME VARCHAR2(30);
  CURSOR CUR_TRIGGERNAME IS SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_TYPE='TRIGGER';
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  IF UPPER(NVL(VFLAG,'')) NOT IN ('ENABLE','DISABLE') THEN
    RAISE_APPLICATION_ERROR(-20535,'SQL参数错误'||VFLAG);
  END IF;
  OPEN CUR_TRIGGERNAME;
  LOOP
    FETCH CUR_TRIGGERNAME INTO TRIGGERS_NAME;
    EXIT WHEN CUR_TRIGGERNAME%NOTFOUND OR CUR_TRIGGERNAME%NOTFOUND IS NULL;
    BEGIN
      EXECUTE IMMEDIATE 'ALTER TRIGGER '||TRIGGERS_NAME||' '||VFLAG;
      EXCEPTION WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20535,'ALTER TRIGGER '||TRIGGERS_NAME||' '||VFLAG);
    END;
  END LOOP;
  CLOSE CUR_TRIGGERNAME;
END TRIGGERS;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYS_P_RECREATE_PARTITION_VIEW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE SYS_P_RECREATE_PARTITION_VIEW(P_TABLE VARCHAR2) IS
  V_SQL VARCHAR2(32000);
  V_ISTASK VARCHAR2(100);
BEGIN
  IF NVL(SUBSTR(UPPER(P_TABLE),1,2),' ') <> 'P#' THEN
    RETURN;
  END IF;
  SELECT CONNSTRA(COLUMN_NAME||',') INTO V_SQL FROM USER_TAB_COLUMNS WHERE TABLE_NAME = UPPER(P_TABLE) AND COLUMN_NAME NOT IN ('PROVINCE','YEAR','DBVERSION');
  SELECT NVL((SELECT ISTASK FROM DICT_T_MODEL WHERE DBTABLENAME = SUBSTR(UPPER(P_TABLE),3)),'0') INTO V_ISTASK FROM DUAL;
  IF V_ISTASK = '1' THEN
    V_SQL := 'CREATE OR REPLACE FORCE VIEW '||SUBSTR(UPPER(P_TABLE),3)||' AS
SELECT '||V_SQL||'DBVERSION
  FROM '||UPPER(P_TABLE)||'
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM(''DIVID'')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM(''YEAR'')
   AND TASKID = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM(''TASKID'')
   AND STATUS=''1''';
  ELSE
    V_SQL := 'CREATE OR REPLACE FORCE VIEW '||SUBSTR(UPPER(P_TABLE),3)||' AS
SELECT '||V_SQL||'DBVERSION
  FROM '||UPPER(P_TABLE)||'
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM(''DIVID'')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM(''YEAR'')
   AND STATUS=''1''';
   END IF;
   BEGIN
  EXECUTE IMMEDIATE V_SQL;
  EXCEPTION WHEN OTHERS THEN
    dbms_output.put_line(v_sql);
    dbms_output.put_line(SQLERRM);
    RAISE;
  END;
END SYS_P_RECREATE_PARTITION_VIEW;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_SYNCHRONIZE_TABLES</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PROCEDURE DICT_SYNCHRONIZE_TABLES (v_tables varchar2) is
   v_modeldbname    varchar2(32);
   v_modeldbname_P  varchar2(32);
   v_temp_sql       clob;
   v_sql            clob;
   v_curr_user      varchar2(32);
   v_count          integer := 0;
   v_count1         integer := 0;
   v_count2         integer := 0;
   v_count3         integer := 0;
   v_timeflag       timestamp(6);
   v_tmp            varchar2(30000);
   v_ch_timeflag    varchar2(100);
   v_tableName      varchar2(32);
   v_i              int;
begin
   select nvl(max(LASTEXPDATE),to_date('2012-01-01','yyyy-mm-dd')) into v_timeflag from synch_t_exportlog t where t.EXPPHYSDBNAME ='DICT_T_LOG';
   select t.username into v_curr_user from user_users t;
   --更新时间
   v_ch_timeflag := to_char(nvl(v_timeflag,systimestamp),'YYYY-MM-DD:HH24:MI:SS');
   v_i:=1;
   -- 1.处理创建时间大于截至时间，也就是时间戳后创建的数据元字典表中的TABLE
   for v_tab_rec in (select object_name,case when substr(object_name,1,2)='P#' then substr(object_name,3) else object_name end table_name
                      from user_objects t
                     where t.object_type = 'TABLE'
                       and t.created> v_timeflag and ((substr(object_name,1,2)='P#' and instr(v_tables,','||substr(object_name,3),1,1)>0) or (substr(object_name,1,2)<>'P#' and instr(v_tables,','||object_name,1,1)>0))) loop

       --判断是否在代码表和业务表的登记表中
       select count(*) into v_count1 from dict_t_model mo where (mo.dbtablename = v_tab_rec.table_name or (mo.dbtablename = substr(v_tab_rec.table_name,1,length(v_tab_rec.table_name)-4) and substr(v_tab_rec.table_name,-4)='_BAK')) and mo.dbversion > v_timeflag and mo.INSERTVERSION>v_timeflag and rownum <2;
       ---
       v_count := v_count1;
       --所有表都同步还是登记业务表同步，需要考虑!!!
       if v_count >0 then
           select count(*) into v_count3 from user_objects where object_type='TABLE' and object_name='P#'||v_tab_rec.object_name and rownum <2;
           if substr(v_tab_rec.object_name,1,2)<>'P#' and v_count3>0 then
             v_tableName:='P#'||v_tab_rec.object_name;
           else
             v_tableName:=v_tab_rec.object_name;
           end if;
           DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'SEGMENT_ATTRIBUTES',FALSE);
           select dbms_metadata.get_ddl('TABLE',v_tableName, v_curr_user) into v_temp_sql from dual;
           --替换用户为空
           v_tmp:=replace(v_temp_sql,'"'||v_curr_user||'".','');
           v_tmp:=replace(v_temp_sql,'''','''''');

           v_sql :=
             'declare
                v_sql   clob;
                v_count integer := 0;
              begin
                select count(*) into v_count from user_objects t where t.Object_type=''TABLE'' and t.OBJECT_NAME ='''||v_tableName||''';

                if v_count = 0 then
                  v_sql := '''||v_tmp||''';
                  EXECUTE IMMEDIATE v_sql;
                end if;
              end;';

           insert into dict_t_log (logid, objecttype, logcontent,orderid) values (sys_guid(), '0TABLE['||v_tab_rec.object_name||']', v_sql,v_i);
           v_i:=v_i+1;
       end if;
   end loop;

   -- 2.处理业务表和代码表列的表更
   select count(*) into v_count from dict_t_factor t where t.dbversion > v_timeflag;
   --清除脏数据
   delete from dict_t_factor t
    where t.tableid not in (select tableid from  dict_t_model);
   --------------列处理-------------
   if v_count > 0 then
       --处理删除的列
       for v_log_rec in (select xxx.tableid ,xxx.columnid ,xxx.DBCOLUMNNAME
                           from p#dict_t_factor xxx
                          where  xxx.insertVersion < v_timeflag
                            and xxx.dbVersion > v_timeflag
                            and xxx.datatype <> '4' and exists(select 1 from dict_t_model mo where xxx.tableid=mo.tableid and mo.INSERTVERSION<v_timeflag and instr(v_tables,','||dbtablename,1,1)>0 and rownum <2 )
                            and Status<>'1'
                            and PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') and Year=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('YEAR')
                         ) loop
               -- 取得表名
               select dbtablename into v_modeldbname
                 from (select dbtablename
                         from dict_t_model
                        where dict_t_model.tableid = v_log_rec.tableid);
               --判断p#的物理表是否存在
               select count(*) into v_count3 from user_objects where object_type='TABLE' and object_name='P#'||v_modeldbname;
               if v_count3 > 0 then
                 v_modeldbname:='P#'||v_modeldbname;
               end if;

               v_sql :=
                 'declare
                    v_count integer := 0;
                    v_dbtabname    varchar2(32);
                    v_dbcolumnname varchar2(32);
                    v_sql          varchar2(10000);
                  begin
                    v_dbtabname:='''||upper(v_modeldbname)||''';
                    select dbcolumnname into v_dbcolumnname from dict_t_factor where tableid='''||v_log_rec.tableid||''' and columnid ='''||v_log_rec.columnid||''';
                    select count(*)
                      into v_count
                      from user_tab_columns t
                     where t.TABLE_NAME = upper(v_dbtabname)
                       and t.COLUMN_NAME =upper(v_dbcolumnname);
                    v_sql:=''alter table ''||upper(v_dbtabname)||'' drop column ''||upper(v_dbcolumnname);
                    if v_count > 0 then
                       EXECUTE IMMEDIATE v_sql;
                    end if;
                  end;';
               insert into dict_t_log (logid, objecttype, logcontent,orderid) values (sys_guid(), '1TABLE:DEL['||upper(v_modeldbname)||']{'||v_log_rec.DBCOLUMNNAME||'}', v_sql,v_i);
               v_i:=v_i+1;
       end loop;

      --处理修改的列
      for v_log_rec in (select xxx.tableid ,xxx.columnid ,upper(xxx.DBCOLUMNNAME) DBCOLUMNNAME,datalength,nvl(scale,0) scale, case when datatype=1 then 'number('||datalength||')' when datatype=2 then 'number('||datalength||','||scale||')' when (datatype=3 or datatype=6) and datalength=1 then 'CHAR(1)' when (datatype=3 or datatype=6) and datalength>1 then 'VARCHAR2('||datalength||')' when datatype=7 then 'VARCHAR2(4000)' else 'NONO' end
                             factorformat,xxx.DEFAULTVALUE,xxx.NULLABLE isempty, 1 as tabletype,xxx.datatype
                           from dict_t_factor xxx
                          where xxx.insertVersion < v_timeflag
                            and xxx.dbVersion > v_timeflag
                            and xxx.datatype <> '4' and exists(select 1 from dict_t_model mo where xxx.tableid=mo.tableid and mo.INSERTVERSION<v_timeflag and instr(v_tables,','||dbtablename,1,1)>0 and rownum <2 )
                         ) loop
           -- 取得表名
               select dbtablename into v_modeldbname
                 from (select dbtablename
                         from dict_t_model
                        where dict_t_model.tableid = v_log_rec.tableid
                      );
               --判断p#的物理表是否存在
               select count(*) into v_count3 from user_objects where object_type='TABLE' and object_name='P#'||v_modeldbname;
               if v_count3 > 0 then
                 v_modeldbname:='P#'||v_modeldbname;
               end if;

            --默认值
               v_tmp:=' ';
               if upper(v_log_rec.DEFAULTVALUE) = 'SYSDATE' then --缺省值为SYSDATE
                   v_tmp :=' default SYSDATE ';
               elsif upper(v_log_rec.DEFAULTVALUE) = 'SYS_GUID()' then  --缺省值为SYS_GUID()
                   v_tmp := ' default SYS_GUID() ';
               elsif v_log_rec.DEFAULTVALUE is not null and instr(upper(v_log_rec.factorformat),'CHAR')>0 then  --缺省值字符
                   v_tmp := ' default '||replace(v_log_rec.DEFAULTVALUE,'''','''''')||'';
               elsif v_log_rec.DEFAULTVALUE is not null and instr(upper(v_log_rec.factorformat),'CHAR')=0 then  --缺省值数字
                   v_tmp := ' default '||nvl(v_log_rec.DEFAULTVALUE,0);
               else
                   v_tmp := ' default NULL';
               end if;
           v_sql :=
                 'declare
                     v_modeldbname  varchar2(32);
                     v_factordbname varchar2(32);
                     v_count integer := 0;
                     v_defaultvalue varchar2(100);
                  begin
                      v_modeldbname:='''||v_modeldbname||''';
                      select upper(dbcolumnname) into v_factordbname from dict_t_factor where tableid='''||v_log_rec.tableid||''' and columnid='''||v_log_rec.columnid||''';
                      --判断长度是否
                     select count(*) into v_count from user_tab_columns t where t.TABLE_NAME = v_modeldbname and t.COLUMN_NAME = v_factordbname and (('||v_log_rec.datatype||' not in (1,2) and t.data_length<>'||v_log_rec.datalength||') or ('||v_log_rec.datatype||' in (1,2) and (t.data_precision<>'||v_log_rec.datalength||' or nvl(t.Data_scale,0)<>'||v_log_rec.scale||'))) ;
                     if v_count = 1 then
                        EXECUTE IMMEDIATE '' alter table  ''||v_modeldbname|| '' modify ''||v_factordbname|| ''  '||v_log_rec.factorformat||''';
                     end if;
                     --判断是否列名修改
                     select count(*) into v_count from user_tab_columns t where t.TABLE_NAME = v_modeldbname and t.COLUMN_NAME = v_factordbname;
                     if v_count = 1 and v_factordbname <> '''||v_log_rec.dbcolumnName||''' then
                        EXECUTE IMMEDIATE '' alter table  ''||v_modeldbname|| '' rename column ''||v_factordbname|| '' to '||v_log_rec.dbcolumnName||''';
                     end if;
                  end;';
               insert into dict_t_log (logid, objecttype, logcontent,orderid) values (sys_guid(), '2TABLE:MOD['||upper(v_modeldbname)||']{'||v_log_rec.DBCOLUMNNAME||'}', v_sql,v_i);
               v_i:=v_i+1;
       end loop;

       --处理新增的列
       for v_log_rec in (select xxx.tableid ,xxx.columnid ,xxx.DBCOLUMNNAME, case when datatype=1 then 'number('||datalength||')' when datatype=2 then 'number('||datalength||','||scale||')' when (datatype=3 or datatype=6) and datalength=1 then 'CHAR(1)' when (datatype=3 or datatype=6) and datalength>1 then 'VARCHAR2('||datalength||')' when datatype=7 then 'VARCHAR2(4000)' else 'NONO' end
                             factorformat,xxx.DEFAULTVALUE,xxx.NULLABLE isempty, 1 as tabletype
                           from dict_t_factor xxx
                          where  xxx.insertVersion > v_timeflag
                            and xxx.dbVersion > v_timeflag
                            and xxx.datatype <> '4' and exists(select 1 from dict_t_model mo where xxx.tableid=mo.tableid and mo.INSERTVERSION<v_timeflag and instr(v_tables,','||dbtablename,1,1)>0 and rownum <2 )
                         ) loop

               -- 取得表名
               select dbtablename into v_modeldbname
                 from (select dbtablename
                         from dict_t_model
                        where dict_t_model.tableid = v_log_rec.tableid
                     );
               --判断p#的物理表是否存在
               select count(*) into v_count3 from user_objects where object_type='TABLE' and object_name='P#'||v_modeldbname;
               if v_count3 > 0 then
                 v_modeldbname:='P#'||v_modeldbname;
               end if;

               v_sql := 'alter table '|| upper(v_modeldbname) ||' add '||v_log_rec.DBCOLUMNNAME||'  '||v_log_rec.factorformat;

               -- 缺省值
               if upper(v_log_rec.DEFAULTVALUE) = 'SYSDATE' then --缺省值为SYSDATE
                   v_sql := v_sql ||' default SYSDATE ';
               elsif upper(v_log_rec.DEFAULTVALUE) = 'SYS_GUID()' then  --缺省值为SYS_GUID()
                   v_sql := v_sql ||' default SYS_GUID() ';
               elsif v_log_rec.DEFAULTVALUE is not null and instr(upper(v_log_rec.factorformat),'CHAR')>0 then  --缺省值字符
                   v_sql := v_sql ||' default '||replace(v_log_rec.DEFAULTVALUE,'''','''''')||'';
               elsif v_log_rec.DEFAULTVALUE is not null and instr(upper(v_log_rec.factorformat),'CHAR')=0 then  --缺省值数字
                   v_sql := v_sql ||' default '||nvl(v_log_rec.DEFAULTVALUE,0);
               end if;

               -- nullable
               if v_log_rec.isempty = '0' and v_log_rec.tabletype=1 then
                   v_sql := v_sql ||' not null ';
               end if;

               v_sql :=
                 'declare
                    v_sql   clob;
                    v_count integer := 0;
                  begin
                    select count(*)
                      into v_count
                      from user_tab_columns t
                     where t.TABLE_NAME = '''||upper(v_modeldbname)||'''
                       and t.COLUMN_NAME = '''||v_log_rec.dbcolumnname||''';

                    if v_count = 0 then
                       v_sql := '''||v_sql||''';
                       EXECUTE IMMEDIATE v_sql;
                    end if;
                  end;';
               insert into dict_t_log (logid, objecttype, logcontent,orderid) values (sys_guid(), '3TABLE:INSERT['||upper(v_modeldbname)||']{'||v_log_rec.DBCOLUMNNAME||'}', v_sql,v_i);
               v_i:=v_i+1;
       end loop;
   end if;
end DICT_SYNCHRONIZE_TABLES;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>INIT_DEFAULTPARTITION</OBJECT_NAME>
      <SQL_COMMENT>初始化分区存储过程</SQL_COMMENT>
      <SQL_CONTENT><![CDATA[
CREATE OR REPLACE PROCEDURE INIT_DEFAULTPARTITION(P_DEFAULTYEAR     VARCHAR2,
                                                  P_DEFAULTPROVINCE VARCHAR2) IS
  V_SQL          VARCHAR2(3000);
  UPPER_PROVINCE VARCHAR2(32);
  V_DEFAULTTABLESPACE VARCHAR2(100);
BEGIN
  SELECT DEFAULT_TABLESPACE INTO V_DEFAULTTABLESPACE FROM USER_USERS;
  V_SQL := 'DELETE FROM  PUB_T_PARTITION_DIVID';
  EXECUTE IMMEDIATE V_SQL;
  SELECT (CASE
           WHEN SUBSTR('' || P_DEFAULTPROVINCE || '', -2, 2) = '00' THEN
            SUBSTR('' || P_DEFAULTPROVINCE || '',
                   1,
                   LENGTH('' || P_DEFAULTPROVINCE || '') - 2)
           ELSE
            '' || P_DEFAULTPROVINCE || ''
         END)
    INTO UPPER_PROVINCE
    FROM DUAL;
  IF UPPER_PROVINCE <> P_DEFAULTPROVINCE THEN
    V_SQL := 'INSERT INTO  PUB_T_PARTITION_DIVID  (DISTRICTID, ID_TABSPACE, YEAR) VALUES (''' ||
             UPPER_PROVINCE || ''', ''' || V_DEFAULTTABLESPACE ||''', ''*'')';
    EXECUTE IMMEDIATE V_SQL;
    V_SQL := 'INSERT INTO  PUB_T_PARTITION_DIVID  (DISTRICTID, ID_TABSPACE, YEAR) VALUES (''' ||
             UPPER_PROVINCE || ''', ''' || V_DEFAULTTABLESPACE ||''', ''' || P_DEFAULTYEAR ||
             ''')';
    EXECUTE IMMEDIATE V_SQL;
  END IF;
  V_SQL := 'INSERT INTO  PUB_T_PARTITION_DIVID  (DISTRICTID, ID_TABSPACE, YEAR) VALUES (''' ||
           P_DEFAULTPROVINCE || ''', ''' || V_DEFAULTTABLESPACE ||''', ''*'')';
  EXECUTE IMMEDIATE V_SQL;
  V_SQL := 'INSERT INTO  PUB_T_PARTITION_DIVID  (DISTRICTID, ID_TABSPACE, YEAR) VALUES (''' ||
           P_DEFAULTPROVINCE || ''', ''' || V_DEFAULTTABLESPACE ||''', ''' || P_DEFAULTYEAR ||
           ''')';
  EXECUTE IMMEDIATE V_SQL;
  SYS_P_ADDPARTITION_ALL();
  SYS_P_ADD_PARTITION_TRIGGER();
END INIT_DEFAULTPARTITION;
      ]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_SYNCHRONIZE_VIEWS</OBJECT_NAME>
      <SQL_COMMENT>同步视图</SQL_COMMENT>
      <SQL_CONTENT><![CDATA[
CREATE OR REPLACE PROCEDURE DICT_SYNCHRONIZE_VIEWS(v_tables varchar2) is
  v_sql  clob;
  v_tmp  varchar2(30000);
  v_i    int;
  V_POS  NUMBER;
  V_NAME VARCHAR2(30);
  V_CNT  NUMBER;
begin
  --处理视图
  V_TMP := UPPER(V_TABLES);
  V_I   := 1;
  LOOP
    EXIT WHEN V_TMP IS NULL;
    V_POS := INSTR(V_TMP, ',');
    IF V_POS > 0 THEN
      V_NAME := SUBSTR(V_TMP, 1, V_POS - 1);
      V_TMP  := SUBSTR(V_TMP, V_POS + 1);
    ELSE
      V_NAME := V_TMP;
      V_TMP  := '';
    END IF;
    SELECT COUNT(*)
      INTO V_CNT
      FROM USER_OBJECTS
     WHERE OBJECT_NAME = V_NAME
       AND OBJECT_TYPE = 'VIEW'
       AND EXISTS (SELECT 1
              FROM DICT_T_MODEL
             WHERE DBTABLENAME = V_NAME
               AND TABLETYPE = '2');
    IF V_CNT > 0 THEN
      SELECT DBMS_METADATA.GET_DDL('VIEW', V_NAME, USER)
        INTO V_SQL
        FROM DUAL;
      V_SQL := REPLACE(V_SQL, '"' || USER || '".', '');
      INSERT INTO DICT_T_LOG
        (LOGID, OBJECTTYPE, LOGCONTENT, ORDERID)
      VALUES
        (SYS_GUID(), '5VIEW[' || V_NAME || ']', V_SQL, V_I);
      V_I := V_I + 1;
    END IF;
  END LOOP;
end DICT_SYNCHRONIZE_VIEWS;
      ]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_SYNCHRONIZE_DOWN</OBJECT_NAME>
      <SQL_COMMENT>下发对象同步</SQL_COMMENT>
      <SQL_CONTENT><![CDATA[
CREATE OR REPLACE PROCEDURE DICT_SYNCHRONIZE_DOWN is
   v_modeldbname    varchar2(32);
   v_temp_sql       varchar(30000);
   v_sql            varchar(30000);
   v_sql_Bak        varchar(30000);
   
   v_isbak          char(1);
   v_count          integer := 0;
   v_tableName      varchar2(32);
   v_factordbname   varchar2(32);
   v_TABSPACE       varchar2(32);
   v_tmp            varchar(30000);
   v_datatype       varchar2(32);
   V_NAME VARCHAR2(30);
begin
   -- 2.处理业务表和代码表列的表更
   --清除脏数据
   delete from dict_t_factor t where t.tableid not in (select tableid from  dict_t_model);
   --delete from dict_t_factorcode t where t.tableid not in (select tableid from  dict_t_modelcode);
   --------------列处理-------------
   --不存在删除的情况
   --处理修改的列
   for v_log_rec in (Select TableID,Columnid,DbColumnName,DataLength,nvl(scale,0) Scale,case when datatype=1 then 'number('||datalength||')' when datatype=2 then 'number('||datalength||','||scale||')' when (datatype=3 or datatype=6) and datalength=1 then 'CHAR(1)' when (datatype=3 or datatype=6) and datalength>1 then 'VARCHAR2('||datalength||')' when datatype=7 then 'VARCHAR2(4000)' else 'NONO' end FactorFormat,DEFAULTVALUE,NULLABLE IsEmpty,DataType
                       from Dict_t_Factor_S FS where DataType<> '4' and exists(select 1 from Dict_t_Model where Fs.tableid=Dict_t_model.tableid) and exists(select 1 from Dict_t_Factor where Fs.tableid=Dict_t_Factor.tableid and Fs.ColumnID=Dict_t_Factor.Columnid)) loop
       -- 取得表名
       select dbtablename into v_modeldbname
         from (select dbtablename
                 from dict_t_model
                where tableid = v_log_rec.tableid
              );
       --判断p#的物理表是否存在
       v_Name:=v_modeldbname;
       SELECT COUNT(*) INTO v_count FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME=V_NAME;
       IF v_count < 1 THEN
         SELECT COUNT(*) INTO v_count FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='P#'||V_NAME;
         IF v_count > 0 THEN
           v_modeldbname:='P#'||V_NAME;
         ELSE
           RAISE_APPLICATION_ERROR(-20001,'没有与之对应的物理表，此表名为：'||v_Name);
         END IF;
       ELSE
         v_modeldbname:=V_NAME;
       END IF;
       --修改表结构
       --列名取原始表的列名
       select upper(dbcolumnname),datatype into v_factordbname,v_datatype from Dict_t_Factor where tableid=v_log_rec.tableid and columnid=v_log_rec.columnid;
       --判断长度是否
       select count(*) into v_count from user_tab_columns t where t.TABLE_NAME = v_modeldbname and t.COLUMN_NAME = v_factordbname and (v_log_rec.datatype<>v_datatype or (v_log_rec.datatype not in (1,2) and t.data_length<>v_log_rec.datalength) or (v_log_rec.datatype in (1,2) and (t.data_precision<>v_log_rec.datalength or nvl(t.Data_scale,0)<>v_log_rec.scale))) ;
       if v_count = 1 then
          EXECUTE IMMEDIATE ' alter table  '||v_modeldbname|| ' modify '||v_factordbname||'  '||v_log_rec.factorformat;
          --修改bak表
          select count(*) into v_isbak from user_objects where object_name=v_modeldbname||'_BAK' and object_type='TABLE';
          if v_isbak ='1' then
            EXECUTE IMMEDIATE ' alter table  '||v_modeldbname|| '_BAK modify '||v_factordbname||'  '||v_log_rec.factorformat;
          end if;
       end if;
       --判断是否列名修改
       select count(*) into v_count from user_tab_columns t where t.TABLE_NAME = v_modeldbname and t.COLUMN_NAME = v_factordbname;
       if v_count = 1 and v_factordbname <> v_log_rec.dbcolumnName then
          EXECUTE IMMEDIATE ' alter table  '||v_modeldbname|| ' rename column '||v_factordbname|| ' to '||v_log_rec.dbcolumnName;
          --修改bak表
          select count(*) into v_isbak from user_objects where object_name=v_modeldbname||'_BAK' and object_type='TABLE';
          if v_isbak ='1' then
            EXECUTE IMMEDIATE ' alter table  '||v_modeldbname||'_BAK rename column '||v_factordbname|| ' to '||v_log_rec.dbcolumnName;
          end if;
       end if;
       --同步Factor表的数据
       delete from dict_t_Factor where tableid=v_log_rec.tableid and columnID=v_log_rec.columnID;
       --插入表中列记录
       select substr(connstra(','||column_Name),2) into v_tmp from user_tab_cols where table_name='DICT_T_FACTOR';
       v_Sql:='insert into dict_t_factor('||v_tmp||') select '||v_tmp||' from Dict_t_Factor_S where tableid='''||v_log_rec.tableid||''' and columnid='''||v_log_rec.columnID||'''';
       EXECUTE IMMEDIATE V_Sql;
   end loop;
   --处理新增的列
   for v_log_Ins in (Select TableID,Columnid,DbColumnName,DataLength,nvl(scale,0) Scale,case when datatype=1 then 'number('||datalength||')' when datatype=2 then 'number('||datalength||','||scale||')' when (datatype=3 or datatype=6) and datalength=1 then 'CHAR(1)' when (datatype=3 or datatype=6) and datalength>1 then 'VARCHAR2('||datalength||')' when datatype=7 then 'VARCHAR2(4000)' else 'NONO' end FactorFormat,DEFAULTVALUE,NULLABLE IsEmpty,DataType
                       from Dict_t_Factor_S FS where DataType<> '4' and exists(select 1 from Dict_t_Model where Fs.tableid=Dict_t_model.tableid) and not exists(select 1 from Dict_t_Factor where Fs.tableid=Dict_t_Factor.tableid and Fs.ColumnID=Dict_t_Factor.Columnid)) loop

           -- 取得表名
           select dbtablename into v_modeldbname
             from (select dbtablename
                     from dict_t_model
                    where dict_t_model.tableid = v_log_Ins.tableid
                 );
           --判断p#的物理表是否存在
           v_Name:=v_modeldbname;
           SELECT COUNT(*) INTO v_count FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME=V_NAME;
           IF v_count < 1 THEN
             SELECT COUNT(*) INTO v_count FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='P#'||V_NAME;
             IF v_count > 0 THEN
               v_modeldbname:='P#'||V_NAME;
             ELSE
               RAISE_APPLICATION_ERROR(-20001,'表名有问题，此表名为：'||v_Name);
             END IF;
           ELSE
             v_modeldbname:=V_NAME;
           END IF;
           v_sql := 'alter table '|| upper(v_modeldbname) ||' add '||v_log_Ins.DBCOLUMNNAME||'  '||v_log_Ins.factorformat;
           --数值列默认值为0
           if upper(v_log_Ins.DEFAULTVALUE) = 'SYSDATE' then --缺省值为SYSDATE
             V_TEMP_SQL := V_TEMP_SQL ||' default SYSDATE ';
           elsif upper(v_log_Ins.DEFAULTVALUE) = 'SYS_GUID()' then  --缺省值为SYS_GUID()
               V_TEMP_SQL := V_TEMP_SQL ||' default SYS_GUID() ';
           elsif instr(upper(v_log_Ins.factorformat),'NUMBER')>0 then --缺省值数字
                V_TEMP_SQL := V_TEMP_SQL ||' default 0 ';
           end if;
           --增加列
           select count(*) into v_count from user_tab_columns t where t.TABLE_NAME = upper(v_modeldbname) and t.COLUMN_NAME =v_log_Ins.dbcolumnname;
           if v_count = 0 then
              EXECUTE IMMEDIATE v_sql;
              --修改bak表              
              select count(*) into v_isbak from user_objects where object_name=v_modeldbname||'_BAK' and object_type='TABLE';
              if v_isbak ='1' then
                v_sql:=replace(v_Sql,'alter table '|| upper(v_modeldbname),'alter table '|| upper(v_modeldbname) ||'_BAK');
                EXECUTE IMMEDIATE v_Sql;
              end if;
           end if;
           --同步Factor表的数据
           delete from dict_t_Factor where tableid=v_log_Ins.tableid and columnID=v_log_Ins.columnID;
           --插入表中列记录
           select substr(connstra(','||column_Name),2) into v_tmp from user_tab_cols where table_name='DICT_T_FACTOR';
           v_Sql:='insert into dict_t_factor('||v_tmp||') select '||v_tmp||' from Dict_t_Factor_S where tableid='''||v_log_Ins.tableid||''' and columnid='''||v_log_Ins.columnID||'''';
           EXECUTE IMMEDIATE V_Sql;
   end loop;
   --这里运行次序必须如此
   --处理表属性修改的情况
   for v_model_m in (select DBTABLENAME,tableid,'1' Model_Flag,isPartition,nvl(isbak,'0') ISBak from Dict_t_Model_S MS where (select count(*) from dict_t_model mo where mo.tableid=ms.tableid )>0 ) loop
     --判断是否在代码表和业务表的登记表中
     v_name:=v_model_m.DBTABLENAME;
     SELECT COUNT(*) INTO v_count FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME=V_NAME;
     IF v_count < 1 THEN
         SELECT COUNT(*) INTO v_count FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='P#'||V_NAME;
         IF v_count>0  THEN
           V_TABLENAME:='P#'||V_NAME;
         else
           RAISE_APPLICATION_ERROR(-20001,'不存在与之对应的物理表，请检查：'||v_Name);
         END IF;
     ELSE
         V_TABLENAME:=V_NAME;
     END IF;
     V_TABLENAME:=V_TABLENAME||'_BAK';
     select count(*) into v_isbak from user_objects where object_name=v_tableName||'_BAK' and object_type='TABLE';
     If v_model_m.isbak='1' and v_isbak='0' then
       V_TEMP_SQL:='create table '||v_tableName||'(';
       if v_model_m.Ispartition='1' then
         V_TEMP_SQL:=V_TEMP_SQL||'YEAR CHAR(4) not null,PROVINCE VARCHAR2(9) not null,TASKID VARCHAR2(32) NOT NULL,BAKVERSION NUMBER(5) DEFAULT 0 NOT NULL,DBVERSION TIMESTAMP(6) default SYSDATE,STATUS  CHAR(1) default 1 not null';
       else
         V_TEMP_SQL:=V_TEMP_SQL||',TASKID VARCHAR2(32) NOT NULL,BAKVERSION NUMBER(5) DEFAULT 0 NOT NULL,DBVERSION TIMESTAMP(6) default SYSDATE,STATUS  CHAR(1) default 1 not null';
       end if;
       for v_Factor_S in (Select TableID,Columnid,DbColumnName,DataLength,nvl(scale,0) Scale,case when datatype=1 then 'number('||datalength||')' when datatype=2 then 'number('||datalength||','||scale||')' when (datatype=3 or datatype=6) and datalength=1 then 'CHAR(1)' when (datatype=3 or datatype=6) and datalength>1 then 'VARCHAR2('||datalength||')' when datatype=7 then 'VARCHAR2(4000)' else 'NONO' end FactorFormat,DEFAULTVALUE,NULLABLE IsEmpty,DataType
                      from Dict_t_Factor_S FS where DataType<> '4' and Fs.tableid=v_model_m.Tableid and upper(DbColumnName) not in ('YEAR','PROVINCE','DBVERSION','STATUS'))loop
         V_TEMP_SQL:=V_TEMP_SQL||','||v_Factor_S.DBCOLUMNNAME||'  '||v_Factor_S.factorformat;
         --
         if v_model_m.Model_Flag='1' and upper(v_Factor_S.dbcolumnName) in ('DATAKEY') then
           V_TEMP_SQL := V_TEMP_SQL||' default SYS_GUID() not NULL';
         else
           --数值列默认值为0
           --levelno    NUMBER(1)在此增加默认值
           if upper(v_Factor_S.DEFAULTVALUE) = 'SYSDATE' then --缺省值为SYSDATE
             V_TEMP_SQL := V_TEMP_SQL ||' default SYSDATE ';
           elsif upper(v_Factor_S.DEFAULTVALUE) = 'SYS_GUID()' then  --缺省值为SYS_GUID()
               V_TEMP_SQL := V_TEMP_SQL ||' default SYS_GUID() ';
           elsif instr(upper(v_Factor_S.factorformat),'NUMBER')>0 then --缺省值数字
                V_TEMP_SQL := V_TEMP_SQL ||' default 0 ';
           end if;
         end if;
       end loop;
        --
        V_TEMP_SQL:=V_TEMP_SQL||')';
        --增加分区部分
        if v_model_m.Ispartition='1' then
           v_TABSPACE:='';
           v_sql :=V_TEMP_SQL||' partition by list (PROVINCE) subpartition by list (YEAR) (partition P87 values (''87'') '||' ( subpartition P87_Y2016 values (''2016'') '||'))';
        End if;
        SELECT COUNT(*) INTO V_COUNT FROM USER_OBJECTS T WHERE T.OBJECT_TYPE='TABLE' AND T.OBJECT_NAME =V_TABLENAME;
        IF V_COUNT = 0 THEN
          print_output(v_Sql);
          EXECUTE IMMEDIATE V_SQL;
        END IF;
        --增加索引部分
        if v_model_m.Ispartition='1' then
          v_temp_sql:='alter table '||V_TABLENAME||' add constraint '||substr('PK_'||v_tableName,1,30)||' primary key (PROVINCE,YEAR,STATUS,TASKID, BAKVERSION';
        else
          v_temp_sql:='alter table '||V_TABLENAME||' add constraint '||substr('PK_'||v_tableName,1,30)||' primary key (STATUS,TASKID, BAKVERSION' ;
        end if;
        v_tmp:='';
        SELECT COUNT(*) INTO V_COUNT FROM Dict_t_Factor_S FS WHERE Fs.tableid=v_model_m.Tableid and upper(dbcolumnName)='AGENCYID';
        IF V_COUNT >0 THEN
          v_tmp:=v_tmp||',AGENCYID';
        END IF;
        SELECT COUNT(*) INTO V_COUNT FROM Dict_t_Factor_S FS WHERE Fs.tableid=v_model_m.Tableid and upper(dbcolumnName)='DATAKEY';
        IF V_COUNT >0 THEN
          v_tmp:=v_tmp||',DATAKEY';
        END IF;
        if v_tmp is null then
          RAISE_APPLICATION_ERROR(-20001,'索引有问题，请检查：'||v_temp_Sql||v_tmp||')');
        else
          v_sql:=v_temp_Sql||v_tmp||')';
          print_output(v_Sql);
          EXECUTE IMMEDIATE V_SQL;
        end if;
      End if;
      If v_model_m.isbak='0' and v_isbak='1' then
        select count(*) into v_count from user_objects where object_Name=V_TABLENAME and object_type='TABLE';
        if v_count>0 then
           v_sql:='drop table '||V_TABLENAME;
           --EXECUTE IMMEDIATE V_SQL;
        end if;
        select count(*) into v_count from user_objects where object_Name=v_Name||'_BAK' and object_type='VIEW';
        if v_count>0 then
           v_sql:='drop VIEW '||v_Name||'_BAK';
           --EXECUTE IMMEDIATE V_SQL;
        end if;
      end if;
      --同步model和Factor表的数据
      delete from dict_t_model where tableid=v_model_m.tableid;
      --插入表记录
      select substr(connstra(','||column_Name),2) into v_tmp from user_tab_cols where table_name='DICT_T_MODEL';
      v_Sql:='insert into dict_t_model('||v_tmp||') select '||v_tmp||' from Dict_t_Model_S where tableid='''||v_model_m.tableid||'''';
      EXECUTE IMMEDIATE V_Sql;
   end loop;
   --处理新增表
   for v_model_S in (select DBTABLENAME,tableid,'1' Model_Flag,isPartition,nvl(isbak,'0') ISBak from Dict_t_Model_S MS where (select count(*) from dict_t_model mo where mo.tableid=ms.tableid )<1 ) loop
     --判断是否在代码表和业务表的登记表中
     v_name:=v_model_S.DBTABLENAME;
     SELECT COUNT(*) INTO v_count FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME=V_NAME;
     IF v_count < 1 THEN
       IF v_model_S.isPartition='1' then
         SELECT COUNT(*) INTO v_count FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='P#'||V_NAME;
         IF v_count<1  THEN
           V_TABLENAME:='P#'||V_NAME;
         else
           RAISE_APPLICATION_ERROR(-20001,'已存在与之对应的物理表，请检查：'||v_Name);
         END IF;
       ELSE
         V_TABLENAME:=V_NAME;
       END IF;
     END IF;
     V_TEMP_SQL:='create table '||v_tableName||'(';
     if v_model_S.Ispartition='1' then
       V_TEMP_SQL:=V_TEMP_SQL||'YEAR CHAR(4) not null,PROVINCE VARCHAR2(9) not null,DBVERSION TIMESTAMP(6) default SYSDATE,STATUS  CHAR(1) default 1 not null';
     else
       V_TEMP_SQL:=V_TEMP_SQL||',DBVERSION TIMESTAMP(6) default SYSDATE,STATUS  CHAR(1) default 1 not null';
     end if;
     for v_Factor_S in (Select TableID,Columnid,DbColumnName,DataLength,nvl(scale,0) Scale,case when datatype=1 then 'number('||datalength||')' when datatype=2 then 'number('||datalength||','||scale||')' when (datatype=3 or datatype=6) and datalength=1 then 'CHAR(1)' when (datatype=3 or datatype=6) and datalength>1 then 'VARCHAR2('||datalength||')' when datatype=7 then 'VARCHAR2(4000)' else 'NONO' end FactorFormat,DEFAULTVALUE,NULLABLE IsEmpty,DataType
                    from Dict_t_Factor_S FS where DataType<> '4' and Fs.tableid=v_model_S.Tableid and upper(DbColumnName) not in ('YEAR','PROVINCE','DBVERSION','STATUS'))loop
       V_TEMP_SQL:=V_TEMP_SQL||','||v_Factor_S.DBCOLUMNNAME||'  '||v_Factor_S.factorformat;
       --
       if v_model_S.Model_Flag='1' and upper(v_Factor_S.dbcolumnName) in ('DATAKEY') then
         V_TEMP_SQL := V_TEMP_SQL||' default SYS_GUID() not NULL';
       else
         --数值列默认值为0
         --levelno    NUMBER(1)在此增加默认值
         if upper(v_Factor_S.DEFAULTVALUE) = 'SYSDATE' then --缺省值为SYSDATE
           V_TEMP_SQL := V_TEMP_SQL ||' default SYSDATE ';
         elsif upper(v_Factor_S.DEFAULTVALUE) = 'SYS_GUID()' then  --缺省值为SYS_GUID()
             V_TEMP_SQL := V_TEMP_SQL ||' default SYS_GUID() ';
         elsif instr(upper(v_Factor_S.factorformat),'NUMBER')>0 then --缺省值数字
              V_TEMP_SQL := V_TEMP_SQL ||' default 0 ';
         end if;
       end if;
     end loop;
      --
      V_TEMP_SQL:=V_TEMP_SQL||')';
      --增加分区部分
      if v_model_S.Ispartition='1' then
        v_TABSPACE:='';
        v_sql :=V_TEMP_SQL||' partition by list (PROVINCE) subpartition by list (YEAR) (partition P87 values (''87'') '||' ( subpartition P87_Y2016 values (''2016'') '||'))';
      end if;
      SELECT COUNT(*) INTO V_COUNT FROM USER_OBJECTS T WHERE T.OBJECT_TYPE='TABLE' AND T.OBJECT_NAME =V_TABLENAME;
      IF V_COUNT = 0 THEN
        EXECUTE IMMEDIATE V_SQL;
        --备份语法
        V_Sql_Bak:=v_sql;
      END IF;
      --增加索引部分
      if v_model_S.Ispartition='1' then
        v_temp_sql:='alter table '||V_TABLENAME||' add constraint '||substr('PK_'||v_tableName,1,30)||' primary key (PROVINCE,YEAR,STATUS';
      else
        v_temp_sql:='alter table '||V_TABLENAME||' add constraint '||substr('PK_'||v_tableName,1,30)||' primary key (STATUS' ;
      end if;
      v_tmp:='';
      SELECT COUNT(*) INTO V_COUNT FROM Dict_t_Factor_S FS WHERE Fs.tableid=v_model_S.Tableid and upper(dbcolumnName)='AGENCYID';
      IF V_COUNT >0 THEN
        v_tmp:=v_tmp||',AGENCYID';
      END IF;
      SELECT COUNT(*) INTO V_COUNT FROM Dict_t_Factor_S FS WHERE Fs.tableid=v_model_S.Tableid and upper(dbcolumnName)='DATAKEY';
      IF V_COUNT >0 THEN
        v_tmp:=v_tmp||',DATAKEY';
      END IF;
      if v_tmp is null then
        RAISE_APPLICATION_ERROR(-20001,'索引有问题，请检查：'||v_temp_Sql||v_tmp||')');
      else
        v_sql:=v_temp_Sql||v_tmp||')';
        EXECUTE IMMEDIATE V_SQL;
        --备份索引语法
        v_Temp_Sql:=V_Sql;
      end if;
      select count(*) into v_isbak from user_objects where object_name=v_tableName||'_BAK' and object_type='TABLE';
      if v_model_S.Isbak='1' and v_isbak='0' then
        --创建备份表
        v_Sql_Bak:=replace(v_Sql_Bak,'create table '||v_tableName,'create table '||v_tableName||'_BAK');
        v_Sql_Bak:=replace(v_Sql_Bak,',DBVERSION TIMESTAMP(6)',',TASKID VARCHAR2(32) NOT NULL,BAKVERSION NUMBER(5) DEFAULT 0 NOT NULL,DBVERSION TIMESTAMP(6)');
        EXECUTE IMMEDIATE v_Sql_Bak;
        --创建备份表的索引
        v_Temp_Sql:=replace(v_Temp_Sql,'alter table '||V_TABLENAME,'alter table '||V_TABLENAME||'_BAK');
        v_Temp_Sql:=replace(v_Temp_Sql,' '||substr('PK_'||v_tableName,1,30)||' ',' '||substr('PK_'||v_tableName||'_BAK',1,30)||' ');
        v_Temp_Sql:=replace(v_Temp_Sql,',STATUS,',',STATUS,TASKID, BAKVERSION,');
        EXECUTE IMMEDIATE v_Temp_Sql;
      end if;
      --同步model和Factor表的数据
      delete from dict_t_model where tableid=v_model_S.tableid;
      delete from dict_t_Factor where tableid=v_model_S.tableid;
      --插入表记录
      select substr(connstra(','||column_Name),2) into v_tmp from user_tab_cols where table_name='DICT_T_MODEL';
      v_Sql:='insert into dict_t_model('||v_tmp||') select '||v_tmp||' from Dict_t_Model_S where tableid='''||v_model_S.tableid||'''';
      EXECUTE IMMEDIATE V_Sql;
      --插入表中列记录
      select substr(connstra(','||column_Name),2) into v_tmp from user_tab_cols where table_name='DICT_T_FACTOR';
      v_Sql:='insert into dict_t_factor('||v_tmp||') select '||v_tmp||' from Dict_t_Factor_S where tableid='''||v_model_S.tableid||'''';
      EXECUTE IMMEDIATE V_Sql;
   end loop;
end DICT_SYNCHRONIZE_DOWN;
      ]]></SQL_CONTENT>
    </SQL>
  </PROCEDURE>
  <VIEW>
    <SQL>
      <OBJECT_NAME>BGT_T_AGENCYDEPT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_AGENCYDEPT AS 
  SELECT AGENCYID,DBVERSION,DEPTID,GUID,STATUS
FROM P#BGT_T_AGENCYDEPT
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'

}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_CHECKSORT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_CHECKSORT AS 
  SELECT APPID,CHECKSORTID,CHECKSORTNAME,DBVERSION,ENDFLAG,LVLID,REMARK,STATUS,SUPERID
FROM P#BGT_T_CHECKSORT
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_CUSCONFIG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_CUSCONFIG AS 
  SELECT CONFIGNAME,
       DBVERSION,
       FUNCID,
       GUID,
       REMARK,
       STATUS,
       USERID,
       TABLEID,
       ORDERID
  FROM P#BGT_T_CUSCONFIG
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_CUSORDER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_CUSORDER AS 
  SELECT COLUMNID, CONFIGID, DBVERSION, GUID, ORDERID, ORDERTYPE, STATUS
  FROM P#BGT_T_CUSORDER
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_DISTRICT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_DISTRICT AS 
  SELECT PROVINCE,
       GUID,
       CODE,
       NAME,
       SUPERGUID,
       ISLEAF,
       LEVELNO,
       '' ALIAS,
       '' PINYIN,
       '' REMARK,
       '' CREATEDATE,
       '' STARTDATE,
       '' ENDDATE,
       '' SRCGUID,
       '' DESGUID,
       '' EMW,
       BGTLEVEL,
       STDCODE,
       DISTRLVL,
       STATUS,
       ZGXIAN,
       ISSELF,
       PROVINCE_SH,
       CITY,
       COUNTY,
       PROVINCE_SHID,
       CITYID,
       COUNTYID,
       YEAR
  FROM CODE_M_DISTRICT
 WHERE YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND CODE LIKE SUBSTR(GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID'),1,LENGTH(GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')) - 2)||'%'
 ORDER BY CODE}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_CUSQUERY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_CUSQUERY AS 
  SELECT COLUMNID,CONFIGID,DBVERSION,GUID,OPERATORTYPE,ORDERID,QUERYVALUE,STATUS
  FROM P#BGT_T_CUSQUERY
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_FORMUALSORTQUERY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_FORMUALSORTQUERY AS 
  select CONTENTCHI,CONTENTENG,DBVERSION,ISLEAF,ITEMID,LVLID,QUERYID,SORTTYPE,STATUS,SUPERID from P#BGT_T_FORMUALSORTQUERY where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') and Year=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_FORMULA_REF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_FORMULA_REF AS 
  SELECT DBVERSION, NAME, REFRESH_ID, STATUS
  FROM P#BGT_T_FORMULA_REF
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_DEPT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_DEPT AS 
  SELECT GUID,
       CODE,
       '[' || CODE || ']' || NAME AS NAME,
       SUPERGUID,
       ISLEAF,
       LEVELNO,
       PROVINCE, YEAR,
       STATUS,
       (SELECT GUID
          FROM CODE_T_DISTRICT
         WHERE CODE = P#FASP_T_PUBDEPARTMENT.PROVINCE) AS DISTRICTID
  FROM P#FASP_T_PUBDEPARTMENT
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND
 YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_FORMULA_REF_RELA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_FORMULA_REF_RELA AS 
  SELECT DBVERSION, RELA_ID, ORDERID, REFRESH_ID, STATUS, TABLEID
  FROM P#BGT_T_FORMULA_REF_RELA
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_USER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_USER AS 
  SELECT GUID AS GUID,
       ADMINTYPE,
       DIVISION AS DEPTID,
       '0' AS ISSUPERMAN,
       '' AS PASSTIMESTAMP,
       '' AS PHOTO,
       (CASE ADMINTYPE
         WHEN 3 THEN
          '0'
         ELSE
          '1'
       END) AS ISADMIN,
       USERTYPE AS USERTYPE,
       STATUS AS STATUS,
       LOGINMODE,
       CODE AS CODE,
       NAME AS NAME,
       CREATEDATE,
       UPDATEDATE,
       OVERDUEDATE,
       PASSWORD AS PASSWORD,
       AGENCY AS ORGID,
       LOGINDATE,
       IDCODE AS IDCARD,
       PHONENUMBER AS TEL,
       EMAIL AS MAIL,
       DIVISION,
       REMARK,
       YEAR,
       PROVINCE,
       PWOUTDATE,
       UPAGENCYID AS UPAGENCYID,
       DBVERSION AS DBVERSION,
       GUID AS USERID,
       CODE AS USERLOGID,
       PASSWORD AS LOGPASSWORD,
       '1' AS ORGTYPE,
       NAME AS USERNAME
  FROM FASP_T_CAUSER
 WHERE STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_OARELATION</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_OARELATION AS 
  SELECT DBVERSION, DOCID, GUID, ORGID, REMARK, STATUS, TASKID, USERID
  FROM P#BGT_T_OARELATION
 WHERE YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_ROLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_ROLE AS 
  SELECT T1.DBVERSION,
       T1.GUID,
       T1.NAME,
       T1.REMARK,
       T1.ROLETYPE,
       '1' AS STATUS,
       T1.GUID AS ROLEID,
       T1.NAME AS ROLENAME,
       T1.AGENCY AS ORGID,
       '' AS USEFLAG,
       T1.REMARK AS DESCRIPTION
  FROM FASP_T_CAROLE T1
 WHERE STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_USERROLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_USERROLE AS 
  SELECT '' AS DBVERSION,
       T1.GUID,
       T1.ROLEGUID AS ROLEID,
       '1' AS STATUS,
       T1.USERGUID AS USERID
  FROM FASP_T_CAUSERROLE T1}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_CACHE_USERROLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_CACHE_USERROLE AS 
  SELECT USERGUID USERID, MAX(DBVERSION) DBVERSION
  FROM FASP_T_CAUSERROLE
 GROUP BY USERGUID}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_SOURTABLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_SOURTABLE AS 
  SELECT DBVERSION, ESTID, SOURMODELID, STATUS
  FROM P#BGT_T_SOURTABLE
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_SYSFUNCDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_SYSFUNCDEF AS 
  SELECT APPID,DBVERSION,DEFTYPE,GUID,ISPASS,NAME,PARAMS,RETVAL,STATUS,TBODY,TITLE FROM P#BGT_T_SYSFUNCDEF WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_USERPAGESET</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_USERPAGESET AS 
  SELECT DATAKEY,DBVERSION,FUNCID,REMARK,STATUS,TYPEID,TYPENAME,TYPEVALUE,USERID
FROM P#BGT_T_USERPAGESET
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_VERSION</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_VERSION AS 
  SELECT DBVERSION, ESTID, STATUS, VERSION_ID, VERSION_NAME, VERSION_CODE
  FROM P#BGT_T_VERSION
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_V_DATA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE FORCE VIEW BGT_V_DATA AS
SELECT CAST('' AS VARCHAR2(200)) AGENCYNAME,
CAST('' AS VARCHAR2(200)) SPFNAME,
CAST('' AS VARCHAR2(200)) AGENCYCODE,
CAST(SYS_GUID() AS VARCHAR2(32)) SPFID,
CAST(SYS_GUID() AS VARCHAR2(32)) AGENCYID,
CAST('' AS VARCHAR2(200)) SPFCODE,
CAST('' AS VARCHAR2(200)) PROJCODE,
CAST(TO_CHAR(SYSDATE,'YYYY') AS VARCHAR2(4)) FINYEAR,
CAST('' AS NUMBER(24,6)) BUDGETNUM,
CAST(SYS_GUID() AS VARCHAR2(32)) PROJTYPEID,
CAST(SYS_GUID() AS VARCHAR2(32)) DATAID,
CAST(SYS_GUID() AS VARCHAR2(32)) SUPERID,
CAST(0 AS NUMBER(28)) LEVELNO,
CAST('' AS VARCHAR2(32)) PROJTYPECODE,
CAST('0' AS CHAR(1)) ISSPF,
CAST('' AS VARCHAR2(32)) ORDERID,
CAST('' AS VARCHAR2(4000)) NEEDUPDATE,
CAST(SYS_GUID() AS VARCHAR2(32)) DATAKEY,
CAST('0' AS CHAR(1)) DATAFLAG FROM DUAL]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_V_PUBFUNDSOURCE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_V_PUBFUNDSOURCE AS 
  SELECT GUID FUNDSOURCEID,
       NAME FUNDSOURCENAME,
       SUPERGUID SUPERID,
       nvl((select 0
             from FASP_V_PUBFUNDSOURCE
            where superid = A1.GUID
              and rownum < 2),
           1) AS ISLEAF,
       LEVELNO,
       CODE
  FROM FASP_V_PUBFUNDSOURCE A1
  union all
 SELECT GUID      FUNDSOURCEID,
       NAME      FUNDSOURCENAME,
       SUPERGUID SUPERID,
              nvl((select 0
             from FASP_V_PUBFUNDSOURCE
            where superid = A2.GUID
              and rownum < 2),
           1) AS ISLEAF,
       LEVELNO,
       CODE
  FROM Fasp_v_Pubbgtsource A2}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CAL_T_CELLSUMSET</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CAL_T_CELLSUMSET AS 
  select DBVERSION,FUNDSOURCEID,GUID,PROJTYPEID,RELATYPE,STATUS,TABLEID from P#CAL_T_CELLSUMSET where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') and Year=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CDT_T_TASKINFO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CDT_T_TASKINFO AS 
  SELECT TASKID,TASKNAME,SUPERTASKID,TASKTYPEID,ROOTTASKID,DISTRICTID,RECEIVEID,TASKLVLID,TASKCODE,TASKCYCLE,DATASTARTDATE, DATAENDDATE,CREATOR,CREATEDATE,TASKDESC,ENDDATE,TASKSTATUS,REMARK,LEVELNO,APPID ,STATUS,ISINSTEAD,ISLEAF
FROM P#CDT_T_TASKINFO
WHERE STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CDT_T_TASKINFO_TS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CDT_T_TASKINFO_TS AS 
  SELECT TASKID,TASKNAME,SUPERTASKID,TASKTYPEID,ROOTTASKID,DISTRICTID,RECEIVEID,TASKLVLID,TASKCODE,TASKCYCLE,DATASTARTDATE, DATAENDDATE,CREATOR,CREATEDATE,TASKDESC,ENDDATE,TASKSTATUS,REMARK,LEVELNO,APPID ,STATUS,ISINSTEAD,ISLEAF,DBVERSION
FROM P#CDT_T_TASKINFO
WHERE STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CDT_T_TASKLOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CDT_T_TASKLOG AS 
  SELECT DBVERSION,DISTRICTID,LOGDATE,LOGDESC,LOGID,NEWSTATUS,OLDSTATUS,OPERATOR,STATUS,TASKID
FROM P#CDT_T_TASKLOG
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'

}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CDT_T_TASKTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CDT_T_TASKTYPE AS 
  SELECT TASKTYPEID,TASKTYPENAME,TASKTYPEDESC,DISTRICTID,ORDERID,TASKBUSITYPE,TASKCYCLE_TYPE,CODERULE,NAMERULE,TARGET_VIEWNAME,STATUS,APPID,PROCESS_TPLID,TRANSFORMTYPE,DBVERSION,COLLECTRANGE,CONFIRMFUNC,ISSUM,SUMCYC,REFPROC,ISSECUCTRL
  FROM P#CDT_T_TASKTYPE
 WHERE STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CDT_T_TASKTYPEFILE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CDT_T_TASKTYPEFILE AS 
  SELECT  GUID,TASKTYPEID,FILEID,DISTRICTID,ORDERID,STATUS, DBVERSION
FROM P#CDT_T_TASKTYPEFILE
WHERE  STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CDT_T_TASKTYPEMODEL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CDT_T_TASKTYPEMODEL AS 
  SELECT  GUID,TASKTYPEID,MODELID,DISTRICTID,ORDERID,STATUS, DBVERSION,REPCONDITION
FROM P#CDT_T_TASKTYPEMODEL
WHERE  STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CDT_T_TASKTYPEMODEL_SHOW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CDT_T_TASKTYPEMODEL_SHOW AS 
  SELECT  T.GUID,T.TASKTYPEID,T.MODELID,T.DISTRICTID,T.ORDERID,M.NAME SNAME_MODELID,T.REPCONDITION
FROM P#CDT_T_TASKTYPEMODEL T LEFT JOIN DICT_T_MODEL M ON T.MODELID=M.TABLEID
WHERE  T.STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CDT_T_TASKTYPESPF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CDT_T_TASKTYPESPF AS 
  SELECT  GUID,TASKTYPEID,SPFID,ORDERID,STATUS, DBVERSION
FROM P#CDT_T_TASKTYPESPF
WHERE  STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CHECK_T_IDTOTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CHECK_T_IDTOTAB AS 
  SELECT BGTLVL, CHECKID, DBVERSION, GUID, STATUS, TABLEID
    FROM P#CHECK_T_IDTOTAB
   WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
     AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
     AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_ACCTITEM_SPF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_ACCTITEM_SPF AS 
  SELECT YEAR,STATUS,GUID,CODE,NAME,SUPERGUID,ISLEAF,LEVELNO,VERSION,DBVERSION,REMARK,CREATETIME,STARTTIME,ENDTIME,SRCGUID,DESGUID,SRCSCALE,ADMDIV,ALIAS,PINYIN,FUNCTYPE ACCTTYPEID
FROM FASP_T_PUBEXPFUNC
WHERE  STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_AGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_AGENCY AS 
  SELECT GUID,
       CODE,
       '['||CODE||']'||NAME NAME,
       SUPERGUID,
       ISLEAF,
       LEVELNO,
       STATUS,
       DIVTYPE,
       ISDISTRICT,
       AGENCYTYPE,
       DISTRICTID
  FROM CODE_M_AGENCY
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_AGENCY_BGT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_AGENCY_BGT AS 
  SELECT GUID,
       CODE,
       '['||CODE||']'||NAME NAME,
        (case
         when CODE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') then
          '0'
         else
          SUPERGUID
       end) as SUPERGUID,
       ISLEAF,
       LEVELNO,
       STATUS,
       DIVTYPE,
       ISDISTRICT,
       DISTRICTID,
       GUID as ID,
       ISLEAF as EndFlag,
       AGENCYTYPE,
       f_get_lpad(code, '3-3-3-3-3-3-3') as LvlID,
       DISTRICTLVL,
       CASE
         WHEN SUPERGUID = '0' THEN
          '#'
         ELSE
          nvl(SUPERGUID, '#')
       END SuperID
  FROM CODE_M_AGENCY
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_APPLYTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_APPLYTYPE AS 
  SELECT  '1' GUID ,'外网' NAME,'#' SUPERGUID,'1' ISLEAF,'0' CODE FROM DUAL
UNION
SELECT  '0' GUID ,'内网' NAME,'#' SUPERGUID,'1' ISLEAF,'1' CODE FROM DUAL}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_APPROVAL_TYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_APPROVAL_TYPE AS 
  SELECT ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,SUPERGUID
FROM P#CODE_T_APPROVAL_TYPE
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_COLLECTTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_COLLECTTYPE AS 
  SELECT ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,SUPERGUID,REFTABLE
  FROM P#CODE_T_COLLECTTYPE
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_COLUMN_BGT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_COLUMN_BGT AS 
  SELECT COLUMNID GUID,ISLEAF,LEVELNO,NAME,ORDERID
FROM P#DICT_T_FACTOR
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'

}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_CONTRACTTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_CONTRACTTYPE AS 
  select ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,STEPTYPE,SUPERGUID from P#CODE_T_CONTRACTTYPE where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') and Year=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_MODEL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_MODEL AS 
  SELECT APPID,BGTLVL,DBTABLENAME,DBVERSION,DEALTYPE,EXTPROP,INPUTLVL,ISADD,ISMAN,ISPARTITION,ISRESERVED,ISSHOW,ISTASK,ISSUMTAB,MAINUPTAB,NAME,ORDERID,RELATAB,REMARK,SECUSQL,INITSQL,INITSQLTIME,SHORTTITLE,STATUS,SUITID,TABLEID,TABLETYPE,TABSWHERE,ISBAK,INSERTVERSION
FROM P#DICT_T_MODEL
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_DEPT_BGT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_DEPT_BGT AS 
  SELECT T.GUID,
       T.CODE,
       T.NAME,
       T.SUPERGUID,
       T.ISLEAF,
       T.LEVELNO,
       T.PROVINCE,
       T.YEAR,
       T.STATUS,
       T.DISTRICTID,
       DECODE(SUBSTR(T.NAME, -3, 3), '预算处', '1', '0') FLAG
  FROM CODE_T_DEPT T}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_FACTOR</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_FACTOR AS 
  SELECT ALIAS,BANDCOLUMNID,BANDREFDWCOL,BGTLVL,COLFORMAT,COLTIPS,COLUMNID,CSID,DATALENGTH,DATATYPE,DBCOLUMNNAME,DBVERSION,DEFAULTVALUE,DEID,EXTPROP,FRMCOLID,FRMTABID,HREFLOC,HREFPARMID,ISBANDCOL,ISHREF,OPENWINDOWTYPE,ISKEY,ISLEAF,ISREGEX,ISRESERVE,ISSUM,ISUPDATE,ISVIRTUAL,ISVISIBLE,LEVELNO,NAME,NULLABLE,ORDERID,REGEXPR,REGEXPRINFO,SCALE,SHOWFORMAT,SHOWWIDTH,STATUS,SUPERID,TABLEID,VIRCONTEXT,INSERTVERSION,PARENTNODECANCHECK 
FROM P#DICT_T_FACTOR 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_MODEL_S</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_MODEL_S AS 
  SELECT APPID,BGTLVL,DBTABLENAME,DBVERSION,DEALTYPE,EXTPROP,INPUTLVL,ISADD,ISMAN,ISPARTITION,ISRESERVED,ISSHOW,ISTASK,ISSUMTAB,MAINUPTAB,NAME,ORDERID,RELATAB,REMARK,SECUSQL,INITSQL,INITSQLTIME,SHORTTITLE,STATUS,SUITID,TABLEID,TABLETYPE,TABSWHERE,ISBAK,INSERTVERSION
FROM P#DICT_T_MODEL_S
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_FACTOR_S</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_FACTOR_S AS 
  SELECT ALIAS,BANDCOLUMNID,BANDREFDWCOL,BGTLVL,COLFORMAT,COLTIPS,COLUMNID,CSID,DATALENGTH,DATATYPE,DBCOLUMNNAME,DBVERSION,DEFAULTVALUE,DEID,EXTPROP,FRMCOLID,FRMTABID,HREFLOC,HREFPARMID,ISBANDCOL,ISHREF,OPENWINDOWTYPE,ISKEY,ISLEAF,ISREGEX,ISRESERVE,ISSUM,ISUPDATE,ISVIRTUAL,ISVISIBLE,LEVELNO,NAME,NULLABLE,ORDERID,REGEXPR,REGEXPRINFO,SCALE,SHOWFORMAT,SHOWWIDTH,STATUS,SUPERID,TABLEID,VIRCONTEXT,INSERTVERSION,PARENTNODECANCHECK 
FROM P#DICT_T_FACTOR_S 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_DEPT_SPF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_DEPT_SPF AS 
  SELECT GUID,
       CODE,
       '[' || CODE || ']' || NAME AS NAME,
       SUPERGUID,
       ISLEAF,
       LEVELNO,
       PROVINCE, YEAR,
       STATUS,
       (SELECT GUID
          FROM CODE_T_DISTRICT_SPF
         WHERE CODE = P#FASP_T_PUBDEPARTMENT.PROVINCE) AS DISTRICTID
  FROM P#FASP_T_PUBDEPARTMENT
 WHERE YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_MODELCODE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_MODELCODE AS 
  SELECT APPID,FASPCSID,DBTABLENAME,DBVERSION,DYNAMICWHERE,ISLVL,ISORGID,ISREPBASE,NAME,ORDERID,SQLCON,STATUS,TABLEID,INSERTVERSION
FROM P#DICT_T_MODELCODE
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_DISTRICTBYSPF_SPF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_DISTRICTBYSPF_SPF AS 
  SELECT PROVINCE,
       GUID,
       CODE,
       NAME,
       ISLEAF,
       LEVELNO,
       SUPERGUID,
       '' ALIAS,
       '' PINYIN,
       '' REMARK,
       '' CREATEDATE,
       '' STARTDATE,
       '' ENDDATE,
       '' SRCGUID,
       '' DESGUID,
       SRCSCALE,
       STATUS,
       DBVERSION,
       '' EMW,
       BGTLEVEL,
       STDCODE,
       DISTRLVL,
       ZGXIAN,
       ISSELF,
       PROVINCE_SH,
       CITY,
       COUNTY,
       PROVINCE_SHID,
       CITYID,
       COUNTYID
  FROM CODE_M_DISTRICT
 WHERE YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
  ORDER BY CODE}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_FACTORCODE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_FACTORCODE AS 
  SELECT BGTLVL,COLUMNID,CSID,DATALENGTH,DATATYPE,DBCOLUMNNAME,DBVERSION,DEFAULTVALUE,DEID,ISRESERVE,ISVISIBLE,NAME,ORDERID,SCALE,STATUS,TABLEID,INSERTVERSION 
FROM P#DICT_T_FACTORCODE 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_DISTRICT_SPF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_DISTRICT_SPF AS 
  SELECT PROVINCE,
       GUID,
       CODE,
       NAME,
       ISLEAF,
       LEVELNO,
       SUPERGUID,
       '' ALIAS,
       '' PINYIN,
       '' REMARK,
       '' CREATEDATE,
       '' STARTDATE,
       '' ENDDATE,
       '' SRCGUID,
       '' DESGUID,
       SRCSCALE,
       STATUS,
       DBVERSION,
       '' EMW,
       BGTLEVEL,
       STDCODE,
       DISTRLVL,
       ZGXIAN,
       ISSELF,
       PROVINCE_SH,
       CITY,
       COUNTY,
       PROVINCE_SHID,
       CITYID,
       COUNTYID
  FROM CODE_M_DISTRICT
 WHERE YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
  ORDER BY CODE}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_DIVREPORTSTATS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_DIVREPORTSTATS AS 
  SELECT ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,SUPERGUID
FROM P#CODE_T_DIVREPORTSTATS
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_FUNDTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_FUNDTYPE AS 
  SELECT GUID,CODE,NAME,SUPERGUID,LEVELNO,DBVERSION,ISLEAF,VERSION,ADMDIV,STARTTIME,SRCGUID,REMARK,ENDTIME,DESGUID,CREATETIME,ALIAS,PINYIN,SRCSCALE
FROM FASP_T_PUBFUNDTYPE
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'

}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_FACTOR</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_FACTOR AS 
  SELECT ALIAS,BANDCOLUMNID,BANDREFDWCOL,BGTLVL,COLFORMAT,COLTIPS,COLUMNID,CSID,DATALENGTH,DATATYPE,DBCOLUMNNAME,DBVERSION,DEFAULTVALUE,DEID,EXTPROP,FRMCOLID,FRMTABID,HREFLOC,HREFPARMID,ISBANDCOL,ISHREF,OPENWINDOWTYPE,ISKEY,ISLEAF,ISREGEX,ISRESERVE,ISSUM,ISUPDATE,ISVIRTUAL,ISVISIBLE,LEVELNO,NAME,NULLABLE,ORDERID,REGEXPR,REGEXPRINFO,SCALE,SHOWFORMAT,SHOWWIDTH,STATUS,SUPERID,TABLEID,VIRCONTEXT,INSERTVERSION,PARENTNODECANCHECK 
FROM P#DICT_T_FACTOR 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_FUND_LEVEL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_FUND_LEVEL AS 
  SELECT ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,SUPERGUID
FROM P#CODE_T_FUND_LEVEL
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_MODELCODE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_MODELCODE AS 
  SELECT APPID,FASPCSID,DBTABLENAME,DBVERSION,DYNAMICWHERE,ISLVL,ISORGID,ISREPBASE,NAME,ORDERID,SQLCON,STATUS,TABLEID,INSERTVERSION
FROM P#DICT_T_MODELCODE
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_FUND_M_M</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_FUND_M_M AS 
  SELECT ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,SUPERGUID
FROM P#CODE_T_FUND_M_M
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_FACTORCODE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_FACTORCODE AS 
  SELECT BGTLVL,COLUMNID,CSID,DATALENGTH,DATATYPE,DBCOLUMNNAME,DBVERSION,DEFAULTVALUE,DEID,ISRESERVE,ISVISIBLE,NAME,ORDERID,SCALE,STATUS,TABLEID,INSERTVERSION 
FROM P#DICT_T_FACTORCODE 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_KPISECTORS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_KPISECTORS AS 
  select ALIAS,
       CODE,
       CREATEDATE,
       DBVERSION,
       DESGUID,
       ENDDATE,
       GUID,
       ISLEAF,
       LEVELNO,
       NAME,
       PINYIN,
       REMARK,
       SRCGUID,
       STARTDATE,
       STATUS,
       SUPERGUID
  from P#CODE_T_KPISectors
 where PROVINCE = Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID')
   and Year = Global_MultYear_CZ.Secu_f_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_LOGIC</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_LOGIC AS 
  SELECT  '0' GUID ,'否' NAME,'#' SUPERGUID,'1' ISLEAF,'0' CODE ,'1' LEVELNO, 0 ALIAS,'' REMARK,'F' PINYIN FROM DUAL
UNION
SELECT  '1' GUID ,'是' NAME,'#' SUPERGUID,'1' ISLEAF,'1' CODE, '1' LEVELNO, 1 ALIAS,'' REMARK,'S' PINYIN   FROM DUAL}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_SUITTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_SUITTAB AS 
  SELECT TABLEID,SUITID FROM DICT_T_MODEL}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_PLANSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_PLANSTATUS AS 
  SELECT ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,SUPERGUID
FROM P#CODE_T_PLANSTATUS
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_PROJAGENCY_SPF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_PROJAGENCY_SPF AS 
  SELECT S.GUID,S.CODE,S.NAME,S.SUPERGUID,S.ISLEAF,S.LEVELNO,S.DIVTYPE,S.ISDISTRICT,S.DISTRICTID,S.DISTRICTCODE,S.DISTRICTNAME
FROM CODE_T_AGENCY_SPF S}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EXP_S_PROJECTTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW EXP_S_PROJECTTYPE AS 
  select
       '' as BGTLVL,
       bf.DBVERSION as DBVERSION,
       '1' as ISBASE,
       '1' as ISLEAF,
       1   as LEVELNO,
       ''       as MANADEPT,
       0 as ORDERID,
       bf.SPFID  as PROJTYPEID,
       bf.SPFNAME as PROJTYPENAME,
       bf.STATUS as STATUS,
       bf.SPFCODE as CODE,
       '0' as SUPERID,
        bf.DISTRICTID as DISTRICTID
  from spf_T_fbaseinfo bf
 where exists (select p.PROJTYPEID
          from (select p.PROJTYPEID, p.ISLEAF
                  from SPF_T_PROJECTTYPE p
                 start with p.PROJTYPEID = '9'
                connect by prior p.PROJTYPEID = p.superid) p
         where p.PROJTYPEID = bf.PROJTYPEID)
         ORDER BY bf.PROJTYPEID}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_PROJATTACH</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_PROJATTACH AS 
  SELECT         T.DETCLASSID GUID ,
T.DETCLASSID CODE,
T.DETCLASSNAME NAME ,
T.CLASSID SUPERGUID,
'0' ISLEAF,
(SELECT A.CLASSNAME FROM SPF_T_SETATTACH_B A WHERE A.CLASSID = T.CLASSID) FIRATTNAME
FROM SPF_T_SETATTACH T
WHERE T.TYPEID = '0'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_PROJAUDITINGSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_PROJAUDITINGSTATUS AS 
  SELECT ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,SUPERGUID
FROM P#CODE_T_PROJAUDITINGSTATUS
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_PUBLIC</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_PUBLIC AS 
  SELECT APPID,CNUM,DBVERSION,ISYES,KEYID,KEYNAME,REMARK,RESERVE_1,RESERVE_2,STATUS,TYPEID,TYPENAME 
FROM P#DICT_T_PUBLIC 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_PROJAUDITSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_PROJAUDITSTATUS AS 
  SELECT ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,SUPERGUID
FROM P#CODE_T_PROJAUDITSTATUS
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_PROJCHECKSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_PROJCHECKSTATUS AS 
  SELECT ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,SUPERGUID
FROM P#CODE_T_PROJCHECKSTATUS
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SUIT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SUIT AS 
  SELECT APPID,DBVERSION,ISLEAF,LEVELNO,ORDERID,REMARK,STATUS,SUITID,SUITNAME,SUITTYPE,SUPERID 
FROM P#DICT_T_SUIT 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_PROJFUNDSOURCE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_PROJFUNDSOURCE AS 
  SELECT BGTLVL AS BGTLVL,
DBVERSION AS DBVERSION,
FUNDSOURCEID AS GUID,
FUNDSOURCENAME AS NAME,
FUNDSOURCEID AS CODE,
ISLEAF AS ISLEAF,
LEVELNO AS LEVELNO,
STATUS AS STATUS,
SUPERID AS SUPERGUID,
TOPROJCOL AS TOPROJCOL,
'' AS ALIAS,
'' AS PINYIN,
'' AS REMARK,
'' AS CREATEDATE,
'' AS STARTDATE,
'' AS ENDDATE,
0 AS SRCSCALE,
'' AS SRCGUID,
'' AS DESGUID
FROM EXP_S_PROJINVEST
WHERE TOPROJTAB = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_PROJINVEST_BGT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_PROJINVEST_BGT AS 
  SELECT FUNDSOURCEID GUID,''CODE,FUNDSOURCENAME NAME,SUPERID SUPERGUID,ISLEAF,LEVELNO,STATUS,TOBASECOL,TOBASETAB,TOPROJCOL,TOPROJTAB
FROM EXP_S_PROJINVEST
WHERE TOBASETAB='1'

}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>FORMULA_T_FORMULADEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW FORMULA_T_FORMULADEF AS 
  SELECT BGTLVL,DBVERSION,FORCOMCOL,FORMULADEF,FORMULADEFCHI,FORMULADEFENG,FORMULAID,FORMULALVL,FORMULANAME,FORMULATYPE,FORPARMCOL,FORWHERE,ISPUBLIC,ORDERID,REFCOLUMN,STATUS,TABLEID,RELAID,DEFTYPE
FROM P#FORMULA_T_FORMULADEF
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_PRORELEASE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_PRORELEASE AS 
  SELECT ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,SUPERGUID
FROM P#CODE_T_PRORELEASE
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>FORMULA_T_FORMULADETAIL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW FORMULA_T_FORMULADETAIL AS 
  SELECT BGTLVL,DBVERSION,FORCOMCOL,FORMULAID,FORMULATYPE,FORWHERE,FORWHERECOL,GUID,LINEID,REFCOLUMN,REFCOMCONT,REFTABLEID,REFWHERE,REFWHERECOL,STATUS,TABLEID 
FROM P#FORMULA_T_FORMULADETAIL 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_SPFATTACH</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_SPFATTACH AS 
  SELECT         T.DETCLASSID GUID ,
T.DETCLASSID CODE,
T.DETCLASSNAME NAME ,
T.CLASSID SUPERGUID,
'0' ISLEAF,
(SELECT A.CLASSNAME FROM SPF_T_SETATTACH_B A WHERE A.CLASSID = T.CLASSID) FIRATTNAME
FROM SPF_T_SETATTACH T
WHERE T.TYPEID = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_SPFSETUPSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_SPFSETUPSTATUS AS 
  SELECT ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,SUPERGUID
FROM P#CODE_T_SPFSETUPSTATUS
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_UPDATESTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_UPDATESTATUS AS 
  select ALIAS,
       CODE,
       CREATEDATE,
       DBVERSION,
       DESGUID,
       ENDDATE,
       GUID,
       ISLEAF,
       LEVELNO,
       NAME,
       PINYIN,
       REMARK,
       SRCGUID,
       SRCSCALE,
       STARTDATE,
       STATUS,
       SUPERGUID
  from P#CODE_T_UPDATESTATUS
 where PROVINCE = Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID')
   and Year = Global_MultYear_CZ.Secu_f_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_V_ACCTCODE_OUT_SPF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_V_ACCTCODE_OUT_SPF AS 
  SELECT GUID,
       CODE,
       NAME,
       SUPERGUID,
       ISLEAF,
       LEVELNO,
       STATUS,
       DISTRICTID,
       LEI,
       LEINAME,
       KUAN,
       KUAN2,
       KUANNAME,
       XIANG,
       XIANGNAME,
       LEICODENAME,
       KUANCODENAME,
       XIANGCODENAME,
       GUIDNAME
  FROM CODE_M_ACCTCODE_OUT_SPF
 WHERE YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_V_EXPPROJECT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_V_EXPPROJECT AS 
  select guid,superguid,name,code,typeFlag,agencyID,isleaf,ORDERID,level as LEVELNO from (
select p.PROJTYPEID as guid,
       p.SUPERID as superguid,
       p.PROJTYPENAME name,
       p.CODE as code,
       '1' as typeFlag,--1 项目
       '' agencyID,
       '0' isleaf,
       p.ORDERID as ORDERID
    from SPF_T_PROJECTTYPE p
  start with p.PROJTYPEID='9'
  connect by prior p.PROJTYPEID=p.superid
 union all
select bf.SPFID guid,
       bf.PROJTYPEID superguid,
       bf.SPFNAME name,
       bf.SPFCODE as code,
       '0' as typeFlag, --0 专项
       bf.AGENCYID as agencyID,
       '1' as isleaf,
       0 as orderID
  from spf_T_fbaseinfo bf
 where exists (select p.PROJTYPEID
          from (select p.PROJTYPEID, p.ISLEAF
                  from SPF_T_PROJECTTYPE p
                 start with p.PROJTYPEID = '9'
                connect by prior p.PROJTYPEID = p.superid) p
         where p.PROJTYPEID = bf.PROJTYPEID)
  ) temp start with temp.guid='9'
      connect by prior temp.guid=temp.superguid
       ORDER SIBLINGS BY temp.orderid,temp.code}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_V_SPFBASEINFOTREE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_V_SPFBASEINFOTREE AS 
  select guid,superguid,name,code,typeFlag,agencyID,isleaf,ORDERID from (
select p.PROJTYPEID as guid,
       p.SUPERID as superguid,
       p.PROJTYPENAME name,
       p.CODE as code,
       '1' as typeFlag,--1 项目类型
       '' agencyID,
       '0' isleaf,
       p.ORDERID as ORDERID
    from SPF_T_PROJECTTYPE p
    where p.PROJTYPE <> '9'
 union all
select bf.SPFID guid,
       bf.PROJTYPEID superguid,
       bf.SPFNAME name,
       bf.SPFCODE as code,
       '0' as typeFlag, --0 专项
       bf.AGENCYID as agencyID,
       '1' as isleaf,
       0 as orderID
  from spf_T_fbaseinfo bf
  where bf.FUNDMANAGE = '2' and bf.PROJTYPEID in (select a.PROJTYPEID from SPF_T_PROJECTTYPE a where a.PROJTYPE <> '9')
  )
  order by typeFlag desc, code}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_ASSIGNPROJ</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_ASSIGNPROJ AS 
  SELECT GUID,TABLEID,STATUS,DBVERSION
  FROM P#DICT_T_ASSIGNPROJ
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_ESTIMATE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_ESTIMATE AS 
  select DBVERSION,ESTID,ESTMODELID,ESTNAME,FORMULASET,STATUS,LOGIC_KEY from P#BGT_T_ESTIMATE where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') and Year=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_FORMULASORT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_FORMULASORT AS 
  SELECT CONDITIONSQL,CONDITIONSQLCN,DBVERSION,ORDERID,QUERYID,STATUS 
FROM P#BGT_T_FORMULASORT 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETRECDETAIL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETRECDETAIL AS 
  SELECT COLSPAN,CTRLID,CTRLNAME,DBVERSION,GUID,ISGROUPCTRL,ISLEAF,ISSHOW,ISTEXT,LEVELNO,ORDERID,RECID,ROWSPAN,STATUS,SUPERID
FROM P#DICT_T_SETRECDETAIL
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_SORTDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_SORTDEF AS 
  SELECT DBVERSION,ESTID,FORMULASORTID,FORMULASORTNAME,QUERYID,STATUS 
FROM P#BGT_T_SORTDEF 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SINGLRECORD</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SINGLRECORD AS 
  SELECT PROCESSID,STATUS,TABLEID,RECID,SHOWCOLS,TITLEWIDTH,REMARK,DBVERSION
  FROM P#DICT_T_SINGLRECORD
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CAL_T_AGSTANDGRADE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CAL_T_AGSTANDGRADE AS 
  SELECT AGENCYID,DBVERSION,GRADEID,NOLID,STANDARDID,STATUS 
FROM P#CAL_T_AGSTANDGRADE 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SINRECDETAIL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SINRECDETAIL AS 
  SELECT RECID,CTRLID,CTRLNAME,SUPERID,ISLEAF,LEVELNO,ORDERID,ISTEXT,COLSPAN,ROWSPAN,ISGROUPCTRL,ISSHOW,GUID,STATUS,DBVERSION
  FROM P#DICT_T_SINRECDETAIL
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CAL_T_FORMULA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CAL_T_FORMULA AS 
  SELECT DBVERSION,FORMULA,FORMULACHI,FORMULAID,FORMULANAME,FORMULASQL,FORMUTYPE,REFCOLID,REFTABID,STANDARDID,STATUS,TABLEID 
FROM P#CAL_T_FORMULA 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CAL_T_OUTWINDOWSET</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CAL_T_OUTWINDOWSET AS 
  SELECT AGENCYID,DBVERSION,EXPECOID,FORMULAID,FUNDSOURCEID,GUID,PROJTYPEID,RELATYPE,STATUS,TABLEID 
FROM P#CAL_T_OUTWINDOWSET 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CAL_T_STANDGRADE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CAL_T_STANDGRADE AS 
  SELECT DBVERSION,GRADEID,GUID,NUMVALUE,STANDARDID,STATUS 
FROM P#CAL_T_STANDGRADE 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CAL_T_GRADE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CAL_T_GRADE AS 
  SELECT DBVERSION,GRADEID,GRADENAME,ORDERID,STATUS 
FROM P#CAL_T_GRADE 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EXP_S_PROJINVEST</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW EXP_S_PROJINVEST AS 
  SELECT BGTLVL,DBVERSION,FUNDSOURCEID,FUNDSOURCENAME,ISLEAF,LEVELNO,STATUS,SUPERID,TOBASECOL,TOBASETAB,TOPROJCOL,TOPROJTAB,FUNDTYPE,CODE
FROM P#EXP_S_PROJINVEST
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EXP_S_PROJTYPETO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW EXP_S_PROJTYPETO AS 
  SELECT AGENCYID,DBVERSION,EXPFUNCID,GUID,PROJTYPEID,STATUS
FROM P#EXP_S_PROJTYPETO
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'

}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EXP_T_COLTOTABLES</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW EXP_T_COLTOTABLES AS 
  select COLLTYPEID,COLUMNID,COLVALUEID,COLVALUENAME,DATAKEY,DBVERSION,FINYEAR,GUID,NEEDUPDATE,ORDERID,RELATALBLEID,STATUS,TABLEID from P#EXP_T_COLTOTABLES where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') and Year=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('YEAR') AND STATUS='1' 
}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EXP_T_PBUDGET</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW EXP_T_PBUDGET AS 
  SELECT FINYEAR,FUNDSOURCEID,ACCTCODE,EXPECOID,INBDGNUM,DEALTYPE,AGENCYID,LEVELNO,ORDERID,PROJNAME,PROJECTID,DATAKEY, STATUS, DBVERSION
FROM P#EXP_T_PBUDGET
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CAL_T_STANDARD</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CAL_T_STANDARD AS 
  SELECT DBVERSION,ISLEAF,LEVELNO,ORDERID,STANDARDID,STANDARDNAME,STATUS,SUPERID 
FROM P#CAL_T_STANDARD 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') 
AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') 
AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_BUSINESSCHECKDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_BUSINESSCHECKDEF AS 
  SELECT CHECKID,BUSINESSTYPE,ERRORTYPE,ISUSE,ISMIDCHECK,ISADDCHECK,ISSAVECHECK,CHECKTYPE,ISDIRECT,LDIRECTCOL,RDIRECTCOL,BUDGETLEVEL,NAME,STATUS,GUID,ORDERID,OBJECTID,PROCESSID,TYPEFLAG,DBVERSION
  FROM P#KPI_T_BUSINESSCHECKDEF
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CHECK_T_DEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CHECK_T_DEF AS 
  SELECT APPID,BGTLVL,BUSITYPEID,CBGTLVL,CHECKDIV,CHECKID,CHECKNAME,CHECKSQL,CHECKTYPE,DBVERSION,ERRORDEF,EXTPROP,ISCOLLC,ISMUST,ISSAVEC,ISUSE,LCOL,LGROUP,LROWCOL,LROWTABID,LTABLEID,LWHERE,ORDERID,PUBGROUP,RCOL,RELATYPE,RGROUP,ROWFLAG,RROWCOL,RROWTABID,RTABLEID,RWHERE,SHOWTEXT,STATUS,LROWCOLID 
FROM P#CHECK_T_DEF 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_KPITOCALIBER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_KPITOCALIBER AS 
  SELECT DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,KPIID,OBJECTID,KPITYPE, STATUS, DBVERSION
  FROM P#KPI_T_KPITOCALIBER
  WHERE YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
  AND PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_SETDEPTEVAL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_SETDEPTEVAL AS 
  SELECT STATUS,DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,SUPERGUID,EVALNAME,LEVELNO,ISLEAF,SCORE,REQUIREDCHILD,EXPLANATION,STANDARD,ISINSERT,KPIPROP,DBVERSION
  FROM P#KPI_T_SETDEPTEVAL
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_SETDETAILCOLS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_SETDETAILCOLS AS 
  SELECT DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,DETAILID,COLUMNID,SHOWNAME,SUPERGUID,COLSPAN,ROWSPAN,ISGROUPCOL,LEVELNO,ISLEAF, STATUS, DBVERSION
  FROM P#KPI_T_SETDETAILCOLS
  WHERE YEAR=global_multyear_cz.Secu_f_GLOBAL_PARM('YEAR') AND PROVINCE=global_multyear_cz.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_SETFINEVAL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_SETFINEVAL AS 
  SELECT STATUS,DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,SUPERGUID,EVALNAME,LEVELNO,ISLEAF,SCORE,REQUIREDCHILD,EXPLANATION,STANDARD,ISINSERT,KPIPROP,DBVERSION
  FROM P#KPI_T_SETFINEVAL
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>BGT_T_CHECKDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW BGT_T_CHECKDEF AS 
  SELECT APPID,BUDGETLEVEL,CHECKEXCELSQL,CHECKID,CHECKSORTID,CHECKSQL,CHECKTYPE,DBVERSION,DEFNAME,ERRORDEF,LCOMPCOL,LDESC,LEFTGROUP,LMODELID,LQUERY,PUBGROUP,RCOMPCOL,RDESC,RELATYPE,RIGHTGROUP,RMODELID,RQUERY,SERID,SHOWTEXT,STATUS
FROM P#BGT_T_CHECKDEF
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_SETINPUTDETAIL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_SETINPUTDETAIL AS 
  SELECT STATUS,DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,OBJECTID,TABLEID,PROCESSID,SHOWCOLS,TITLEWIDTH,KPITYPE,DBVERSION
  FROM P#KPI_T_SETINPUTDETAIL
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_SETINPUTRELA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_SETINPUTRELA AS 
  SELECT STATUS,DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,KPITABID,PTABLEID,TABLEID,PTABFKID,TABFKID,DBVERSION
  FROM P#KPI_T_SETINPUTRELA
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_SETINPUTSTEP</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_SETINPUTSTEP AS 
  SELECT STATUS,DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,CODE,NAME,TYPE,DBVERSION
  FROM P#KPI_T_SETINPUTSTEP
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_SETINPUTTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_SETINPUTTAB AS 
  SELECT STATUS,DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,OBJECTID,TABLEID,PROCESSID,KPITYPE,ISREADONLY,ISMAINTABLE,REMARK,DBVERSION
  FROM P#KPI_T_SETINPUTTAB
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CHECK_T_REGVIEW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CHECK_T_REGVIEW AS 
  SELECT APPID,DBVERSION,ORDERID,STATUS,VIEWCNNAME,VIEWDBNAME,VIEWID 
FROM P#CHECK_T_REGVIEW 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_SETKPICALIBER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_SETKPICALIBER AS 
  SELECT STATUS,DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,KPITYPENAME,KPITYPE,TABLEID,REMARK,DBVERSION
  FROM P#KPI_T_SETKPICALIBER
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_SETPROJEVAL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_SETPROJEVAL AS 
  SELECT STATUS,DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,SUPERGUID,EVALNAME,LEVELNO,ISLEAF,SCORE,REQUIREDCHILD,EXPLANATION,STANDARD,KPIPROP,ISINSERT,DBVERSION
  FROM P#KPI_T_SETPROJEVAL
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_SETPROJKPI</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_SETPROJKPI AS 
  SELECT STATUS,DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,SUPERGUID,KPINAME,LEVELNO,ISLEAF,SCORE,REQUIREDCHILD,EXPLANATION,STANDARD,ISINSERT,KPIPROP,DBVERSION
  FROM P#KPI_T_SETPROJKPI
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CHECK_T_VTOTABLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CHECK_T_VTOTABLE AS 
  SELECT BGTLVL,DBVERSION,GUID,STATUS,TABLEID,VIEWID 
FROM P#CHECK_T_VTOTABLE 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_SETSPFEVAL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_SETSPFEVAL AS 
  SELECT STATUS,DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,SUPERGUID,EVALNAME,LEVELNO,ISLEAF,SCORE,REQUIREDCHILD,EXPLANATION,STANDARD,ISINSERT,KPIPROP,DBVERSION
  FROM P#KPI_T_SETSPFEVAL
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EFM_T_VIEWTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW EFM_T_VIEWTAB AS 
  SELECT A.VIEWID AS GUID, A.VIEWDBNAME AS VIEWNAME, B.TABLEID AS TABNAME
  FROM CHECK_T_REGVIEW A, CHECK_T_VTOTABLE B
 WHERE A.VIEWID = B.VIEWID}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_SETSPFKPI</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_SETSPFKPI AS 
  SELECT STATUS,DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,SUPERGUID,KPINAME,LEVELNO,ISLEAF,SCORE,REQUIREDCHILD,EXPLANATION,STANDARD,ISINSERT,KPIPROP,DBVERSION
  FROM P#KPI_T_SETSPFKPI
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>KPI_T_SETTABCALIBER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW KPI_T_SETTABCALIBER AS 
  SELECT STATUS,DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,KPITYPENAME,KPITYPE,TABLEID,REMARK,DBVERSION
  FROM P#KPI_T_SETTABCALIBER
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>OA_V_DOCRELATEEXT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW OA_V_DOCRELATEEXT AS 
  SELECT DOCID,FROMDOCID,FROMDEPTID  FROM OA_T_DOCRELATEEXT}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CACHE_T_FORMULA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CACHE_T_FORMULA AS 
  SELECT DBVERSION,FORMULAID,STATUS 
FROM P#CACHE_T_FORMULA 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CACHE_T_MODEL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CACHE_T_MODEL AS 
  SELECT DBVERSION,STATUS,TABID 
FROM P#CACHE_T_MODEL 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CACHE_T_QREPORT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CACHE_T_QREPORT AS 
  SELECT DBVERSION,OBJECTID,STATUS 
FROM P#CACHE_T_QREPORT 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CACHE_T_TABDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CACHE_T_TABDEF AS 
  SELECT DBVERSION,FDTABVERSION,FIXTABVERSION,GROUPVERSION,QUERYVERSION,RELAREFVERSION,SINGLEVERSION,SORTVERSION,STATUS,TABLEID,TOANAVERSION 
FROM P#CACHE_T_TABDEF 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CACHE_T_USER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CACHE_T_USER AS 
  SELECT AGENCYVERSION,COLVERSION,DBVERSION,DEPTVERSION,FUNCVERSION,LOCKVERSION,PROJVERSION,ROWVERSION,STATUS,TABVERSION,USERID 
FROM P#CACHE_T_USER 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_APPREGISTER</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_APPREGISTER AS 
  SELECT APPID,APPNAME,DBID,DBVERSION,ORDERID,STATUS 
FROM P#DICT_T_APPREGISTER 
WHERE YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETANALY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETANALY AS 
  SELECT BGTLVL,DBVERSION,HREFLOC,HREFNAME,HREFPARMID,PICTUREID,STATUS,TABLEID,ORDERID
FROM P#DICT_T_SETANALY
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETBASENUMSUB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETBASENUMSUB AS 
  SELECT BGTLVL,COLUMNID,COLVALUE,DBVERSION,GUID,ORDERID,STATUS 
FROM P#DICT_T_SETBASENUMSUB 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETBASENUMTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETBASENUMTAB AS 
  SELECT BGTLVL,COLUMNID,DBVERSION,GUID,STATUS,TABLEID 
FROM P#DICT_T_SETBASENUMTAB 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETFDDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETFDDEF AS 
  SELECT BGTLVL,COLORDER,DBVERSION,GUID,ISFIX,LAYERINDENT,LVLNANMECOL,REFID,REFWHERE,STATUS,TABLEID 
FROM P#DICT_T_SETFDDEF 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETFIX</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETFIX AS 
  SELECT BGTLVL,COLORDER,DBVERSION,FDCODETOCOLS,GUID,LAYERINDENT,LVLNANMECOL,REFID,REFWHERE,STATUS,TABLEID,TYPEID 
FROM P#DICT_T_SETFIX 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETGROUP</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETGROUP AS 
  SELECT BGTLVL,COLUMNID,DBVERSION,GUID,IDSHOWCOL,ISASC,NAMESHOWCOL,ORDERID,STATUS,TABLEID 
FROM P#DICT_T_SETGROUP 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_LOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_LOG AS 
  SELECT DBVERSION,INVALID,LOGCONTENT,LOGID,OBJECTTYPE,ORDERID,STATUS
FROM P#DICT_T_LOG
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETHREFPARM</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETHREFPARM AS 
  SELECT BGTLVL,DBVERSION,HREFID,HREFPARMID,ORDERID,PARMCON,PARMNAME,STATUS 
FROM P#DICT_T_SETHREFPARM 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETMAINSUBRELA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETMAINSUBRELA AS 
  SELECT BGTLVL,DBVERSION,FKID,MAINFKID,MAINSUBID,MAINTABID,STATUS,SUBTABID 
FROM P#DICT_T_SETMAINSUBRELA 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETMAINSUBTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETMAINSUBTAB AS 
  SELECT BGTLVL,COLLTYPEID,DBVERSION,GUID,ISMAINTABLE,ORDERID,STATUS,TABLEID 
FROM P#DICT_T_SETMAINSUBTAB 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETQUERYD</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETQUERYD AS 
  SELECT BGTLVL,DBVERSION,INVLAID,ISSHOWTITLE,RECID,SHOWCOLS,STATUS,TABLEID,TITLEWIDTH 
FROM P#DICT_T_SETQUERYD 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETQUERYDDET</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETQUERYDDET AS 
  SELECT BGTLVL,COLSPAN,CTRLID,CTRLNAME,DBVERSION,DEFVALUE,GUID,ISSHOW,OPERATOR,ORDERID,RECID,STATUS 
FROM P#DICT_T_SETQUERYDDET 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETREC</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETREC AS 
  SELECT DBVERSION,OBJECTID,PROCESSID,RECID,REMARK,SHOWCOLS,STATUS,TABLEID,TITLEWIDTH
FROM P#DICT_T_SETREC
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETREFRELA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETREFRELA AS 
  SELECT BGTLVL,COLUMNID,DBVERSION,RELADBTAB,RELAID,RELANAME,STATUS,TABLEID,CONDCOLUMNID
FROM P#DICT_T_SETREFRELA
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETSORT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETSORT AS 
  SELECT ASCFLAG,BGTLVL,COLUMNID,DBVERSION,GUID,ISDEFAULT,ISRESERVE,ORDERID,STATUS,TABLEID 
FROM P#DICT_T_SETSORT 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETTABTITLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETTABTITLE AS 
  SELECT ALIGMENT,BGCOLOR,BGTLVL,CELLREGION,COLWIDTH,DBVERSION,FONTNAME,FONTSIZE,GUID,ISBOLD,ISBORDER,ISITALIC,ISUNDERLINE,ROWHEIGHT,STATUS,TABLEID,TITLETEXT 
FROM P#DICT_T_SETTABTITLE 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_UPDATEVIEW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_UPDATEVIEW AS 
  SELECT BGTLVL,COLUMNID,DBVERSION,GUID,STATUS,TABLEID,TOCOLUMNID 
FROM P#DICT_T_UPDATEVIEW 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>EXP_S_FIXTABSHOW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW EXP_S_FIXTABSHOW AS 
  SELECT ALIGMENT,BGCOLOR,BGTLVL,CELLREGION,COLWIDTH,DBVERSION,FONTNAME,FONTSIZE,FORMULAID,GUID,ISBOLD,ISBORDER,ISITALIC,ISUNDERLINE,REFID,ROWHEIGHT,STATUS,TABLEID,TITLETEXT 
FROM P#EXP_S_FIXTABSHOW 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PUB_T_ATTACH</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW PUB_T_ATTACH AS 
  SELECT ATTACHID,ATTACHNAME,DBVERSION,FILENAME,FILEPATH,FILESIZE,ISUSE,STATUS,UPLOADDATE 
FROM P#PUB_T_ATTACH 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')  AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_ATTACH</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_ATTACH AS 
  SELECT
      ATTACHID CODE,
      ATTACHID GUID,
      '1' ISLEAF,
      FILENAME NAME,
      '0' SUPERGUID
  FROM P#PUB_T_ATTACH
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_LIMITCOL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_LIMITCOL AS 
  SELECT BGTLVL,COLUMNID,DBVERSION,GUID,LIMITCON,LIMITCONFUNC,SHOWLIMIT,STATUS,TABLEID 
FROM P#SECU_T_LIMITCOL 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_LOCK</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_LOCK AS 
  SELECT APPID,DBVERSION,GUID,OBJECTID,STATUS,TOID,TYPEID 
FROM P#SECU_T_LOCK 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>TASK_T_TASKAGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW TASK_T_TASKAGENCY AS 
  SELECT AGENCYID,DBVERSION,GUID,STATUS,TASKID 
FROM P#TASK_T_TASKAGENCY 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>TASK_T_TASKATTACH</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW TASK_T_TASKATTACH AS 
  SELECT ATTACHID,DBVERSION,GUID,STATUS,TASKID 
FROM P#TASK_T_TASKATTACH 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>TASK_T_TASKTABLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW TASK_T_TASKTABLE AS 
  SELECT DBVERSION,GUID,ISSUIT,STATUS,TABLEID,TASKID 
FROM P#TASK_T_TASKTABLE 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CHECK_T_REGCOL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CHECK_T_REGCOL AS 
  SELECT COLCNNAME,COLDBNAME,COLID,CSID,DATATYPE,DBVERSION,ORDERID,STATUS,VIEWID 
FROM P#CHECK_T_REGCOL 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_ROW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_ROW AS 
  SELECT BASESECU,DBVERSION,GUID,MANID,MANTYPE,SHOWWHERE,SQLWHERE,STATUS,TABLEID 
FROM P#SECU_T_ROW 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_CACHE_USERROW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_CACHE_USERROW AS 
  SELECT MANID,DBVERSION 
FROM P#SECU_CACHE_USERROW 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_TABLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_TABLE AS 
  SELECT BASESECU,DBVERSION,EXTADD,EXTDEL,EXTUPDATE,GUID,ISSUIT,MANID,MANTYPE,STATUS,TABLEID 
FROM P#SECU_T_TABLE 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_CACHE_USERTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_CACHE_USERTAB AS 
  SELECT MANID,DBVERSION 
FROM P#SECU_CACHE_USERTAB 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_AGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_AGENCY AS 
  SELECT AGENCYID,APPID,DBVERSION,GUID,MANID,MANTYPE,STATUS
FROM P#SECU_T_AGENCY
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_CACHE_AGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_CACHE_AGENCY AS 
  SELECT MANID,DBVERSION 
FROM P#SECU_CACHE_AGENCY 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_COL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_COL AS 
  SELECT BASESECU,COLID,DBVERSION,GUID,MANID,MANTYPE,STATUS,TABLEID 
FROM P#SECU_T_COL 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_CACHE_USERCOL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_CACHE_USERCOL AS 
  SELECT MANID,DBVERSION 
FROM P#SECU_CACHE_USERCOL
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_COLTOTABLES</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_COLTOTABLES AS 
  SELECT DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,COLUMNID,TABLEID,RELATALBLEID,COLVALUENAME, COLVALUEID, STATUS, DBVERSION
FROM P#SECU_T_COLTOTABLES
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_DEPTTOAGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_DEPTTOAGENCY AS 
  SELECT DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,DEPTID,AGENCYID,DISTRICTID, STATUS, DBVERSION
FROM P#SECU_T_DEPTTOAGENCY
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_ROLETOSPF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_ROLETOSPF AS 
  SELECT DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,SPFID,BASESECU,ROLEID,DISTRICTID,PROJSECU, STATUS, DBVERSION
FROM P#SECU_T_ROLETOSPF WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_ROLETOTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_ROLETOTYPE AS 
  SELECT DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,ROLEID,PROJTYPEID,BASESECU,DISTRICTID, STATUS, DBVERSION
FROM P#SECU_T_ROLETOTYPE
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_USERTOSPF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_USERTOSPF AS 
  SELECT BASESECU,DBVERSION,GUID,PROJSECU,SPFID,STATUS,USERID
FROM P#SECU_T_USERTOSPF
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SECU_T_USERTOTYPE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SECU_T_USERTOTYPE AS 
  SELECT BASESECU,DBVERSION,GUID,PROJTYPEID,STATUS,USERID
FROM P#SECU_T_USERTOTYPE
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_AGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_AGENCY AS 
  SELECT ADDR,ADMINLVL,ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,DISTRICTID,DIVOFFICER,DIVTYPE,ENDDATE,FAX,FINOFFICER,FUNDSUP,GUID,ISASS,ISDISTRICT,ISEXEC,ISEXP,ISFISC,ISITSELF,ISLEAF,ISPAYDIV,ISSALDIV,ISSELF,LEVELNO,LINKNAME,NAME,ORGCODE,PINYIN,POSTCODE,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,SUPERGUID,TEL
FROM P#SPF_T_AGENCY
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_BUSINESSCHECKDEF</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_BUSINESSCHECKDEF AS 
  SELECT CHECKID,BUSINESSTYPE,ERRORTYPE,ISUSE,ISMIDCHECK,ISADDCHECK,ISSAVECHECK,CHECKTYPE,ISDIRECT,LDIRECTCOL,RDIRECTCOL,BUDGETLEVEL,NAME,STATUS,GUID,ORDERID,OBJECTID,PROCESSID,TYPEFLAG,DBVERSION
  FROM P#SPF_T_BUSINESSCHECKDEF
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_CENTETIMG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_CENTETIMG AS 
  select AGENCYID,DATAKEY,DBVERSION,FINYEAR,ID,IMAGEID,LINK,NEEDUPDATE,ORDERID,SHOW,STATUS from P#SPF_T_CENTETIMG where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_CUSTODYLOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_CUSTODYLOG AS 
  SELECT BGTLVL,CUSTDEPTID,CUSTFIRSTDIV,CUSTODYID,DBVERSION,DISTRICTID,GUID,MODIFYDATE,OLDCUSTDEPTID,OLDCUSTFIRSTDIV,OPERATORID,SPFID,STATUS
FROM P#SPF_T_CUSTODYLOG
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_FADJUSTSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_FADJUSTSTATUS AS 
  SELECT DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,SPFID,ADJUSTSTATUS,SPFNAME,STATUS,BAKVERSION,DBVERSION
  FROM P#SPF_T_FADJUSTSTATUS
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_FAUDITINFO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_FAUDITINFO AS 
  SELECT AGENCYID,STEPNAME,AUDITRESULT,AUDITOPINION,AUDITDATE,SPFID,FINYEAR,AUDITSTATUSID,AUDITTYPE,AUDITCLASS,AUDITERID,DATAKEY,ORDERID, STATUS, DBVERSION
FROM P#SPF_T_FAUDITINFO
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_FOOTLINK</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_FOOTLINK AS 
  select AGENCYID,CODE,DATAKEY,DBVERSION,FINYEAR,NAME,NEEDUPDATE,ORDERID,SHOW,STATUS from P#SPF_T_FOOTLINK where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_FSPF2JATTACH</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_FSPF2JATTACH AS 
  SELECT BGTLVL,DATAKEY,AGENCYID,ORDERID,FDCODE,LEVELNO,ISLEAF,ISINSERT,TEMPLATEID,CELLSECU,SYNSTATUS,ISQZX,ISDJ,ISUPDATE,ORIGCODE,ISTEMPLATE,SUPERID,FIRATTNAME,DETCLASSID,REMARK,ISMUST,NEEDUPDATE,FINYEAR,ATTACHID,SPFID,TEMPLATENAME,ATTNAME,STATUS,DBVERSION
FROM P#SPF_T_FSPF2JATTACH
WHERE YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')  AND PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')  AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_FSPFSTEP</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_FSPFSTEP AS 
  SELECT BGTLVL,CODE,DBVERSION,GUID,NAME,ORDERID,STATUS
FROM P#SPF_T_FSPFSTEP
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_FZXZJDWSBFW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_FZXZJDWSBFW AS 
  SELECT DATAKEY,SPFID,AGENCYID, STATUS, DBVERSION FROM P#SPF_T_FZXZJDWSBFW  WHERE YEAR=global_multyear_cz.Secu_f_GLOBAL_PARM('YEAR')  AND  PROVINCE=global_multyear_cz.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_FZXZJSDQ</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_FZXZJSDQ AS 
  SELECT DATAKEY,SPFID,DISTRICTID,DECLQUOTA,DECLTIMES, STATUS, DBVERSION FROM P#SPF_T_FZXZJSDQ  WHERE YEAR=global_multyear_cz.Secu_f_GLOBAL_PARM('YEAR')  AND  PROVINCE=global_multyear_cz.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_HEAD</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_HEAD AS 
  select CONTENT,DATAKEY,DBVERSION,DISTRICTID,ISSHOW,STATUS,TYPEID,TYPENAME from P#SPF_T_HEAD where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_HELPLINK</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_HELPLINK AS 
  select AGENCYID,CONTENT,DATAKEY,DBVERSION,FINYEAR,ID,NEEDUPDATE,ORDERID,SHOW,STATUS,TYPE from P#SPF_T_HELPLINK where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID')  AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_LINKCONTENT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_LINKCONTENT AS 
  select AGENCYID,CODE,DATAKEY,DBVERSION,FINYEAR,ID,LINK,NAME,NEEDUPDATE,ORDERID,SHOW,STATUS from P#SPF_T_LINKCONTENT where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID')  AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYNCH_T_MAINLOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SYNCH_T_MAINLOG AS 
  SELECT BATCHID,DBVERSION,DIRECTION,ENDDATE,FILENAME,GUID,IPADDRESS,LOGID,REMARK,STARTDATE,STATUS,USEDDATE,USERID
FROM P#SYNCH_T_MAINLOG
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_NDECLAREAGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_NDECLAREAGENCY AS 
  SELECT DATAKEY,ORDERID,NEEDUPDATE,FINYEAR,AGENCYID,SPFID, STATUS, DBVERSION
FROM P#SPF_T_NDECLAREAGENCY
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_NFAUDITINFO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_NFAUDITINFO AS 
  SELECT DATAKEY,AGENCYID,STEPNAME,AUDITRESULT,AUDITOPINION,AUDITDATE,SPFID,FINYEAR,AUDITSTATUS,AUDITTYPE,AUDITCLASS,AUDITERID,ORDERID, STATUS, DBVERSION
FROM P#SPF_T_NFAUDITINFO
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYNCH_T_IMPORTLOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SYNCH_T_IMPORTLOG AS 
  SELECT DBVERSION,EXPDATAS,EXPFILENAME,EXPPHYSDBNAME,FAILDATAS,GUID,IMPUSEDDATE,INSERTDATAS,LOGID,REMARK,STATUS,UPDATEDATAS
FROM P#SYNCH_T_IMPORTLOG
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_NOTICE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_NOTICE AS 
  select ATTACHMENT_ID,AUDITOR,CONTENT,DATAKEY,DBVERSION,EDITTIME,ENDTIME,IMAGEID,ISFILENOTICE,ISIMGNOTICE,KEYWORDS,MENUID,NOTICEID,PUBLISHER,PUBLISHTIME,STATUS,STATUSCODE,SUPERMENUID,TITLE from P#SPF_T_NOTICE where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_NOTICE_HOMEPAGEMENU</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_NOTICE_HOMEPAGEMENU AS 
  select BRIEF,DATAKEY,DBVERSION,ENDFLAG,ISUSED,LEVELID,MENUALIAS,MENUID,MENUNAME,NEEDRECEIVER,NETFLAG,ORDERID,PAGENAME,PAGETARGET,PAGETYPE,SHOWID,STATUS,SUPERID from P#SPF_T_NOTICE_HOMEPAGEMENU where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYNCH_T_EXPORTLOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SYNCH_T_EXPORTLOG AS 
  SELECT DBVERSION,EXPDATAS,EXPFILENAME,EXPPHYSDBNAME,GUID,LASTEXPDATE,LOGID,REMARK,STATUS,Districtid
FROM P#SYNCH_T_EXPORTLOG
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_NPAUDITINFO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_NPAUDITINFO AS 
  SELECT DATAKEY,NEEDUPDATE,PROJECTID,FINYEAR,AGENCYID,AUDITERID,AUDITDATE,AUDITOPINION,AUDITCLASS,AUDITTYPE,AUDITSTATUS,STEPNAME,AUDITRESULT,TASKID,AUDITLEVEL,ISTEMP,ORDERID, STATUS, DBVERSION
FROM P#SPF_T_NPAUDITINFO
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_NPBASEINFO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_NPBASEINFO AS 
  SELECT DATAKEY,PROJECTID,AGENCYID,PROJNAME,PROJCODE,PROJTYPEID,EXPFUNCID,STARTTIME,ENDTIME,CHARGER,CHARGERPHONE,CHARGERMOBILE,CREATEUSER,CREATEUSERNAME,CREATETIME,ENDYEAR,STARTYEAR,MAINCONTENT,ISPUBSHOW,ISBGT,ISMEASURED,UPTIME,IMPORTANCE,ISGROVPROC,ISJX,APPROVEDDATE,APPROVEDNUM,LONGKPI,CHECKSTATUS,BGTSOURCEID,CONTENTTYPE,ISTHREECLASS,DISTRICTID,PUBLICITYBATCHID,SPFID,FINANCEHOLD,PROJAUDITINGSTATUS,ISPLANDOWN,ISBUDGETDOWN,ISINSTEAD,CDL,ISDISTRICT,ISCUT,TEMPDEPTID,TEMPFIRAGENCYID,ISTEMP,TEMPUPTIME,TEMPCHECKSTATUS,TEMPUPSTATUS,UPSTATUS, STATUS, DBVERSION,ISZD
FROM P#SPF_T_NPBASEINFO
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_OARELATION</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_OARELATION AS 
  SELECT DBVERSION,DOCID,GUID,ORGID,REMARK,STATUS,TASKID,TASKTYPE,USERID
FROM P#SPF_T_OARELATION WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SHORTCUTMENU</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SHORTCUTMENU AS 
  SELECT DATAKEY,STMENUID,ROLEID,MENUID,ORDERNUM,ICON,STATUS,PROVINCE,YEAR,DBVERSION,ORDERID 
FROM P#DICT_T_SHORTCUTMENU
WHERE YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_PADJUSTSTATUS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_PADJUSTSTATUS AS 
  SELECT DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,PROJECTID,ADJUSTSTATUS,PROJNAME,STATUS,DBVERSION
  FROM P#SPF_T_PADJUSTSTATUS
 WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS = '1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_PAUDITINFO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_PAUDITINFO AS 
  SELECT DATAKEY,PROJECTID,FINYEAR,AGENCYID,AUDITOPINION,PROJECTREVIEWID,REPORTATTACHFILES,REPORTFILENUM,REPORTTITLE,AUDITCLASS,AUDITTYPE,AUDITSTATUS,AUDITDATE,AUDITERID,AUDITRESULT,TASKID,STEPNAME,AUDITLEVEL,ISMAINNODE,ISTEMP,ORDERID, STATUS, DBVERSION
FROM P#SPF_T_PAUDITINFO
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_PPROJPLAN</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_PPROJPLAN AS 
  SELECT DATAKEY,ORDERID,PROJECTID,DIVID,PLANMONEY,APPROVEDMONEY,BALANCE,PLANLEVEL,PLANSTATUS,CREATEDATE,CREATEUSER,BATCHID,FINYEAR,TARGETID, STATUS, DBVERSION
FROM P#SPF_T_PPROJPLAN
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_PPROJPLANBT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_PPROJPLANBT AS 
  SELECT DATAKEY,ORDERID,SPFID,PLANREFNO,PLANFILETITLE,PLANFILEID,PLANLEVEL,PLANSTATUS,FINYEAR,ISMIGRATIONDATA, STATUS, DBVERSION
FROM P#SPF_T_PPROJPLANBT WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_PPROJSTEP</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_PPROJSTEP AS 
  SELECT BGTLVL,CODE,DBVERSION,GUID,NAME,ORDERID,STATUS
FROM P#SPF_T_PPROJSTEP
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_PPUBLICITY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_PPUBLICITY AS 
  SELECT DATAKEY,ORDERID,NEEDUPDATE,FINYEAR,AGENCYID,PUBLICITYBATCHID,TITLE,PUBLICITYTIME,USERID,CONTENT,LOGICSTATE,ATTACHID, STATUS, DBVERSION FROM P#SPF_T_PPUBLICITY WHERE YEAR=global_multyear_cz.Secu_f_GLOBAL_PARM('YEAR') AND PROVINCE=global_multyear_cz.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_PPUBLICITY_PAGE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_PPUBLICITY_PAGE AS 
  SELECT DATAKEY,ORDERID,NEEDUPDATE,FINYEAR,AGENCYID,PUBLICITYBATCHID,TITLE,PUBLICITYTIME,USERID,CONTENT,LOGICSTATE,ATTACHID, STATUS, DBVERSION FROM P#SPF_T_PPUBLICITY WHERE PROVINCE=global_multyear_cz.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_P_B_RECORD</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_P_B_RECORD AS 
  SELECT DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,OPERATETYPE,PROJECTID,BATCHID,TARGETID,OPERATELEVEL,OPERATOR, STATUS, DBVERSION
FROM P#SPF_T_P_B_RECORD
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_RELATEDLINK</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_RELATEDLINK AS 
  select AGENCYID,DATAKEY,DBVERSION,FINYEAR,ID,IMAGEID,LINK,NEEDUPDATE,ORDERID,SHOW,STATUS from P#SPF_T_RELATEDLINK where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_REPORTSECU</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_REPORTSECU AS 
  select AGENCYID,APPID,COLSECU,COLUMNID,DATAKEY,DBVERSION,FINYEAR,GUID,NEEDUPDATE,ORDERID,PROJTABID,STATUS from P#SPF_T_REPORTSECU where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') and Year=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_SETATTACH</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_SETATTACH AS 
  SELECT BGTLVL,CLASSID,DBVERSION,DETCLASSID,DETCLASSNAME,GUID,OBJECTID,ORDERID,REMARK,STATUS,TYPEID
FROM P#SPF_T_SETATTACH
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_SETATTACHTOTEM</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_SETATTACHTOTEM AS 
  SELECT BGTLVL,DBVERSION,DETCLASSID,GUID,ORDERID,REMARK,STATUS,TEMPLATEID,TEMPLATENAME
FROM P#SPF_T_SETATTACHTOTEM
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_SETATTACH_B</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_SETATTACH_B AS 
  SELECT BGTLVL,CLASSID,CLASSNAME,DBVERSION,ORDERID,REMARK,STATUS,TYPEID
FROM P#SPF_T_SETATTACH_B
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_SETCODE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_SETCODE AS 
  SELECT BASETYPEID,BGTLVL,CODEID,CODESHOW,DBVERSION,ORDERID,STATUS,TYPEID, PROJTYPEID
FROM P#SPF_T_SETCODE
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_SETCODE_B</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_SETCODE_B AS 
  SELECT BASETYPEID,BASETYPENAME,BGTLVL,CODESHOW,DBVERSION,ISSPESTR,ISUSE,ORDERID,STATUS,TYPEID
FROM P#SPF_T_SETCODE_B
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_SETCUSTAGENCY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_SETCUSTAGENCY AS 
  SELECT AGENCYID,BGTLVL,CUSTODYID,DBVERSION,GUID,STATUS
FROM P#SPF_T_SETCUSTAGENCY
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_SETCUSTODY</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_SETCUSTODY AS 
  SELECT BGTLVL,CUSTDEPTID,CUSTFIRSTDIV,CUSTODYID,DBVERSION,DISTRICTID,SPFID,STATUS
FROM P#SPF_T_SETCUSTODY
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_SETINHERIT</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_SETINHERIT AS 
  SELECT STATUS,DATAKEY,NEEDUPDATE,ORDERID,FINYEAR,GUID,PROJTABID,COLUMNID,ISMODIFY,CTRLSCOPE,EXPRESSION,PCOLUMNID,DBVERSION
  FROM P#SPF_T_SETINHERIT
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_SETPROJTAB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_SETPROJTAB AS 
  SELECT BGTLVL,DBVERSION,GUID,ISMAINTABLE,ISREADONLY,ISRESERVE,OBJECTID,ORDERID,PROCESSID,STATUS,TABLEID,TYPEFLAG,ISOPENED
FROM P#SPF_T_SETPROJTAB
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_SETTABRELATION</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_SETTABRELATION AS 
  SELECT BGTLVL,DBVERSION,FKID,GUID,MAINFKID,MAINTABID,PROJTABID,STATUS,TABLEID
FROM P#SPF_T_SETTABRELATION
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_SQL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_SQL AS 
  SELECT DBVERSION,SQLID,SQL_STATEMENT,STATUS FROM P#SPF_T_SQL WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_SQL_LOG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_SQL_LOG AS 
  SELECT GUID,DBVERSION,LOGINNAME,SQLSTATEMENT,STATUS FROM P#SPF_T_SQL_LOG WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_SETANGLEVIEW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_SETANGLEVIEW AS 
  SELECT COLUMNID,DBVERSION,GUID,ISDEFAULT,ORDERID,STATUS,TABLEID 
FROM P#DICT_T_SETANGLEVIEW 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_STAPAGE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_STAPAGE AS 
  select CODEID,CONTENT,DATAKEY,DBVERSION,STATUS from P#SPF_T_STAPAGE where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_XMJBXXB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_XMJBXXB AS 
  SELECT DATAKEY,PROJECTID,AGENCYID,AGENCYNAME,XMBM,XINGMMC,ZJSQQSN,ZJSQJSN,SHIFGS,BAOSDQ,XMFZR,FZRDH,XMSBDKXX,XMLXYJ,XMSBDBYX,ZYJSNR,XMJXBS,ZFCGBS,XMKSSJ,XMJSSJ, STATUS, DBVERSION FROM P#SPF_T_XMJBXXB  WHERE YEAR=global_multyear_cz.Secu_f_GLOBAL_PARM('YEAR')  AND  PROVINCE=global_multyear_cz.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_XMTZJHB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_XMTZJHB AS 
  SELECT DATAKEY,PROJECTID,FINYEAR,FUNDSOURCEID,APPLYNUM,ZYZJ,YXDKWY,QTZJ,HEJII,COUNTYAGNUM,COUNTYNUM,CITYAGNUM,CITYNUM,PROVAGNUM,PROVNUM,CENTNUM,ISPLANVALID,USERID,INBUDGETNUM,ADDINDEXNUM,CENTAGNUM, STATUS, DBVERSION FROM P#SPF_T_XMTZJHB  WHERE YEAR=global_multyear_cz.Secu_f_GLOBAL_PARM('YEAR')  AND  PROVINCE=global_multyear_cz.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_ACCTITEM</OBJECT_NAME>
      <SQL_COMMENT><![CDATA[功能科目]]></SQL_COMMENT>
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_ACCTITEM AS 
  SELECT GUID,CODE,NAME,SUPERGUID,ISLEAF,LEVELNO,VERSION,DBVERSION,REMARK,CREATETIME,STARTTIME,ENDTIME,SRCGUID,DESGUID,SRCSCALE,ADMDIV,ALIAS,PINYIN,FUNCTYPE ACCTTYPEID
FROM FASP_T_PUBEXPFUNC
WHERE YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_ACCTITEM_FUNC</OBJECT_NAME>
      <SQL_COMMENT><![CDATA[支出功能分类]]></SQL_COMMENT>
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_ACCTITEM_FUNC AS 
  SELECT GUID,
       CODE,
       NAME,
       SUPERGUID,
       CASE WHEN FUNCTYPE IS NULL THEN '0' ELSE '1' END ISLEAF,
       LEVELNO,
       ALIAS,
       PINYIN,
       REMARK,
       CREATETIME CREATEDATE,
       STARTTIME  STARTDATE,
       ENDTIME    ENDDATE,
       SRCGUID,
       DESGUID,
       SRCSCALE,
       STATUS,
       DBVERSION,
       FUNCTYPE   ACCTTYPEID
  FROM  FASP_T_PUBEXPFUNC}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_ACCTITEM_ECO</OBJECT_NAME>
      <SQL_COMMENT><![CDATA[支出经济分类]]></SQL_COMMENT>
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_ACCTITEM_ECO AS 
  SELECT ALIAS,CODE,CREATETIME CREATEDATE,DBVERSION,DESGUID,ENDTIME ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTTIME STARTDATE,STATUS,SUPERGUID
 FROM FASP_T_PUBEXPECO}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_ZXZJJBXXB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_ZXZJJBXXB AS 
  SELECT DATAKEY,AGENCYID,INVALID,DISTRICTID,PROJTYPEID,SPFCODE,SPFNAME,DEPTID,EXPFUNCID,BEGINYEAR,ENDYEAR,FUNDMANAGE,HOTTYPE,ISRELEASE,ZHICFX,ISMATCHFUNDS,APPROVALTYPE,ISREPEATAPP,ISNEEDJX,SZGX,CUTOFFTIME,XMSBTJ,SBXMJX,ZQGHBS,ZXZJSLYJGS,ZXZJSLDKXXGS,ZXZJDBYXGS,BEIZHU,SPFID,FUNDLEVEL,EFFTYPE,ISPUBSHOW,PRJREPLY,CREATEUSER,CREATETIME,SETUPSTATUS,DECLRANGE,ISGROVPROC,SHOWPROJLOGDAYS,ISMOREYEARPROJ,ISTEMP,FIRAGENCYID, STATUS, DBVERSION FROM P#SPF_T_ZXZJJBXXB  WHERE YEAR=global_multyear_cz.Secu_f_GLOBAL_PARM('YEAR')  AND  PROVINCE=global_multyear_cz.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CODE_T_ACCTJJ</OBJECT_NAME>
      <SQL_COMMENT><![CDATA[支出经济分类]]></SQL_COMMENT>
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW CODE_T_ACCTJJ AS 
  SELECT ALIAS,CODE,CREATEDATE,DBVERSION,DESGUID,ENDDATE,GUID,ISLEAF,LEVELNO,NAME,PINYIN,REMARK,SRCGUID,SRCSCALE,STARTDATE,STATUS,SUPERGUID 
FROM CODE_T_ACCTITEM_ECO 
 ORDER BY CODE}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_T_ZXZJKZSB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_T_ZXZJKZSB AS 
  SELECT DATAKEY,SPFID,FINYEAR,CTRLNUM,FUNDKINDID,FUNDSOURCEID,ISCUT,ACCTCODE, STATUS, DBVERSION FROM P#SPF_T_ZXZJKZSB  WHERE YEAR=global_multyear_cz.Secu_f_GLOBAL_PARM('YEAR')  AND  PROVINCE=global_multyear_cz.Secu_f_GLOBAL_PARM('DIVID') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_V_FBASEINFO</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_V_FBASEINFO AS 
  SELECT
       A.SPFID,
       A.SPFNAME  SPFNAME,
       A.SPFCODE,
       A.AGENCYID,
       A.PROJTYPEID,
       A.FIRAGENCYID,
       A.DEPTID,
       A.DISTRICTID,
       A.ISPUBSHOW,
       A.ISRELEASE,
       A.APPROVALTYPE,
       A.ISGROVPROC,
       A.FUNDLEVEL,
       a.DATAKEY,
       a.ISTEMP
  FROM SPF_V_FMAIN A}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>DICT_T_MODELRELA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW DICT_T_MODELRELA AS 
  SELECT GUID,SUBTABLEID,TABLEID,DBVERSION,STATUS 
FROM P#DICT_T_MODELRELA 
WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID') 
AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR') AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_V_PBUDGET4PLAN</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_V_PBUDGET4PLAN AS 
  SELECT PROJECTID         AS DATAKEY,
FINYEAR        AS FINYEAR,
SUM(INBDGNUM)          AS BDGNUM,--预算数
PROJECTID       AS PROJECTID
FROM EXP_T_PBUDGET T
WHERE T.FUNDSOURCEID = '0001'
AND T.FINYEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
AND T.INBDGNUM > 0
GROUP BY PROJECTID,FINYEAR}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SPF_V_PB_TARGET</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SPF_V_PB_TARGET AS 
  SELECT PBR.OPERATELEVEL, PBR.PROJECTID, PBR.TARGETID
FROM SPF_T_P_B_RECORD PBR
GROUP BY PBR.OPERATELEVEL, PBR.PROJECTID, PBR.TARGETID}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYNCH_T_BLOBCLOB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SYNCH_T_BLOBCLOB AS 
  SELECT LOGID,PHYSDBNAME,COLUNAME,CONDITION,BDATA,CDATA,STATUS,GUID,DBVERSION
  FROM P#SYNCH_T_BLOBCLOB
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYNCH_V_USERTABLE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SYNCH_V_USERTABLE AS 
  SELECT A.TABLE_NAME PHYSDBNAME, B.COMMENTS TABLENAME, A.BIGDATA
  FROM (SELECT OBJECT_NAME TABLE_NAME,
               NVL((SELECT '1'
                     FROM USER_TAB_COLUMNS C
                    WHERE C.TABLE_NAME = OBJECT_NAME
                      AND C.DATA_TYPE IN ('BLOB', 'CLOB')
                      AND ROWNUM < 2),
                   '0') BIGDATA,
               NVL((SELECT 1
                     FROM USER_TAB_COLUMNS C
                    WHERE C.TABLE_NAME = OBJECT_NAME
                      AND C.DATA_TYPE = 'TIMESTAMP(6)'
                      AND ROWNUM < 2),
                   0) ISDBVERSION
          FROM (SELECT OBJECT_NAME
                  FROM USER_OBJECTS
                 WHERE OBJECT_TYPE = 'TABLE'
                 AND (OBJECT_NAME NOT LIKE 'MLOG%' AND OBJECT_NAME NOT LIKE 'ACT%' ))) A,
       USER_TAB_COMMENTS B
 WHERE A.TABLE_NAME = B.TABLE_NAME
   AND A.ISDBVERSION > 0}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYNCH_T_DECRYPTDATA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SYNCH_T_DECRYPTDATA AS 
  SELECT LOGID,PHYSDBNAME,SYNCHDATA,STATUS,GUID,DBVERSION
  FROM P#SYNCH_T_DECRYPTDATA
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYNCH_T_IMPORTSQL</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SYNCH_T_IMPORTSQL AS 
  SELECT LOGID,PHYSDBNAME,IMPSQL,GUID,STATUS,DBVERSION
  FROM P#SYNCH_T_IMPORTSQL
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYNCH_T_REMOTEPROCEDURE</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SYNCH_T_REMOTEPROCEDURE AS 
  SELECT GUID,NAME,DESCRIBE,AVAILABLE,STATUS,PROGRAMCODE,DBVERSION
  FROM P#SYNCH_T_REMOTEPROCEDURE
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYNCH_T_SETTING</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SYNCH_T_SETTING AS 
  SELECT PHYSDBNAME,SYNCHORDER,SYNCHCONDITION,PKCOL,SYNCHEDHANDLER,SYNCHRECOGCOL,TABLETYPE,MAXROW,NETTYPE,REMARK,STATUS,GUID,DIRECTION,DBVERSION
  FROM P#SYNCH_T_SETTING
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>SYNCH_T_SYNCHCONFIG</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[BEGIN
    EXECUTE IMMEDIATE Q'{CREATE OR REPLACE FORCE VIEW SYNCH_T_SYNCHCONFIG AS 
  SELECT PHYSDBNAME,SYNCHORDER,SYNCHCONDITION,PKCOL,SYNCHEDHANDLER,SYNCHRECOGCOL,TABLETYPE,MAXROW,NETTYPE,REMARK,STATUS,GUID,DIRECTION,DBVERSION
  FROM P#SYNCH_T_SYNCHCONFIG
 WHERE PROVINCE=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('DIVID')
   AND YEAR=GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR')
   AND STATUS='1'}';
END;]]></SQL_CONTENT>
    </SQL>
  </VIEW>
  <PACKAGE_BODY>
    <SQL>
      <OBJECT_NAME>GLOBAL_MULTYEAR_CZ</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PACKAGE BODY GLOBAL_MULTYEAR_CZ as
      ---全局函数
      function Secu_f_GLOBAL_SetPARM(v_userida varchar2,v_pmDIvida varchar2,v_pmYeara varchar2,v_pmYAa varchar2 default null)  Return varchar2 is
      begin
        v_userID:=v_userida;
        v_pmDivID:=v_pmDIvida;
        v_pmYear:=v_pmYeara;
        v_pmYA:=v_pmYAa;
        #SYN_FASP_PARAM#
      end Secu_f_GLOBAL_SetPARM;

      function Secu_f_GLOBAL_PARM(v_parm varchar2) Return varchar2 is
      begin
        if v_parm='DIVID' then
           return v_pmDivID;
        end if;
        if v_parm='YEAR' then
           return v_pmYear;
        end if;
        if v_parm='USER' then
           return v_UserID;
        end if;
        if v_parm = 'YEARPROVINCE' then
          return v_pmYA;
        end if;
        if v_parm = 'TASKID' then
          RETURN V_TASKID;
        end if;
        return '1';
      end Secu_f_GLOBAL_PARM;

      function secu_f_global_setacctsystype(v_acctsystype varchar2) return varchar2 is
      begin
        v_ACCTSYSTYPEID := v_acctsystype;
        return '1';
      end secu_f_global_setacctsystype;

      function secu_f_global_getacctsystype(v_parm varchar2) return varchar2 is
      begin
        if v_parm = 'ACCTSYSTYPEID' then
          return v_ACCTSYSTYPEID;
        end if;
        return '1';
      end secu_f_global_getacctsystype;
      
      FUNCTION F_SET_TASKID(P_TASKID VARCHAR2) RETURN VARCHAR2 IS
        BEGIN
          V_TASKID := P_TASKID;
          RETURN '1';
        END F_SET_TASKID;
        
end Global_MultYear_CZ;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PKG_MULTYEAR</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PACKAGE BODY PKG_MULTYEAR as
      --创建表结构
      procedure sp_Create_Table(Table_Con clob)
      is
        v_sql varchar2(32000);
        v_tmp varchar2(32000);
      begin
        if global_ismultdb.v_ISMULT='0' then
          v_sql:=Table_Con;
          ExecDll_Long(v_sql);
        end if;
        if global_ismultdb.v_ISMULT='1' then
          v_sql:=Table_Con;
          v_sql:=v_sql||chr(13)||'partition by list (YEAR)(';
          select connstrlob(','||'partition '||'PY'||year||' values ('''||year||''') tablespace '||ID_TABSPACE) into v_tmp from pub_t_partition_divid where districtid='*';
          v_sql:=v_sql||chr(13)||substr(v_tmp,2)||chr(13)||')';
          ExecDll_Long(v_sql);
        end if;
        if global_ismultdb.v_ISMULT='2' then
          v_sql:=Table_Con;
          v_sql:=v_sql||chr(13)||'partition by list (PROVINCE)';
          v_sql:=v_sql||chr(13)||'subpartition by list (YEAR)(';
          select connstrlob(','||con_p||chr(13)) into v_tmp from (
              select connstrlob(decode(flag,1,substr(con,2)||'('||chr(13),substr(con,2)))||')' as con_p from
                 (select 1 flag,districtid,connstrlob(','||'partition '||'P'||districtid||' values ('''||districtid||''') tablespace '||ID_TABSPACE) con from pub_t_partition_divid where year='*' group by districtid
                   union all
                  select 0 flag,districtid,connstrlob(','||'subpartition '||'P'||districtid||'_Y'||year||' values ('''||year||''') tablespace '||ID_TABSPACE) con from pub_t_partition_divid where year<>'*' group by districtid)
                 group by districtid)kkk;
          v_sql:=v_sql||chr(13)||substr(v_tmp,2)||chr(13)||')';
          ExecDll_Long(v_sql);
        end if;
      end;
      --得到表内容
      function f_Get_Tab2ViewCont(v_tableid varchar2,v_new_tablename varchar2)  Return clob is
        v_i int;
        v_dbtabname varchar2(32);
        v_objName   varchar2(32);
        v_dbtabname_as varchar2(32);
        v_where_cols varchar2(4000);
        v_tmp       varchar2(30000);
        v_tmp_cols  varchar2(10000);
      begin
        --当前表的物理名称
        v_dbtabname:=v_new_tablename;
        --主要针对绑定列和虚列问题
        v_tmp:='';
        for v_recfactor in (select (select csid from dict_t_factor where tableid=v_tableid and columnid=fac.BANDCOLUMNID) BANDReftabID,BANDCOLUMNID,BANDREFDWCOL,DBCOLUMNNAME  from dict_t_factor fac where tableid=v_tableid and IsBandCol='1') loop
          ----表和表别名
          select DbTableName into v_objName from dict_t_modelcode where tableid=v_recfactor.bandreftabid;
          ----select 字段
          v_dbtabname_as:=v_objName||'.';
          select v_dbtabname_as||dbcolumnname into v_tmp_cols from dict_t_factorcode where tableid=v_recfactor.bandreftabid and columnid=v_recfactor.BANDREFDWCOL;
          v_tmp:=v_tmp||',(select '||v_tmp_cols||' from '||v_objName||' where ';
          ----关联条件
          select dbcolumnname into v_tmp_cols from dict_t_factor where tableid=v_tableid and ColumnID=v_recfactor.bandcolumnid;
          v_tmp:=v_tmp||v_dbtabname||'.'||v_tmp_cols||'='||v_dbtabname_as||'GUID';
          v_tmp:=v_tmp||') as '||v_recfactor.dbcolumnname;
        end loop;
        if length(v_tmp)>0 then
          v_tmp_cols:=v_tmp;
          --存在绑定列
          select connstrlob(','||dbcolumnname) into v_tmp  from dict_t_factor where tableid=v_tableid and nvl(IsBandCol,'0')='0' and DATATYPE<>4 and upper(dbcolumnname) not in ('YEAR','PROVINCE','STATUS','DBVERSION') ;
          v_tmp:='PROVINCE,YEAR,STATUS,DBVERSION'||v_tmp;
          v_tmp:='Select '||v_tmp||v_tmp_cols||' from '||v_dbtabname;
          return v_tmp;
        else
          --一般表
          return  v_dbtabname;
        end if;
        return '1';
      end f_Get_Tab2ViewCont;

      --创建视图
      procedure sp_Create_View(v_tableid varchar2,v_New_tableName varchar2,v_viewName varchar2)
      is
        v_sql varchar2(32000);
        v_tmp varchar2(32000);
        v_tableName varchar2(30000);
      begin
        --当前表的物理名称
        select f_Get_Tab2ViewCont(v_tableid,v_New_tableName) into v_tableName from dual;
        if length(v_tableName)<50 then
          sp_Create_View_1(v_New_tableName,v_viewName);
          return;
        end if;
        if global_ismultdb.v_ISMULT='0' then
          select connstrlob(','||dbcolumnname) into v_tmp from (select dbcolumnname from dict_t_factor where tableid=v_tableid and DATATYPE<>4 and dbcolumnname not in ('PROVINCE','YEAR','STATUS','DBVERSION') order by dbcolumnname);
          v_sql:='create or replace view '||v_viewName||' as '||v_tableName||' where STATUS=''1'' ';
          ExecDll_Long(v_sql);
        end if;
        if global_ismultdb.v_ISMULT='1' then
          select connstrlob(','||dbcolumnname) into v_tmp from (select dbcolumnname from dict_t_factor where tableid=v_tableid and DATATYPE<>4 and dbcolumnname not in ('PROVINCE','YEAR','STATUS','DBVERSION') order by dbcolumnname);
          v_sql:='create or replace view '||v_viewName||' as '||v_tableName||' where Year=Global_MultYear_CZ.Secu_f_GLOBAL_PARM(''YEAR'') AND STATUS=''1'' ';
          ExecDll_Long(v_sql);
        end if;
        if global_ismultdb.v_ISMULT='2' then
          select connstrlob(','||dbcolumnname) into v_tmp from (select dbcolumnname from dict_t_factor where tableid=v_tableid and DATATYPE<>4 and dbcolumnname not in ('PROVINCE','YEAR','STATUS','DBVERSION') order by dbcolumnname);
          v_sql:='create or replace view '||v_viewName||' as '||v_tableName||' where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM(''DIVID'') and Year=Global_MultYear_CZ.Secu_f_GLOBAL_PARM(''YEAR'') AND STATUS=''1'' ';
          ExecDll_Long(v_sql);
        end if;
      end;
      --对物理表进行视图创建
      procedure sp_Create_View_1(v_tableName varchar2,v_viewName varchar2)
      is
        v_sql varchar2(32000);
        v_tmp varchar2(32000);
      begin
        if global_ismultdb.v_ISMULT='0' then
          select connstrlob(','||column_name) into v_tmp from (select column_name from user_tab_cols where table_Name=v_tableName and column_name not in ('PROVINCE','YEAR') and column_id is not null order by column_name);
          v_sql:='create or replace view '||v_viewName||' as select '||substr(v_tmp,2)||' from '||v_tableName||' where STATUS=''1'' ';
          ExecDll_Long(v_sql);
        end if;
        if global_ismultdb.v_ISMULT='1' then
          select connstrlob(','||column_name) into v_tmp from (select column_name from user_tab_cols where table_Name=v_tableName and column_name not in ('PROVINCE','YEAR') and column_id is not null order by column_name);
          v_sql:='create or replace view '||v_viewName||' as select '||substr(v_tmp,2)||' from '||v_tableName||' where Year=Global_MultYear_CZ.Secu_f_GLOBAL_PARM(''YEAR'') AND STATUS=''1'' ';
          ExecDll_Long(v_sql);
        end if;
        if global_ismultdb.v_ISMULT='2' then
          select connstrlob(','||column_name) into v_tmp from (select column_name from user_tab_cols where table_Name=v_tableName and column_name not in ('PROVINCE','YEAR') and column_id is not null order by column_name);
          v_sql:='create or replace view '||v_viewName||' as select '||substr(v_tmp,2)||' from '||v_tableName||' where PROVINCE=Global_MultYear_CZ.Secu_f_GLOBAL_PARM(''DIVID'') and Year=Global_MultYear_CZ.Secu_f_GLOBAL_PARM(''YEAR'') AND STATUS=''1'' ';
          ExecDll_Long(v_sql);
        end if;
      end;
      --刷新视图
      procedure sp_Refresh_View(v_ret out varchar2)
      is
        v_tablename varchar2(32);
        v_viewName  varchar2(32);
        v_tableid    varchar2(32);
      begin
        for v_rec_tables in (select TABLE_NAME from user_triggers where table_name like 'P#%') loop
          v_tablename:=v_rec_tables.table_name;
          v_viewName:=substr(v_tablename,3);
          --判断视图
          select max(tableid) into v_tableid from dict_t_model where upper(dbtablename)=v_viewName;
          if v_tableid is not null then
            sp_Create_View(v_tableid,v_tablename,v_viewName);
          else
           sp_Create_View_1(v_tablename,v_viewName);
          end if;
        end loop;
        v_ret:='1';
      end;
      --刷新触发器
      procedure sp_Refresh_Trigger(v_ret out varchar2)
      is
        v_i          int;
        v_tablename varchar2(32);
        v_triggername varchar2(32);
        v_sql        varchar2(10000);
      begin
        for v_rec_tables in (select trigger_name,TABLE_NAME from user_triggers where table_name like 'P#%' and trigger_name ='TR_P#'||substr(table_name,3)) loop
          v_triggername:=v_rec_tables.trigger_name;
          v_tablename:=v_rec_tables.table_name;
          --判断当前表是否存在version字段
          select count(*) into v_i from user_tab_cols where table_name=v_tablename and column_name='DBVERSION';
          if v_i <1 then
            v_sql:='alter table '||v_tablename||' add DBVERSION timestamp default sysdate';
            execdll_long(v_sql);
          end if;
          select count(*) into v_i from user_tab_cols where table_name=v_tablename and column_name='STATUS';
          if v_i <1 then
            v_sql:='alter table '||v_tablename||' add STATUS char(1) default 1';
            execdll_long(v_sql);
          end if;
          v_sql:='drop trigger '||v_triggername;
          execdll_long(v_sql);
          --刷新触发器
          sp_Create_Trigger(v_tablename);
        end loop;
      end;
      --创建触发器
      procedure sp_Create_Trigger(v_new_dbname varchar2)
      is
        v_sql varchar2(32000);
        v_name varchar2(30);
      begin
        v_name:=substr(v_new_dbname,3);
        v_sql:='';
        --v_sql:=v_sql||' create or replace trigger '||'TR_'||v_new_dbname||' '||chr(10);
        v_sql:=v_sql||' create or replace trigger '||'TR_'||replace(v_new_dbname,'Y#','P#')||' '||chr(10);
        
        v_sql:=v_sql||' before insert or update ON '||v_new_dbname||' FOR EACH ROW '||chr(10);
        v_sql:=v_sql||' begin '||chr(10);
        v_sql:=v_sql||' if inserting then '||chr(10);
        v_sql:=v_sql||'   :new.province:=nvl(:new.province,global_multyear_cz.v_pmdivid); :new.year:=nvl(:new.year,global_multyear_cz.v_pmYear); :new.dbversion:=case when to_char(:new.dbversion,''yyyy-mm-dd'') =''2012-01-01'' then to_date(''2012-01-01'',''yyyy-mm-dd'') else sysdate end;'||chr(10);
        v_sql:=v_sql||' end if; '||chr(10);
        v_sql:=v_sql||' if (to_char(:new.dbversion,''yyyy-mm-dd'') =''2012-01-01'' and ((updating and updating(''dbversion'')) or Inserting )) then '||chr(10)||' '||'  return ; '||chr(10)||'  end if; '||chr(10);
        v_sql:=v_sql||' if updating then '||chr(10);
        v_sql:=v_sql||'   :new.dbversion:=sysdate; '||chr(10);
        v_sql:=v_sql||' end if; '||chr(10);
        v_sql:=v_sql||' end  '||'TR_'||v_new_dbname||';'||chr(10);
        ExecDll_Long(v_sql);
      end;
      --删除索引
      procedure sp_Drop_index(v_tableName varchar2,v_IndName varchar2,v_type varchar2)
      is
        v_sql varchar2(32000);
        v_i   int;
      begin
       if v_type is not null then
           v_sql:='alter table '||v_tableName||' drop constraint '||v_IndName||' cascade';
           ExecDll_Long(v_sql);
           select count(*) into v_i from user_indexes where index_Name=v_IndName;
           if v_i>0 then
             v_sql:='drop index "'||v_IndName||'"';
             ExecDll_Long(v_sql);
           end if;
        else
           --删除同名的索引
           v_sql:='drop index "'||v_IndName||'"';
           ExecDll_Long(v_sql);
        end if;
      end;
      --创建索引
      procedure sp_Create_Index(v_tablename varchar2,v_indexName varchar2,v_type varchar2,ind_cont varchar2,v_flag char default null)
      is
        v_sql varchar2(32000);
      begin
        if global_ismultdb.v_ISMULT='0' or v_flag='1' then
          if v_type is not null then
             v_sql:='alter table '||v_tablename||' add constraint '||v_indexName||' '||v_type||'('||ind_cont||')';
          else
             v_sql:='create index '||v_indexName||' ON '||v_tablename||'('||ind_cont||')';
          end if;
          ExecDll_Long(v_sql);
        end if;
        if global_ismultdb.v_ISMULT='1' then
          if v_type is not null then
            v_sql:='alter table '||v_tablename||' add constraint '||v_indexName||' '||v_type||'('||'YEAR'||ind_cont||')';
          else
            v_sql:='create index '||v_indexName||' ON '||v_tablename||'('||'YEAR'||ind_cont||')';
          end if;
          ExecDll_Long(v_sql);
        end if;
        if global_ismultdb.v_ISMULT='2' then
          if v_type is not null then
            v_sql:='alter table '||v_tablename||' add constraint '||v_indexName||' '||v_type||'('||'PROVINCE,YEAR'||ind_cont||')';
          else
            v_sql:='create index '||v_indexName||' ON '||v_tablename||'('||'PROVINCE,YEAR'||ind_cont||')';
          end if;
          ExecDll_Long(v_sql);
        end if;
      end;
      --增加分区
      procedure sp_Add_Partition(v_flag varchar2,v_tablename varchar2,v_province varchar2,v_tabspace varchar2)
      is
        v_sql varchar2(32000);
        v_tmp varchar2(32000);
        v_i   int;
      begin
        --v_flag,'0'表示参数为年度；‘1’表示参数为区划
        select count(*) into v_i from user_tablespaces where tablespace_name=v_tabspace;
        if v_i < 1 then
          RAISE_APPLICATION_ERROR(-20001,'指定的表空间不存在！');
        end if;
        ------
        if global_ismultdb.v_ISMULT='1' and v_flag='0' then
          --只存在增加年度的情况
          v_sql:='';
          for v_tab in (select table_name from user_part_tables where partitioning_type='LIST') loop
            v_sql:='alter table '||v_tab.table_name||' add partition PY'||v_province||' values('''||v_province||''')'||' TABLESPACE '||v_tabspace||';';
            ExecDll_Long(v_sql);
          end loop;
        end if;
        if global_ismultdb.v_ISMULT='2' then
          v_sql:='';
          if v_flag='0' then --增加一个年度
            --增加子分区[需要程序预先插入记录]
            for v_tab in (select table_name from user_part_tables where partitioning_type='LIST' and Subpartitioning_type='LIST')loop
              select connstrlob(con) into v_sql from (select 'alter table '||v_tab.table_name||' modify partition'||' P'||districtid||' add subpartition '||' P'||districtid||'_Y'||year||' values('''||year||''')'||' TABLESPACE '||id_tabspace||';'||chr(13) as con from pub_t_partition_divid where year=v_province);
              print_output(v_sql);
              --ExecDll_Long(v_sql);
            end loop;
          end if;
          if v_flag='1' then --增加一个区划[需要程序预先插入记录]
            v_sql:='alter table '||v_tablename||' add partition P'||v_province||' values('''||v_province||''')'||' TABLESPACE '||v_tabspace||chr(13)||'(';
            --得到子分区的内容
            select connstrlob(','||'subpartition '||'P'||v_province||'_Y'|| year||' values ('''||year||''') tablespace '||ID_TABSPACE) into v_tmp from pub_t_partition_divid where year<>'*' and districtid=v_province;
            v_sql:=v_sql||substr(v_tmp,2)||')';
            print_output(v_sql);
            ExecDll_Long(v_sql);
          end if;
        end if;
      end;
      --删除分区
      procedure sp_Del_Partition(v_flag varchar2,v_parm varchar2)
      is
        v_sql varchar2(32000);
      begin
        --v_flag,'0'表示参数为年度；‘1’表示参数为区划
        if global_ismultdb.v_ISMULT='1' and v_flag='0' then
          --只存在删除年度的情况
          v_sql:='';
          for v_tab in (select table_name from user_part_tables where partitioning_type='LIST') loop
            v_sql:='alter table '||v_tab.table_name||' drop partition P_Y'||v_parm||';';
            ExecDll_Long(v_sql);
          end loop;
        end if;
        if global_ismultdb.v_ISMULT='2' then
          v_sql:='';
          if v_flag='0' then --删除一个年度
            --删除子分区
            for v_tab in (select table_name from user_part_tables where partitioning_type='LIST' and Subpartitioning_type='LIST')loop
              select connstrlob(con) into v_sql from (select 'alter table '||v_tab.table_name||' modify partition'||' P'||districtid||' drop subpartition '||' P'||districtid||'_Y'||year||';'||chr(13) as con from pub_t_partition_divid where year=v_parm);
              print_output(v_sql);
              --ExecDll_Long(v_sql);
            end loop;
          end if;
          if v_flag='1' then --删除一个区划
            for v_tab in (select table_name from user_part_tables where partitioning_type='LIST' and Subpartitioning_type='LIST' and table_Name='AAAA')loop
              v_sql:='alter table '||v_tab.table_name||' drop partition P'||v_parm||';';
              print_output(v_sql);
              --ExecDll_Long(v_sql);
            end loop;
          end if;
        end if;
      end;
      --重新指定分区表空间
      procedure sp_Change_Tabspace(v_districtid varchar2,v_year varchar2,v_newPart varchar2)
      is
        v_sql varchar2(32000);
      begin
        --v_flag,'0'表示参数为年度；‘1’表示参数为区划
        if global_ismultdb.v_ISMULT='1' then
          --只存在年度的情况
          v_sql:='';
          for v_tab in (select table_name from user_part_tables where partitioning_type='LIST') loop
            v_sql:='alter table '||v_tab.table_name||' Move partition PY'||v_year||' TABLESPACE '||v_newPart||' NOLOGGING '||';';
            ExecDll_Long(v_sql);
          end loop;
        end if;
        if global_ismultdb.v_ISMULT='2' then
          v_sql:='';
          if v_year ='*' then --移动行政区划
            for v_tab in (select table_name from user_part_tables where partitioning_type='LIST' and Subpartitioning_type='LIST')loop
              v_sql:='alter table '||v_tab.table_name||' Move partition P'||v_districtid||' TABLESPACE '||v_newPart||' NOLOGGING '||';';
              print_output(v_sql);
              --ExecDll_Long(v_sql);
            end loop;
          end if;
          if v_year<>'*' then --移动行政区划+年度
            for v_tab in (select table_name from user_part_tables where partitioning_type='LIST' and Subpartitioning_type='LIST' and table_Name='AAAA')loop
              v_sql:='alter table '||v_tab.table_name||' Move partition P'||v_districtid||'_Y'||v_year||' TABLESPACE '||v_newPart||' NOLOGGING '||';';
              print_output(v_sql);
              --ExecDll_Long(v_sql);
            end loop;
          end if;
        end if;
      end;
      ----得到表的语法
      function f_Get_TabStruct(v_tablename varchar2,v_new_tableName varchar2)  Return clob is
        v_tmp varchar2(30000);
        v_last_col  varchar2(30);
        v_pos       int;
        v_pos_1      int;
        v_pos_2      int;
        v_pos_3      int;
        v_pos_othr   int;
      BEGIN
        
        select dbms_metadata.get_ddl('TABLE',v_tablename) into v_tmp from dual;
        --得到最后一列
        select col into v_last_col from (select col from (select column_id orderid,'"'||column_name||'"' col from user_tab_cols where table_Name=v_tablename and column_id is not null) fff order by orderid desc)sss where rownum <2;
        v_pos:=instr(v_tmp,v_last_col,1,1);
        v_pos_1:=instr(v_tmp,', '||chr(10),v_pos,1);
        v_pos_2:=instr(v_tmp,' SEGMENT CREATION ',v_pos,1);
        v_pos_3:=instr(v_tmp,' PCTFREE ',v_pos,1);
        if v_pos_1<1 or (v_pos_1>v_pos_2 and v_pos_2>0) or (v_pos_1>v_pos_3 and v_pos_3>0) then
           v_pos_othr:=instr(v_tmp,' SEGMENT CREATION ',v_pos,1);
           if v_pos_othr<1 then
             v_pos_othr:=instr(v_tmp,' PCTFREE ',v_pos,1);
           end if;
           v_pos_1:=v_pos_othr-2;
        end if;
        v_tmp:=substr(v_tmp,1,v_pos_1-1);
        --得到返回的结果
        v_tmp:=v_tmp||chr(13)||'  )';
        --去掉Create table的部分
        v_pos:=instr(v_tmp,' (',1,1);
        v_tmp:='Create Table '||v_new_tableName||chr(13)||substr(v_tmp,v_pos);
        --对province进行特殊处理
        /*v_pos:=instr(v_tmp,'"PROVINCE"',1,1);
        v_pos_1:=instr(v_tmp,'VARCHAR2(',v_pos,1);
        if v_pos_1 > v_pos then
           v_pos_1:=v_pos_1+length('VARCHAR2(');
           v_tmp:=substr(v_tmp,1,v_pos_1-1)||'9'||substr(v_tmp,v_pos_1+1);
        end if;*/
        --如果包含虚列，则需要特殊处理
        return v_tmp;
      end f_Get_TabStruct;
      --得到约束类型
      function f_Get_TabConstraint(v_tablename varchar2,v_ConstraintName varchar2)  Return varchar2 is
        v_i   int;
        v_cons_type varchar2(50);
        v_ret varchar2(100);
      begin
        v_ret:='';
        select count(*),max(constraint_type) into v_i,v_cons_type from user_constraints where table_name=v_tablename and constraint_name=v_ConstraintName;
        if v_i > 0 then
          if v_cons_type ='P' then
            v_cons_type:='primary key';
          end if;
          if v_cons_type ='U' then
            v_cons_type:='unique';
          end if;
          if v_cons_type ='F' then
            v_cons_type:='foreign key';
          end if;
          v_ret:=v_cons_type;
        end if;
        return v_ret;
      end f_Get_TabConstraint;
      --触发器中替换表名
      function f_Get_Tri_RepTabName(v_old_tablename varchar2,v_trigger_Name varchar2,v_type varchar2,v_sysTriName varchar2,v_new_tableName varchar2)  Return clob is
        v_tmp varchar2(30000);
        v_clob clob;
        v_username varchar2(32);
        v_pos int;
        v_pos1 int;
        v_des varchar2(30000);
        v_des_upper varchar2(30000);
      begin
        v_clob:=EMPTY_CLOB;
        v_username:='"'||user||'".';
        v_tmp:='';
        select dbms_metadata.get_ddl('TRIGGER',v_trigger_Name) into v_clob from dual;
        --替换trigger名称
        v_clob:=replace(v_clob,v_userName||'"'||v_trigger_Name||'"','"'||v_trigger_Name||'"');
        v_pos:=instr(replace(upper(v_clob),chr(10),' '),' DECLARE ',1,1);
        v_pos1:=instr(replace(upper(v_clob),chr(10),' '),' BEGIN ',1,1);
        if v_pos < 1 then
         v_pos:=instr(replace(upper(v_clob),chr(10),' '),' BEGIN ',1,1);
        end if;
        if v_pos>v_pos1 and v_pos>0 then
         v_pos:=v_pos1;
        end if;
        --得到触发器定义部分
        v_des:=substr(v_clob,1,v_pos-1);
        v_des_upper:=substr(upper(v_clob),1,v_pos-1);
        v_clob:=substr(v_clob,v_pos);
        --替换物理表名
        v_pos:=instr(replace(v_des_upper,chr(10),' '),' ON ',1,1);
        v_pos1:=instr(v_des_upper,v_old_tablename,v_pos,1);
        v_tmp:=substr(v_des,v_pos,v_pos1+length(v_old_tablename)-v_pos);
        v_des:=substr(v_des,1,v_pos-1)||' ON '||v_new_tableName||substr(v_des,v_pos1+length(v_old_tablename));
        --增加触发器的次序
        /*if v_type='BEFORE EACH ROW' and instr(replace(v_des_upper,chr(10),' '),' FOLLOWS ',1,1)<1 then
          v_des:=v_des||' FOLLOWS '||v_sysTriName||' ';
        end if;*/
        --替换无用的alter trigger语句
        v_pos:=instr(v_clob,'ALTER TRIGGER "',1,1);
        v_tmp:=substr(v_clob,v_pos);
        v_clob:=replace(v_clob,v_tmp,'');
        --产生最终的sql脚本
        v_clob:=v_des||v_clob;
        return v_clob;
      end f_Get_Tri_RepTabName;
      ----插入数据
      procedure sp_Tab_InsertData(v_oldname varchar2,v_newName varchar2,v_districtid varchar2 default null)
      is
        v_sql varchar2(32000);
        v_tmp varchar2(32000);
      begin
        select connstra(','||column_name) into v_tmp from user_tab_cols where table_Name=v_oldname and column_id is not null and column_name not in ('PROVINCE');
        v_tmp:='PROVINCE'||v_tmp;
        if v_districtid is null then
          v_sql:='insert /*+append*/  into '||v_newName||' nologging ('||v_tmp||') select '||v_tmp||' from '||v_oldname;
        else
          v_sql:='insert /*+append*/  into '||v_newName||' nologging ('||v_tmp||') select case when PROVINCE=''610000'' or PROVINCE=''6100  '' then ''6100'' else PROVINCE end '||v_tmp||' from '||v_oldname||' ';
        end if;
        ExecDll_Long(v_sql);
      end;
      ----重新创建表和数据
      ----前提条件：分区表P#开头，视图表截取P#.
      ----新表名：X#...
      procedure sp_ReCreate_TabAndData(v_oldname varchar2,v_newName varchar2,v_districtid varchar2 default null)
      is
        v_sql varchar2(32000);
        v_tmp varchar2(32000);
        v_indName varchar2(32);
        v_ind_type varchar2(50);
        v_ind_cont varchar2(1000);
        v_i   int;
        v_lob clob;
        v_old_viewName varchar2(30);
        v_new_viewName varchar2(30);
        v_tableid  varchar2(32);
      begin
        --首先判断V_oldName是否存在Province和year字段。
        select count(*) into v_i from user_tab_cols where table_name=upper(v_oldname) and Column_name in ('YEAR','PROVINCE');
        if v_i <> 2 then
          RAISE_APPLICATION_ERROR(-20001,'表'||v_oldname||'中没有同时存在year和Province两个字段！');
        end if;
        -------------------------重新合适的分区表
        select f_Get_TabStruct(v_oldname,v_newName) into v_tmp from dual;
        sp_Create_Table(v_tmp);
        -------------------------新表插入数据
        select count(*) into v_i from pub_t_partition_divid where districtid=v_districtid and rownum <2;
        if v_i>0 then
          --按区划或年度
          sp_Tab_InsertData(v_oldname,v_newName,v_districtid);
        else
          sp_Tab_InsertData(v_oldname,v_newName);
        end if;
        -------------------------创建索引
        for v_rec_Index in (select index_Name from user_indexes where Table_type='TABLE' and INDEX_TYPE<>'LOB' and table_name=v_oldname) loop
          v_IndName:=v_rec_Index.index_Name;
          select f_Get_TabConstraint(v_oldName,v_indName) into v_ind_type from dual;
          --得到索引内容
          select connstra(','||column_name) into v_ind_cont from (select column_name from user_ind_columns where table_name=v_oldname and index_name=v_IndName and column_name not in ('YEAR','PROVINCE') order by column_position);
          --删除原表索引
          sp_Drop_index(v_oldname,v_indName,v_ind_type);
          --
          sp_Create_Index(v_newName,v_indName,v_ind_type,v_ind_cont);
        end loop;
        -------------------------移动其他约束
        for v_rec_constraint in (select constraint_name,Search_condition  from user_constraints where table_name=v_oldname and (generated='USER NAME' or generated='GENERATED NAME') and constraint_type='C') loop
          v_sql:='alter table '||v_newName||' add constraint '||v_rec_constraint.constraint_name||' check ('||v_rec_constraint.search_condition||')';
          --删除原表的约束
          v_tmp:='alter table '||v_oldName||' drop constraint '||v_rec_constraint.constraint_name;
          ExecDll_Long(v_tmp);
          --新表创建约束
          ExecDll_Long(v_sql);
        end loop;
        ------------------------外键
        for v_rec_constraint in (select a.constraint_name,a.table_name source_tabname,b.column_name source_colname ,/*c.OWNER, --外键拥有者*/c.table_name des_tabname,d.column_name des_colname
                                  from user_constraints  a
                                  left join user_cons_columns b
                                              on  a.constraint_name=b.constraint_name
                                  left join user_constraints c
                                              on c.constraint_name=a.R_CONSTRAINT_NAME
                                  left join user_cons_columns d
                                              on c.constraint_name=d.constraint_name
                                  where  a.constraint_type='R'
                                      and  a.table_name=v_oldname ) loop
          v_sql:='alter table '||v_newName||' add constraint '||v_rec_constraint.constraint_name||' foreign key ('||v_rec_constraint.source_colname||') references '||v_rec_constraint.des_tabname||'('||v_rec_constraint.des_colname||')';
          --删除原表的约束
          v_tmp:='alter table '||v_oldName||' drop constraint '||v_rec_constraint.constraint_name;
          ExecDll_Long(v_tmp);
          --新表创建约束
          ExecDll_Long(v_sql);
        end loop;
        -------------------------触发器
        v_lob:=EMPTY_CLOB;
        select count(*) into v_i from user_triggers where trigger_name='TR_P#'||substr(v_newName,3);
        if v_i>0 then
          v_sql:='drop trigger '||'TR_P#'||substr(v_newName,3);
          ExecDll_Long(v_sql);
        end if;
        sp_Create_Trigger(v_newName);
        --迁移触发器
        for v_rec_tri in (select trigger_name,trigger_type,description,length(description) deslen from user_triggers where base_object_type='TABLE' and table_name=v_oldname order by instr(replace(upper(description),chr(10),' '),' FOLLOWS ',1,1) ) loop
          v_lob:=f_Get_Tri_RepTabName(v_oldname,v_rec_tri.trigger_name,v_rec_tri.trigger_type,'TR_P#'||substr(v_newName,3),v_newName);
          --首先删除原触发器
          v_sql:='drop trigger '||v_rec_tri.trigger_name;
          ExecDll_Long(v_sql);
          --再创建新触发器
          ExecDll_Long(v_lob);
        end loop;
        -------------------------创建视图
        v_old_viewName:=substr(v_oldname,3);
        v_new_viewName:='XX'||v_old_viewName;
        --创建视图
        v_tableid:='';
        select max(tableid) into v_tableid from dict_t_model where dbtablename=v_old_viewName;
        if v_tableid is not null then
          sp_Create_View(v_tableid,v_newName,v_new_viewName);
        else
          --正常：v_old_viewName
          sp_Create_View_1(v_newName,v_new_viewName);
        end if;
        --判断视图是否存在
        select count(*) into v_i from user_views where view_name=v_old_viewName;
        if v_i>0 then
          --移动触发器
          for v_rec_tr in (select trigger_name,trigger_type,description,length(description) deslen from user_triggers where base_object_type='VIEW' and table_name=v_old_viewName) loop
            v_lob:=f_Get_Tri_RepTabName(v_old_viewName,v_rec_tr.trigger_name,v_rec_tr.trigger_type,'',v_new_viewName);
            print_output(v_lob);
            --首先删除原触发器
            v_sql:='drop trigger '||v_rec_tr.trigger_name;
            ExecDll_Long(v_sql);
            --再创建新触发器
            ExecDll_Long(v_lob);
          end loop;
          v_sql:='drop View '||v_old_viewName;
          ExecDll_Long(v_sql);
        end if;
        -------------------------其他处理
        v_sql:='drop table '||v_oldname;
        ExecDll_Long(v_sql);
        --修改物理表的名称
        v_sql:='ALTER TABLE '||v_newName||' ReName TO '||'P#'||substr(v_newName,3);
        ExecDll_Long(v_sql);
        --修改视图的名称
        v_sql:='RENAME '||v_New_viewName||' TO '||substr(v_newName,3);
        ExecDll_Long(v_sql);
        ---修正视图
        v_new_viewName:=substr(v_newName,3);
        if v_tableid is not null then
          sp_Create_View(v_tableid,'P#'||v_new_viewName,v_new_viewName);
        else
          --正常：v_old_viewName
          sp_Create_View_1('P#'||v_new_viewName,v_new_viewName);
        end if;
      end;
      ----
      procedure Secu_SP_MANY_Y_CZ_Do(v_table_name varchar2,v_DBNAME_parm varchar2 default null)
      is
        v_ret varchar2(100);
        v_sql varchar2(32000);
        v_dbname varchar2(32);
        v_new_dbname varchar2(32);
        v_dbtable_id varchar2(32);
        v_pos int;
      begin
      --清空错误日志
      execdll_long('truncate table Secu_T_Tmp_LogSecuRec');
      --
      for v_rec_tables in (select upper(v_table_name) as table_name from dual) loop
          v_dbname:=v_rec_tables.table_name;
          v_pos:=instr(v_dbname,'#',1,1);
          if v_pos>1 then
            v_new_dbname:='Y#'||substr(v_dbname,v_pos+1);
          else
            v_new_dbname:='Y#'||substr(v_dbname,1,28);
          end if;
          sp_ReCreate_TabAndData(v_dbname,v_new_dbname,v_DBNAME_parm);
      end loop;
      return ;
      end Secu_SP_MANY_Y_CZ_Do;
end PKG_MULTYEAR;
]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PKG_UTILS</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PACKAGE BODY PKG_UTILS IS

  -- Private type declarations
  
  -- Private constant declarations

  -- Private variable declarations

  -- Function and procedure implementations
  --PROCEDURE EXECCOMMAND(CMD VARCHAR2) AS 
  --LANGUAGE JAVA NAME 'execCommand.execCommand(java.lang.String)';
  
  --FUNCTION  GETCOMMANDRET(CMD VARCHAR2) RETURN VARCHAR2 AS 
  --LANGUAGE JAVA NAME 'execCommand.execCommand(java.lang.String) return java.lang.String';
  FUNCTION REGCHECKDATA(SDATA VARCHAR2,SREGEXP VARCHAR2) RETURN NUMBER IS
  LANGUAGE JAVA NAME 'RegCheck.CheckData(java.lang.String,java.lang.String) return java.lang.int';
  
  FUNCTION ISIDCNO(SDATA VARCHAR2) RETURN NUMBER IS
    V_REGEXP VARCHAR2(4000);
  BEGIN
    v_REGEXP := '^((([1][1-5])|([2][1-3])|([3][1-7])|([4][1-6])|([5][0-4])|([6][1-5]))\d{4}(((?:([1][9]\d{2}(?:(?:0[1,3-9]|1[0-2])(?:29|30)|((?:0[13578]|1[02])31)))|([1][9]\d{2}(?:0[1-9]|1[0-2])(?:0[1-9]|1\d|2[0-8]))|(((?:([1][9](?:0[48]|[2468][048]|[13579][26]))|(?:0[48]00|[2468][048]00|[13579][26]00))0229))))|((?:([2][0]\d{2}(?:(?:0[1,3-9]|1[0-2])(?:29|30)|((?:0[13578]|1[02])31)))|([2][0]\d{2}(?:0[1-9]|1[0-2])(?:0[1-9]|1\d|2[0-8]))|(((?:([2][0](?:0[48]|[2468][048]|[13579][26]))|(?:0[48]00|[2468][048]00|[13579][26]00))0229)))))\d{3}[\dx|X]|(([1][1-5])|([2][1-3])|([3][1-7])|([4][1-6])|([5][0-4])|([6][1-5]))\d{4}(?:([0-9][0-9](?:(?:0[1,3-9]|1[0-2])(?:29|30)|((?:0[13578]|1[02])31)))|([0-9][0-9](?:0[1-9]|1[0-2])(?:0[1-9]|1\d|2[0-8]))|(((?:((?:0[48]|[2468][048]|[13579][26]))|(?:0[48]00|[2468][048]00|[13579][26]00))0229)))\d{3})$';
    IF SDATA IS NULL THEN
       RETURN 0;
    END IF;
    RETURN REGCHECKDATA(SDATA,V_REGEXP);

  END ISIDCNO;
  FUNCTION SPLIT_STRING(P_STRINGLIST CLOB,P_DELIMITER VARCHAR2 DEFAULT ',') RETURN STRINGLIST PIPELINED IS
    V_POS NUMBER;
    V_LEN NUMBER;
    V_TMP VARCHAR2(4000);
    T_LIST T_STRING;
    V_STRING CLOB;
  BEGIN
    IF P_STRINGLIST IS NULL OR P_DELIMITER IS NULL THEN
      RETURN;
    END IF;
    V_LEN := LENGTH(P_DELIMITER);
    V_STRING := P_STRINGLIST;
    LOOP
      V_POS := DBMS_LOB.INSTR(V_STRING,P_DELIMITER);
      EXIT WHEN DBMS_LOB.GETLENGTH(V_STRING) < 1;
      IF V_POS = 1 THEN
        V_TMP := '';
        DBMS_LOB.FRAGMENT_DELETE(V_STRING,V_POS - 1 + V_LEN,1);
      ELSE
        IF V_POS = 0 THEN
          V_TMP := DBMS_LOB.SUBSTR(V_STRING);
          V_STRING := '';
          IF V_TMP IS NOT NULL THEN
            T_LIST.CID := V_TMP;
            PIPE ROW(T_LIST);
          END IF;
          EXIT;
        ELSE
          V_TMP := DBMS_LOB.SUBSTR(V_STRING,V_POS - 1);
          T_LIST.CID := V_TMP;
          PIPE ROW(T_LIST);
          DBMS_LOB.FRAGMENT_DELETE(V_STRING,V_POS - 1 + V_LEN,1);
        END IF;
      END IF;
      IF V_STRING IS NULL THEN
        EXIT;
      END IF;
    END LOOP;
    RETURN;
  END SPLIT_STRING;
  
  FUNCTION SPLIT_STRING(P_STRINGLIST VARCHAR2,P_DELIMITER VARCHAR2 DEFAULT ',') RETURN STRINGLIST PIPELINED IS
    V_POS NUMBER;
    V_LEN NUMBER;
    V_TMP VARCHAR2(4000);
    V_STRING VARCHAR2(4000);
    T_LIST T_STRING;
  BEGIN
    IF P_STRINGLIST IS NULL OR P_DELIMITER IS NULL THEN
      RETURN;
    END IF;
    V_LEN := LENGTH(P_DELIMITER);
    V_STRING := P_STRINGLIST;
    LOOP
      V_POS := INSTR(V_STRING,P_DELIMITER);
      EXIT WHEN V_STRING IS NULL;
      IF V_POS = 1 THEN
        V_TMP := '';
        V_STRING := SUBSTR(V_STRING,V_POS + V_LEN);
      ELSE
        IF V_POS = 0 THEN
          V_TMP := V_STRING;
          V_STRING := '';
          IF V_TMP IS NOT NULL THEN
            T_LIST.CID := V_TMP;
            PIPE ROW(T_LIST);
          END IF;
          EXIT;
        ELSE
          V_TMP := SUBSTR(V_STRING,1,V_POS - 1);
          T_LIST.CID := V_TMP;
          PIPE ROW(T_LIST);
          V_STRING := SUBSTR(V_STRING,V_POS + V_LEN);
        END IF;
      END IF;
      IF V_STRING IS NULL THEN
        EXIT;
      END IF;
    END LOOP;
    RETURN;
  END SPLIT_STRING;
  
  FUNCTION SPLIT_STRING2(P_STRINGLIST VARCHAR2,P_DELIMITER1 VARCHAR2,P_DELIMITER2 VARCHAR2) RETURN VARCHAR2 IS
    V_POS1 NUMBER;
    V_POS2 NUMBER;
    V_RET VARCHAR2(4000);
  BEGIN
    IF P_STRINGLIST IS NULL THEN
      RETURN '';
    END IF;
    IF P_DELIMITER1 IS NULL THEN
      RETURN '';
    END IF;
    
    V_POS1 := INSTR(P_STRINGLIST,P_DELIMITER1);
    
    IF P_DELIMITER2 IS NULL THEN
      IF V_POS1 < 1 THEN
        V_POS1 := 1;
      END IF;
      V_RET := SUBSTR(P_STRINGLIST,1,V_POS1 - 1);
      RETURN V_RET;
    ELSE
      IF V_POS1 < 1 THEN
        V_POS1 := 1;
      ELSE
        V_POS1 := V_POS1 + LENGTH(P_DELIMITER1);
      END IF;
      V_POS2 := INSTR(P_STRINGLIST,P_DELIMITER2,V_POS1);
      IF V_POS2 < 1 THEN
        V_POS2 := LENGTH(P_STRINGLIST) - V_POS1;
      ELSE
        V_POS2 := V_POS2 - V_POS1;
      END IF;
      V_RET := SUBSTR(P_STRINGLIST,V_POS1,V_POS2);
     END IF;
    RETURN V_RET;
  END SPLIT_STRING2;
   
  
  FUNCTION  MD5(S VARCHAR2) RETURN VARCHAR2 AS 
  LANGUAGE JAVA NAME 'ENCRYPT.MD5(java.lang.String) return java.lang.String';
  
  PROCEDURE GETFILELIST(P_PATH VARCHAR2) AS 
  LANGUAGE JAVA NAME 'dirList.getFileList(java.lang.String)';
  
  PROCEDURE DIRLIST(P_DIRECTORY VARCHAR2 DEFAULT 'DATA_PUMP_DIR') AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    --SELECT DIRECTORY_PATH INTO V_PATH FROM DBA_DIRECTORIES WHERE DIRECTORY_NAME = P_DIRECTORY;
    DELETE FROM DATA_T_DIRLIST T WHERE T.FILEPATH = UPPER(TRIM(P_DIRECTORY));
    GETFILELIST(UPPER(TRIM(P_DIRECTORY)));
    COMMIT;
    RETURN;
  END DIRLIST;
  
  FUNCTION READFILE(FILE_NAME VARCHAR2,P_DIR VARCHAR2 DEFAULT 'DATA_PUMP_DIR') RETURN BLOB
  AS
    V_FILE BFILE;
    V_DATA BLOB;
  BEGIN
    BEGIN
      V_FILE := BFILENAME(P_DIR,FILE_NAME);
      IF DBMS_LOB.FILEEXISTS(V_FILE) !=0 THEN
        DBMS_LOB.OPEN(V_FILE, DBMS_LOB.LOB_READONLY);
        DBMS_LOB.CREATETEMPORARY(V_DATA,FALSE,DBMS_LOB.CALL);
        DBMS_LOB.OPEN(V_DATA, DBMS_LOB.LOB_READWRITE);
        DBMS_LOB.LOADFROMFILE(V_DATA, V_FILE,DBMS_LOB.GETLENGTH(V_FILE));
        
      END IF;
    EXCEPTION WHEN OTHERS THEN
      IF DBMS_LOB.ISOPEN(V_FILE) = 1 THEN
        DBMS_LOB.CLOSE(V_FILE);
      END IF;
      IF DBMS_LOB.ISOPEN(V_DATA) = 1 THEN
        DBMS_LOB.CLOSE(V_DATA);
      END IF;
      RAISE;
      RETURN EMPTY_BLOB();
    END;
    IF DBMS_LOB.ISOPEN(V_FILE) = 1 THEN
      DBMS_LOB.CLOSE(V_FILE);
    END IF;
    IF DBMS_LOB.ISOPEN(V_DATA) = 1 THEN
      DBMS_LOB.CLOSE(V_DATA);
    END IF;
    RETURN V_DATA;
  END READFILE;
  
  PROCEDURE REMOVEFILE(FILE_NAME VARCHAR2,P_DIR VARCHAR2 DEFAULT 'DATA_PUMP_DIR')
  AS
    V_FILE BFILE;
  BEGIN
    V_FILE := BFILENAME(P_DIR,FILE_NAME);
    IF DBMS_LOB.FILEEXISTS(V_FILE) !=0 THEN
      IF DBMS_LOB.ISOPEN(V_FILE) = 1 THEN
        DBMS_LOB.CLOSE(V_FILE);
      END IF;
      UTL_FILE.FREMOVE( P_DIR,FILE_NAME);
    END IF;
    IF DBMS_LOB.ISOPEN(V_FILE) = 1 THEN
      DBMS_LOB.CLOSE(V_FILE);
    END IF;
    RETURN;
  END REMOVEFILE;
  
  PROCEDURE EXPDP AS
    V_LOG VARCHAR2(100);
    V_DMP VARCHAR2(100);
    V_USER VARCHAR2(30);
    V_DIR VARCHAR2(32);
    V_JOB NUMBER;
    IND NUMBER; -- Loop index
    JOB_STATE VARCHAR2(30); -- To keep track of job state
    LE KU$_LOGENTRY; -- For WIP and error messages
    JS KU$_JOBSTATUS; -- The job status from get_status
    --JD KU$_JOBDESC; -- The job description from get_status
    STS KU$_STATUS; -- The status object returned by get_status
    V_AMOUNT NUMBER;
  BEGIN 
    SELECT USER INTO V_USER FROM DUAL;
    SELECT COUNT(*) INTO V_AMOUNT FROM USER_DATAPUMP_JOBS WHERE JOB_NAME = V_USER||'_EXP_JOB' AND STATE = 'EXECUTING';
    IF V_AMOUNT > 0 THEN
      RETURN;
    END IF;
    
    V_DMP := V_USER||'_'||TO_CHAR(SYSDATE,'FXYYYYMMDDHH24MI');
    V_LOG := V_DMP||'.log';
    V_DMP := V_DMP||'.dmp';
    V_DIR := 'DATA_PUMP_DIR';
    
    V_JOB := DBMS_DATAPUMP.OPEN(OPERATION => 'EXPORT',JOB_MODE => 'SCHEMA',JOB_NAME => V_USER||'_EXP_JOB');
    DBMS_DATAPUMP.ADD_FILE(HANDLE => V_JOB,FILENAME => V_DMP,DIRECTORY => V_DIR,FILETYPE => DBMS_DATAPUMP.KU$_FILE_TYPE_DUMP_FILE);
    DBMS_DATAPUMP.ADD_FILE(HANDLE => V_JOB,FILENAME => V_LOG,DIRECTORY => V_DIR,FILETYPE => DBMS_DATAPUMP.KU$_FILE_TYPE_LOG_FILE);
    --DBMS_DATAPUMP.SET_PARALLEL(HANDLE => V_JOB,DEGREE => 4);
    DBMS_DATAPUMP.SET_PARAMETER(HANDLE => V_JOB,NAME => 'COMPRESSION',VALUE => 'ALL');
    DBMS_DATAPUMP.METADATA_FILTER(HANDLE => V_JOB,NAME => 'SCHEMA_LIST',VALUE => ''''||V_USER||'''');
    DBMS_DATAPUMP.START_JOB(HANDLE => V_JOB);
    /*
    -- monitor the DataPump job until it completes
    JOB_STATE := 'UNDEFINED';
    --DBMS_LOB.CREATETEMPORARY(V_CLOB,FALSE,DBMS_LOB.CALL);
    WHILE (JOB_STATE != 'COMPLETED') AND (JOB_STATE != 'STOPPED') LOOP
      DBMS_DATAPUMP.GET_STATUS(V_JOB,DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR +DBMS_DATAPUMP.KU$_STATUS_JOB_STATUS +DBMS_DATAPUMP.KU$_STATUS_WIP, -1 , JOB_STATE, STS);
      JS := STS.JOB_STATUS;
      -- IF ANY WORK-IN-PROGRESS OR ERROR MESSAGES WERE RECEIVED, THEN DISPLAY THEM.
      IF (BITAND (STS.MASK, DBMS_DATAPUMP.KU$_STATUS_WIP) != 0) THEN
        LE := STS.WIP;
      ELSE
        IF (BITAND (STS.MASK, DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR) != 0) THEN
          LE := STS.ERROR;
        ELSE
          LE := NULL;
        END IF;
      END IF;
      IF LE IS NOT NULL THEN
        IND := LE.FIRST;
        WHILE IND IS NOT NULL LOOP
          --DBMS_OUTPUT.PUT_LINE (LE(IND).LOGTEXT);
          V_AMOUNT := LENGTHB(LE(IND).LOGTEXT) + 2;
          --DBMS_LOB.WRITEAPPEND(V_CLOB,V_AMOUNT,LE(IND).LOGTEXT||CHR(13)||CHR(10));
          IND := LE.NEXT(IND);
        END LOOP;
      END IF;
    END LOOP;
    */
    DBMS_DATAPUMP.DETACH(HANDLE => V_JOB);
    RETURN;
  END EXPDP;
  
  PROCEDURE EXP_TABLE(P_TABLE VARCHAR2) AS
  BEGIN
    RETURN;
  END EXP_TABLE;
  
  PROCEDURE PUTDMPFILE(P_FILENAME VARCHAR2,P_CONTENT BLOB,P_DIR VARCHAR2 DEFAULT 'DATA_PUMP_DIR') AS
    T_FH UTL_FILE.FILE_TYPE;
    T_LEN PLS_INTEGER := 32767;
    CNT NUMBER;
  BEGIN
    IF DBMS_LOB.FILEEXISTS(BFILENAME(P_DIR,P_FILENAME)) !=0 THEN
      RAISE_APPLICATION_ERROR(-20001,'指定目录下同名文件已经存在！');
      RETURN;
    END IF;
    T_FH := UTL_FILE.FOPEN(P_DIR ,P_FILENAME ,'wb');
    CNT := TRUNC((DBMS_LOB.GETLENGTH(P_CONTENT) - 1) / T_LEN);
    FOR I IN 0 .. CNT LOOP
      UTL_FILE.PUT_RAW(T_FH,DBMS_LOB.SUBSTR(P_CONTENT ,T_LEN ,I * T_LEN + 1));
    END LOOP;
    UTL_FILE.FCLOSE(T_FH);
  END PUTDMPFILE;
  
  PROCEDURE IMPDP(P_FILENAME VARCHAR2,P_IMPORTED_SCHEMA VARCHAR2, P_DIR VARCHAR2 DEFAULT 'DATA_PUMP_DIR') AS
    V_LOG VARCHAR2(100);
    V_DMP VARCHAR2(100);
    V_USER VARCHAR2(30);
    V_JOB NUMBER;
    IND NUMBER; -- Loop index
    JOB_STATE VARCHAR2(30); -- To keep track of job state
    LE KU$_LOGENTRY; -- For WIP and error messages
    JS KU$_JOBSTATUS; -- The job status from get_status
    --JD KU$_JOBDESC; -- The job description from get_status
    STS KU$_STATUS; -- The status object returned by get_status
    V_AMOUNT NUMBER;
  BEGIN
    SELECT COUNT(*) INTO V_AMOUNT FROM USER_DATAPUMP_JOBS WHERE JOB_NAME = 'SCHEMA_IMP_JOB' AND STATE = 'EXECUTING';
    IF V_AMOUNT > 0 THEN
      RETURN;
    END IF;
    SELECT USER INTO V_USER FROM DUAL;
    V_LOG := 'IMP_'||SUBSTR(P_FILENAME,1,LENGTH(P_FILENAME) - 4)||'_'||TO_CHAR(SYSDATE,'FXYYYYMMDDHH24MISS')||'.log';
    V_DMP := P_FILENAME;
    
    
    V_JOB := DBMS_DATAPUMP.OPEN(OPERATION => 'IMPORT',JOB_MODE => 'SCHEMA',JOB_NAME => 'SCHEMA_IMP_JOB');
    DBMS_DATAPUMP.ADD_FILE(HANDLE => V_JOB,FILENAME => V_DMP,DIRECTORY => P_DIR,FILETYPE => DBMS_DATAPUMP.KU$_FILE_TYPE_DUMP_FILE);
    DBMS_DATAPUMP.ADD_FILE(HANDLE => V_JOB,FILENAME => V_LOG,DIRECTORY => P_DIR,FILETYPE => DBMS_DATAPUMP.KU$_FILE_TYPE_LOG_FILE);
    DBMS_DATAPUMP.SET_PARAMETER(HANDLE => V_JOB, NAME =>'TABLE_EXISTS_ACTION' , VALUE => 'REPLACE');
    DBMS_DATAPUMP.METADATA_FILTER(HANDLE => V_JOB,NAME => 'SCHEMA_LIST',VALUE => ''''||P_IMPORTED_SCHEMA||'''');
    DBMS_DATAPUMP.METADATA_REMAP(HANDLE => V_JOB, NAME =>'REMAP_SCHEMA' , OLD_VALUE => P_IMPORTED_SCHEMA, VALUE => V_USER);
    DBMS_DATAPUMP.METADATA_TRANSFORM(HANDLE => V_JOB, NAME => 'OID', VALUE =>'N' );
    DBMS_DATAPUMP.METADATA_TRANSFORM(HANDLE => V_JOB, NAME => 'SEGMENT_ATTRIBUTES', VALUE =>'N' );
    DBMS_DATAPUMP.START_JOB(HANDLE => V_JOB);
    /*
    -- monitor the DataPump job until it completes
    JOB_STATE := 'UNDEFINED';
    --DBMS_LOB.CREATETEMPORARY(V_CLOB,FALSE,DBMS_LOB.CALL);
    WHILE (JOB_STATE != 'COMPLETED') AND (JOB_STATE != 'STOPPED') LOOP
      DBMS_DATAPUMP.GET_STATUS(V_JOB,DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR +DBMS_DATAPUMP.KU$_STATUS_JOB_STATUS +DBMS_DATAPUMP.KU$_STATUS_WIP, -1 , JOB_STATE, STS);
      JS := STS.JOB_STATUS;
      -- IF ANY WORK-IN-PROGRESS OR ERROR MESSAGES WERE RECEIVED, THEN DISPLAY THEM.
      IF (BITAND (STS.MASK, DBMS_DATAPUMP.KU$_STATUS_WIP) != 0) THEN
        LE := STS.WIP;
      ELSE
        IF (BITAND (STS.MASK, DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR) != 0) THEN
          LE := STS.ERROR;
        ELSE
          LE := NULL;
        END IF;
      END IF;
      IF LE IS NOT NULL THEN
        IND := LE.FIRST;
        WHILE IND IS NOT NULL LOOP
          --DBMS_OUTPUT.PUT_LINE (LE(IND).LOGTEXT);
          V_AMOUNT := LENGTHB(LE(IND).LOGTEXT) + 2;
          --DBMS_LOB.WRITEAPPEND(V_CLOB,V_AMOUNT,LE(IND).LOGTEXT||CHR(13)||CHR(10));
          IND := LE.NEXT(IND);
        END LOOP;
      END IF;
    END LOOP;
    */
    DBMS_DATAPUMP.DETACH(HANDLE => V_JOB);
    
    RETURN;
  END IMPDP;
  
  PROCEDURE IMP_TABLE(P_FILENAME VARCHAR2,P_IMPORTED_SCHEMA VARCHAR2,P_TABLE VARCHAR2,P_DIR VARCHAR2 DEFAULT 'DATA_PUMP_DIR') AS
    V_LOG VARCHAR2(100);
    V_DMP VARCHAR2(100);
    V_USER VARCHAR2(30);
    V_JOB NUMBER;
    IND NUMBER; -- Loop index
    JOB_STATE VARCHAR2(30); -- To keep track of job state
    LE KU$_LOGENTRY; -- For WIP and error messages
    JS KU$_JOBSTATUS; -- The job status from get_status
    --JD KU$_JOBDESC; -- The job description from get_status
    STS KU$_STATUS; -- The status object returned by get_status
    V_AMOUNT NUMBER;
  BEGIN
    SELECT COUNT(*) INTO V_AMOUNT FROM USER_DATAPUMP_JOBS WHERE JOB_NAME = 'TABLE_IMP_JOB' AND STATE = 'EXECUTING';
    IF V_AMOUNT > 0 THEN
      RETURN;
    END IF;
    SELECT USER INTO V_USER FROM DUAL;
    V_LOG := 'IMP_'||SUBSTR(P_FILENAME,1,LENGTH(P_FILENAME) - 4)||'_'||TO_CHAR(SYSDATE,'FXYYYYMMDDHH24MISS')||'.log';
    V_DMP := P_FILENAME;
    
    V_JOB := DBMS_DATAPUMP.OPEN(OPERATION => 'IMPORT',JOB_MODE => 'TABLE',JOB_NAME => 'TABLE_IMP_JOB');
    DBMS_DATAPUMP.ADD_FILE(HANDLE => V_JOB,FILENAME => V_DMP,DIRECTORY => P_DIR,FILETYPE => DBMS_DATAPUMP.KU$_FILE_TYPE_DUMP_FILE);
    DBMS_DATAPUMP.ADD_FILE(HANDLE => V_JOB,FILENAME => V_LOG,DIRECTORY => P_DIR,FILETYPE => DBMS_DATAPUMP.KU$_FILE_TYPE_LOG_FILE);
    DBMS_DATAPUMP.SET_PARAMETER(HANDLE => V_JOB, NAME =>'TABLE_EXISTS_ACTION' , VALUE => 'REPLACE');
    DBMS_DATAPUMP.METADATA_FILTER(HANDLE => V_JOB,NAME => 'SCHEMA_LIST',VALUE => ''''||P_IMPORTED_SCHEMA||'''');
    DBMS_DATAPUMP.METADATA_FILTER(HANDLE => V_JOB,NAME => 'NAME_LIST',VALUE => ''''||P_TABLE||'''');
    DBMS_DATAPUMP.METADATA_REMAP(HANDLE => V_JOB, NAME =>'REMAP_SCHEMA' , OLD_VALUE => P_IMPORTED_SCHEMA, VALUE => V_USER);
    DBMS_DATAPUMP.METADATA_TRANSFORM(HANDLE => V_JOB, NAME => 'OID', VALUE =>'N' );
    DBMS_DATAPUMP.METADATA_TRANSFORM(HANDLE => V_JOB, NAME => 'SEGMENT_ATTRIBUTES', VALUE =>'N' );
    DBMS_DATAPUMP.START_JOB(HANDLE => V_JOB);
    -- monitor the DataPump job until it completes
    JOB_STATE := 'UNDEFINED';
    --DBMS_LOB.CREATETEMPORARY(V_CLOB,FALSE,DBMS_LOB.CALL);
    WHILE (JOB_STATE != 'COMPLETED') AND (JOB_STATE != 'STOPPED') LOOP
      DBMS_DATAPUMP.GET_STATUS(V_JOB,DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR +DBMS_DATAPUMP.KU$_STATUS_JOB_STATUS +DBMS_DATAPUMP.KU$_STATUS_WIP, -1 , JOB_STATE, STS);
      JS := STS.JOB_STATUS;
      -- IF ANY WORK-IN-PROGRESS OR ERROR MESSAGES WERE RECEIVED, THEN DISPLAY THEM.
      IF (BITAND (STS.MASK, DBMS_DATAPUMP.KU$_STATUS_WIP) != 0) THEN
        LE := STS.WIP;
      ELSE
        IF (BITAND (STS.MASK, DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR) != 0) THEN
          LE := STS.ERROR;
        ELSE
          LE := NULL;
        END IF;
      END IF;
      IF LE IS NOT NULL THEN
        IND := LE.FIRST;
        WHILE IND IS NOT NULL LOOP
          --DBMS_OUTPUT.PUT_LINE (LE(IND).LOGTEXT);
          V_AMOUNT := LENGTHB(LE(IND).LOGTEXT) + 2;
          --DBMS_LOB.WRITEAPPEND(V_CLOB,V_AMOUNT,LE(IND).LOGTEXT||CHR(13)||CHR(10));
          IND := LE.NEXT(IND);
        END LOOP;
      END IF;
    END LOOP;
    DBMS_DATAPUMP.DETACH(HANDLE => V_JOB);
    
    RETURN;
  END IMP_TABLE;

BEGIN
  -- Initialization
  RETURN;
END PKG_UTILS;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PKG_FORMULA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PACKAGE BODY PKG_FORMULA IS

  -- Private type declarations
  
  -- Private constant declarations

  -- Private variable declarations
  

  -- Function and procedure implementations
  --替换字符串中类似于@COLUMN_NAME@的参数为P_TABLE中的列名，并加上P_TABLE指定的P_ALIAS别名前缀,如：P_ALIAS.COLUMN_NAME
  FUNCTION REPLACE_PARAMETER(P_DATA VARCHAR2,P_TABLE VARCHAR2,P_ALIAS VARCHAR2) RETURN VARCHAR2 IS
    V_START NUMBER;
    V_END NUMBER;
    V_LEN NUMBER;
    V_PRE VARCHAR2(100);
    V_COL VARCHAR2(100);
    V_DATA VARCHAR2(30000);
  BEGIN
    IF P_DATA IS NULL THEN
      RETURN P_DATA;
    END IF;
    V_DATA := P_DATA;
    IF P_ALIAS IS NULL THEN
      V_PRE := '';
    ELSE
      V_PRE := P_ALIAS||'.';
    END IF;
    LOOP
      V_START := INSTR(V_DATA,'@');
      EXIT WHEN  V_START < 1;
      V_END := INSTR(V_DATA,'@',V_START + 1);
      IF V_END < 1 THEN
        EXIT;
      END IF;
      V_LEN := V_END - V_START - 1;
      V_COL := UPPER(TRIM(SUBSTR(V_DATA,V_START + 1,V_LEN)));
      SELECT COUNT(*) INTO V_LEN FROM USER_TAB_COLUMNS WHERE TABLE_NAME = P_TABLE AND COLUMN_NAME = V_COL;
      IF V_LEN > 0 THEN
        V_DATA := REPLACE(V_DATA,'@'||V_COL||'@',V_PRE||V_COL);
      END IF;
    END LOOP;
    RETURN V_DATA;
  END REPLACE_PARAMETER;
  
  --视图表创建INSTEAD OF 触发器
  PROCEDURE P_CREATE_VIEW_TRIGGER(P_TABLEID VARCHAR2) IS
    V_SQL CLOB ;
    V_TABLENAME VARCHAR2(30);
    V_COLLIST VARCHAR2(32760);
    V_DATALIST VARCHAR2(32760);
    V_UPDATELIST VARCHAR2(32760);
    V_TMP CLOB;
    V_CNT NUMBER;
    V_AMOUNT NUMBER;
    V_ISTASK VARCHAR2(32);
  BEGIN
    V_COLLIST := ',';
    V_DATALIST := ',';
    SELECT DBTABLENAME,ISTASK INTO V_TABLENAME,V_ISTASK FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    V_TABLENAME := TRIM(UPPER(V_TABLENAME));
    SELECT COUNT(*) INTO V_CNT FROM USER_VIEWS WHERE VIEW_NAME = V_TABLENAME;
    IF V_CNT < 1 THEN
      RETURN;
    END IF;
    
    FOR C_COL IN (SELECT DATATYPE,DBCOLUMNNAME FROM DICT_T_FACTOR 
      WHERE TABLEID = P_TABLEID AND ISLEAF = '1' AND ISVIRTUAL = '0' AND ISBANDCOL = '0'
      AND DBCOLUMNNAME IN (SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'P#'||V_TABLENAME)) LOOP
      V_COLLIST := V_COLLIST||C_COL.DBCOLUMNNAME||',';
      IF C_COL.DBCOLUMNNAME = 'DATAKEY' THEN
        V_DATALIST := V_DATALIST||'NVL(:NEW.'||C_COL.DBCOLUMNNAME||',RAWTOHEX(SYS_GUID())),';
      ELSE
        V_DATALIST := V_DATALIST||':NEW.'||C_COL.DBCOLUMNNAME||',';
      END IF;
    END LOOP;
    V_COLLIST := SUBSTR(V_COLLIST,2);
    V_COLLIST := SUBSTR(V_COLLIST,1,LENGTH(V_COLLIST) - 1);
    V_DATALIST := SUBSTR(V_DATALIST,2);
    V_DATALIST := SUBSTR(V_DATALIST,1,LENGTH(V_DATALIST) - 1);
    V_UPDATELIST := ' ';
    DBMS_LOB.CREATETEMPORARY(V_TMP,FALSE);
    FOR C_COL IN (SELECT COLUMN_NAME,DATA_TYPE FROM USER_TAB_COLUMNS WHERE TABLE_NAME = V_TABLENAME AND COLUMN_NAME IN (SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'P#'||V_TABLENAME)) LOOP
      IF C_COL.DATA_TYPE = 'CHAR' OR C_COL.DATA_TYPE = 'VARCHAR2'THEN
      V_UPDATELIST := '
    IF UPDATING('''||C_COL.COLUMN_NAME||''') THEN
      V_SQL := V_SQL||'''||C_COL.COLUMN_NAME||'=''''''||:NEW.'||C_COL.COLUMN_NAME||'||'''''','';
    END IF;';
      END IF;
      IF C_COL.DATA_TYPE = 'NUMBER' THEN
        V_UPDATELIST := '
    IF UPDATING('''||C_COL.COLUMN_NAME||''') THEN
      V_SQL := V_SQL||'''||C_COL.COLUMN_NAME||'=''||TO_CHAR(NVL(:NEW.'||C_COL.COLUMN_NAME||',0))||'','';
    END IF;';
      END IF;
      V_AMOUNT := LENGTH(V_UPDATELIST);
      DBMS_LOB.WRITEAPPEND(V_TMP,V_AMOUNT,V_UPDATELIST);
      V_UPDATELIST := ' ';
    END LOOP;
    DBMS_LOB.CREATETEMPORARY(V_SQL,FALSE);
    V_UPDATELIST := '
CREATE OR REPLACE TRIGGER TR_'||V_TABLENAME||'_IDU
INSTEAD OF INSERT OR UPDATE OR DELETE ON '||V_TABLENAME||'
FOR EACH ROW
DECLARE
  V_SQL VARCHAR2(32000);
BEGIN
  IF INSERTING THEN
  INSERT INTO P#'||V_TABLENAME||' ('||V_COLLIST||')
  VALUES('||V_DATALIST||');
  END IF;
  IF DELETING THEN
    DELETE FROM P#'||V_TABLENAME||' 
    WHERE PROVINCE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM(''DIVID'') 
      AND YEAR = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM(''YEAR'') 
      AND STATUS = ''1'' 
      AND DATAKEY = :OLD.DATAKEY';
  IF V_ISTASK = '1' THEN
    V_UPDATELIST := V_UPDATELIST||'
      AND TASKID = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM(''TASKID'')';
  END IF;
  V_UPDATELIST := V_UPDATELIST||';
  END IF;
  IF UPDATING THEN
    V_SQL := ''UPDATE P#'||V_TABLENAME||' SET '';
    ';
    V_AMOUNT := LENGTH(V_UPDATELIST);
    DBMS_LOB.WRITEAPPEND(V_SQL,V_AMOUNT,V_UPDATELIST);
    DBMS_LOB.APPEND(V_SQL,V_TMP);
    
    V_UPDATELIST := '
    V_SQL := SUBSTR(V_SQL,1,LENGTH(V_SQL) -1 );
    V_SQL := V_SQL||'' 
    WHERE PROVINCE = :V_PROVINCE 
      AND YEAR = :V_YEAR 
      AND STATUS = :V_STATUS 
      AND DATAKEY = :V_DATAKEY';
    IF V_ISTASK = '1' THEN
      V_UPDATELIST := V_UPDATELIST||'
      AND TASKID = :V_TASKID';
    END IF;
    V_UPDATELIST := V_UPDATELIST||''';
    EXECUTE IMMEDIATE V_SQL USING GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM(''DIVID''),GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM(''YEAR''),:OLD.STATUS,:OLD.DATAKEY';
    IF V_ISTASK = '1' THEN
      V_UPDATELIST := V_UPDATELIST||',GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM(''TASKID'')';
    END IF;
    V_UPDATELIST := V_UPDATELIST||';
  END IF;
END TR_'||V_TABLENAME||'_IDU;';
    V_AMOUNT := LENGTH(V_UPDATELIST);
    DBMS_LOB.WRITEAPPEND(V_SQL,V_AMOUNT,V_UPDATELIST);
    --DBMS_OUTPUT.PUT_LINE(V_SQL);
    EXECUTE IMMEDIATE V_SQL;
    DBMS_LOB.FREETEMPORARY(V_TMP);
    DBMS_LOB.FREETEMPORARY(V_SQL);
    RETURN;
  END P_CREATE_VIEW_TRIGGER;
  
  PROCEDURE P_DROP_VIEW_TRIGGER(P_TABLEID VARCHAR2) IS
    V_TABLENAME VARCHAR2(30);
    V_TRIGGERNAME VARCHAR2(30);
    V_CNT NUMBER;
  BEGIN
    SELECT DBTABLENAME INTO V_TABLENAME FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    V_TABLENAME := TRIM(UPPER(V_TABLENAME));
    SELECT COUNT(*) INTO V_CNT FROM USER_VIEWS WHERE VIEW_NAME = V_TABLENAME;
    IF V_CNT < 1 THEN
      RETURN;
    END IF;
    
    V_TRIGGERNAME := 'TR_'||V_TABLENAME||'_IDU';
    SELECT COUNT(*) INTO V_CNT FROM USER_TRIGGERS WHERE TRIGGER_NAME = V_TRIGGERNAME AND BASE_OBJECT_TYPE = 'VIEW';
    IF V_CNT < 1 THEN
      RETURN;
    END IF;
    
    --视图上还有其他的触发器则不能删除
    SELECT COUNT(*) INTO V_CNT FROM USER_TRIGGERS WHERE TABLE_NAME =V_TABLENAME AND BASE_OBJECT_TYPE = 'VIEW';
    IF V_CNT > 1 THEN
      RETURN;
    END IF;
    
    EXECUTE IMMEDIATE 'DROP TRIGGER '||V_TRIGGERNAME;

    RETURN;
  END P_DROP_VIEW_TRIGGER;
  
  PROCEDURE P_REFRESH_TRIGGER_8_ALL IS
    V_SQL VARCHAR2(3000);
    V_TABLEID VARCHAR2(3000);
    BEGIN
      FOR C_TRG IN (SELECT TRIGGER_NAME,TABLE_NAME FROM USER_TRIGGERS WHERE TRIGGER_NAME LIKE '%_TR_8') LOOP
        V_SQL := 'DROP TRIGGER '||C_TRG.TRIGGER_NAME;
        EXECUTE IMMEDIATE V_SQL;
        --SELECT TABLEID INTO V_TABLEID FROM DICT_T_MODEL WHERE DBTABLENAME = C_TRG.TABLE_NAME;
        --P_DROP_VIEW_TRIGGER(V_TABLEID);
        --FORMULA_P_GENTRIGGER(V_TABLEID,'8');
      END LOOP;
      FOR V_RECORD IN (SELECT DISTINCT REFTABLEID FROM FORMULA_T_FORMULADETAIL WHERE FORMULATYPE='8' AND LINEID <> 1 
         AND FORMULAID IN (SELECT FORMULAID FROM FORMULA_T_FORMULADEF WHERE FORMULATYPE ='8')) LOOP
          FORMULA_P_GENTRIGGER(V_RECORD.REFTABLEID,'8');
       END LOOP 
      RETURN;
    END P_REFRESH_TRIGGER_8_ALL;

  --字符串替换为空格
  FUNCTION REPLACE_STR(P_CONTENT VARCHAR2) RETURN VARCHAR2 IS
    V_START NUMBER;
    V_END NUMBER;
    V_LEN NUMBER;
    V_CONTENT VARCHAR2(32700);
    V_SPACE VARCHAR2(32700) := ' ';
  BEGIN
    V_CONTENT := P_CONTENT;
    V_START := 1;
    LOOP
      V_START := NVL(INSTR(V_CONTENT,CHR(39),V_START),0);
      IF V_START < 1 THEN 
        EXIT;
      END IF;
      V_END := NVL(INSTR(V_CONTENT,CHR(39),V_START + 1),0);
      EXIT WHEN V_END < 1;
      V_LEN := V_END - V_START - 1;
      IF V_LEN < 1 THEN
        V_START := V_END + 1;
        CONTINUE;
      END IF;
      V_SPACE := ' ';
      V_SPACE := RPAD(V_SPACE,V_LEN,' ');
      V_CONTENT := SUBSTR(V_CONTENT,1,V_START)||V_SPACE||SUBSTR(V_CONTENT,V_END);
      V_START := V_END + 1;
    END LOOP;
    RETURN V_CONTENT;
  END REPLACE_STR;
  
  --判断是否包含列名称
  FUNCTION CONTAIN_COLUMN(P_CONTENT VARCHAR2,P_COLUMN VARCHAR2,P_START NUMBER DEFAULT 0) RETURN NUMBER IS
    V_POS NUMBER;
    V_PRE CHAR(1 CHAR);
    V_NEXT CHAR(1 CHAR);
    V_CONTENT VARCHAR2(32700);
  BEGIN
    --将字符串替换为空格，防止误判字符串中的列名称匹配的字符
    V_CONTENT := UPPER(REPLACE_STR(P_CONTENT));
    V_POS := P_START;
    LOOP
      V_POS := INSTR(V_CONTENT,P_COLUMN,V_POS + 1);
      V_POS := NVL(V_POS,0);
      EXIT WHEN V_POS < 1;
    
      --防止子串替换
      IF V_POS = 1 THEN
        V_PRE := ' ';
      ELSE
        V_PRE := UPPER(SUBSTR(V_CONTENT,V_POS - 1,1));
      END IF;
                                                                                                
      IF V_POS + LENGTH(P_COLUMN) - 1 = LENGTH(V_CONTENT) THEN
        V_NEXT := ' ';
      ELSE
        V_NEXT := UPPER(SUBSTR(V_CONTENT,V_POS + LENGTH(P_COLUMN),1));
      END IF;
      
      IF INSTR('#_@',V_PRE) > 0 THEN
        CONTINUE;
      END IF;
      
      IF INSTR('#_@',V_NEXT) > 0 THEN
        CONTINUE;
      END IF;
      
      IF (V_PRE >= '0' AND V_PRE <= '9') OR (V_PRE >= 'A' AND V_PRE <= 'Z') THEN
        CONTINUE;
      END IF;
      
      IF (V_NEXT >= '0' AND V_NEXT <= '9') OR (V_NEXT >= 'A' AND V_NEXT <= 'Z') THEN
        CONTINUE;
      END IF;
      RETURN V_POS;
    END LOOP;
    RETURN 0;
  END CONTAIN_COLUMN;
    
  FUNCTION F_CHECKFORMULA(V_DATA CLOB) RETURN VARCHAR2 IS
    ERRORMESSAGE VARCHAR2(4000);
    V_SQL        VARCHAR2(32000);
    V_CUR        INT;
    V_CNT        INT;
    DESC_T       DBMS_SQL.DESC_TAB;
    v_num NUMBER(24,6);
  BEGIN
    -- CALL THE PROCEDURE
    V_SQL := V_DATA;
    V_CUR := DBMS_SQL.OPEN_CURSOR;
    BEGIN
      DBMS_SQL.PARSE(V_CUR, V_SQL,DBMS_SQL.NATIVE);
    EXCEPTION
      WHEN OTHERS THEN
        ERRORMESSAGE := '公式语法错误！';
        DBMS_SQL.CLOSE_CURSOR(V_CUR);
        RETURN ERRORMESSAGE;
    END;
    DBMS_SQL.DESCRIBE_COLUMNS(V_CUR, V_CNT, DESC_T);
    IF V_CNT > 1 THEN
      ERRORMESSAGE := '公式返回列过多！';
      DBMS_SQL.CLOSE_CURSOR(V_CUR);
      RETURN ERRORMESSAGE;
    END IF;

    IF DESC_T(1).COL_TYPE <> 2 THEN
      ERRORMESSAGE := '公式返回值必须为数值类型！';
      DBMS_SQL.CLOSE_CURSOR(V_CUR);
      RETURN ERRORMESSAGE;
    END IF;
    BEGIN
      DBMS_SQL.DEFINE_COLUMN(V_CUR,1,V_NUM);
      V_CNT := DBMS_SQL.EXECUTE(V_CUR);
      LOOP
        EXIT WHEN DBMS_SQL.FETCH_ROWS(V_CUR)<=0;
        DBMS_SQL.COLUMN_VALUE(V_CUR,1,V_NUM);
      END LOOP;
 
    EXCEPTION WHEN OTHERS THEN
      ERRORMESSAGE := SQLERRM;
    END;
    DBMS_SQL.CLOSE_CURSOR(V_CUR);
    
    RETURN ERRORMESSAGE;
  END F_CHECKFORMULA;
  
  FUNCTION F_GETPHYSICTABLE(P_TABLEID VARCHAR2) RETURN VARCHAR2 IS
    V_TABLE VARCHAR2(32);
    V_TABLETYPE VARCHAR2(32);
    V_RELATAB VARCHAR2(32);
  BEGIN
    SELECT DBTABLENAME,TABLETYPE,RELATAB INTO V_TABLE,V_TABLETYPE,V_RELATAB FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    IF V_TABLETYPE = '1' THEN
      V_TABLE := 'P#'||V_TABLE;
      RETURN V_TABLE;
    END IF;
    IF V_TABLETYPE = '2' THEN
      RAISE_APPLICATION_ERROR(-20001,'表间公式引用了不可更新视图!');
      RETURN '';
    END IF;
    IF V_TABLETYPE = '3' THEN
      V_TABLE := F_GETPHYSICTABLE(V_RELATAB);
      RETURN V_TABLE;
    END IF;
    
  RETURN V_TABLE;
  END;

  FUNCTION ISEQUSTR( UPDATECOL IN VARCHAR2, RELACOL IN VARCHAR2 ) RETURN BOOLEAN
  IS
    RESULT BOOLEAN;
    V_POS INT;
    V_COL VARCHAR2( 50 );
    V_TMP VARCHAR2( 5000 );
  BEGIN
    RESULT := FALSE;
    IF NVL( REPLACE( UPDATECOL, ' ', '' ), '*' ) = '*' THEN
      RETURN FALSE;
    END IF;

    V_TMP := RELACOL;
    IF NVL( REPLACE( REPLACE( V_TMP, ',', '' ), ' ', '' ), '*****' ) = '*****' THEN
      RETURN FALSE;
    END IF;

    IF NOT ( SUBSTR( V_TMP, LENGTH( V_TMP ), 1 ) = ',' ) THEN
      V_TMP := V_TMP || ',';
    END IF;

    V_POS := INSTR( V_TMP, ',', 1, 1 );
    WHILE ( V_POS > 0 )   LOOP
      V_COL := SUBSTR( V_TMP, 1, V_POS - 1 );
      IF INSTR( UPDATECOL, '@' || V_COL || '@', 1, 1 ) > 0 THEN
         RESULT := TRUE;
         EXIT;
      END IF;

      V_TMP := SUBSTR( V_TMP, V_POS + 1 );
      V_POS := INSTR( V_TMP, ',', 1, 1 );
    END LOOP;
    RETURN RESULT;
  END ISEQUSTR;

  FUNCTION F_GETNEEDUPDATE_689(P_TABLEID IN VARCHAR2)
    RETURN VARCHAR2 IS
    V_NEEDUPDATE VARCHAR2(10000);
    V_TMP VARCHAR2(4000);
    --V_PROJ_FLAG  CHAR(1 CHAR);
  BEGIN
    /*SELECT CASE WHEN COUNT(*) > 0 THEN  '1'  ELSE '0' END
      INTO V_PROJ_FLAG FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID  AND TABLETYPE = '22';*/
    --IF V_PROJ_FLAG = '1' THEN
      /*SELECT CONNSTRA(',C' || FUNDSOURCEID || ',6,') INTO V_NEEDUPDATE
        FROM (SELECT DISTINCT FUNDSOURCEID  FROM CAL_T_OUTWINDOWSET  WHERE FORMULAID <> '001'  AND FORMULAID <> '002') KKK;*/
        /*EXECUTE IMMEDIATE 'SELECT CONNSTRA('','' || Z.DBCOLUMNNAME || '',6,'') STR 
        FROM EXP_S_PROJINVEST X,
        (SELECT DISTINCT FUNDSOURCEID  FROM CAL_T_OUTWINDOWSET  WHERE FORMULAID <> ''001''  AND FORMULAID <> ''002'') Y,
        DICT_T_FACTOR Z
        WHERE X.FUNDSOURCEID = Y.FUNDSOURCEID AND Z.TABLEID = :P_TABLEID AND X.TOBASECOL = Z.COLUMNID' INTO V_NEEDUPDATE USING P_TABLEID;
    ELSE*/
      SELECT CONNSTRA(','||DBCOLUMNNAME||',6,') INTO V_TMP FROM (
      SELECT DISTINCT X.DBCOLUMNNAME
      FROM DICT_T_FACTOR X,CAL_T_OUTWINDOWSET Y
      WHERE X.TABLEID = Y.TABLEID
      AND X.COLUMNID = Y.FUNDSOURCEID
      AND X.TABLEID = P_TABLEID
      AND X.ISLEAF = '1') T;
      SELECT CONNSTRA(',' || FORCOMCOL || ',8,')  INTO V_NEEDUPDATE  FROM FORMULA_T_FORMULADETAIL   WHERE TABLEID = P_TABLEID   AND FORMULATYPE = '8'  AND LINEID = 1;
    --END IF;
    V_NEEDUPDATE := V_NEEDUPDATE ||V_NEEDUPDATE||V_TMP;
    RETURN(V_NEEDUPDATE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN '';
  END F_GETNEEDUPDATE_689;

  PROCEDURE FORMULA_P_PARSECOLUMN (V_TABLEID VARCHAR2,V_FORMULAID VARCHAR2,V_FORMULACON VARCHAR2) IS
    V_POS INT;
    V_POS1 INT;
    V_REFCOMCONT VARCHAR2(32000);
    V_FACTORDBNAME VARCHAR2(100);
    V_TMP_REP VARCHAR2(32000);
    V_REFCOL VARCHAR2(1000);

  BEGIN
    --得到FORCOMCOL
    V_POS := INSTR(V_FORMULACON,'{',1)+1;
    V_POS1 := INSTR(V_FORMULACON,'}',V_POS);
    --得到计算列内容
    V_POS := INSTR(V_FORMULACON,'}=',1) + 2;
    --V_POS1:= INSTR(V_FORMULACON,'}',V_POS);
    V_REFCOMCONT := UPPER(SUBSTR(V_FORMULACON,V_POS));
    V_TMP_REP := V_REFCOMCONT;
    V_REFCOL := ',';
    FOR C_COL IN (SELECT UPPER(DBCOLUMNNAME) COL_NAME FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF = '1' ORDER BY LENGTH(DBCOLUMNNAME) DESC,UPPER(DBCOLUMNNAME) DESC) LOOP
      V_FACTORDBNAME := C_COL.COL_NAME;
      V_POS :=0;
      IF INSTR(V_REFCOL,','||V_FACTORDBNAME||',',1) < 1 THEN
        
          V_POS := CONTAIN_COLUMN(V_TMP_REP,V_FACTORDBNAME);
          IF V_POS > 0 THEN
            V_REFCOL := V_REFCOL || TRIM(V_FACTORDBNAME)||',';
            V_TMP_REP := REPLACE(V_TMP_REP,V_FACTORDBNAME,LPAD('@',LENGTH(V_FACTORDBNAME),'@'));
          END IF;
      END IF;
    END LOOP;

    V_REFCOL := UPPER(V_REFCOL);
    IF LENGTH(V_REFCOL) = 1 THEN
      V_REFCOL := '';
    END IF;
    UPDATE FORMULA_T_FORMULADEF SET REFCOLUMN = V_REFCOL  WHERE TABLEID = V_TABLEID AND FORMULAID = V_FORMULAID;
  END FORMULA_P_PARSECOLUMN;

  PROCEDURE FORMULA_DEF_INSERT_0(TABLEID VARCHAR2,FORMULAID VARCHAR2,FORMULACON VARCHAR2)  IS
    --表内列公式
    V_TABLEID      VARCHAR2(32);
    V_FORMULAID    VARCHAR2(32);
    V_FORMULACON   VARCHAR2(32760);
    ---
    V_DBNAME       VARCHAR2(100);
    V_SQL          VARCHAR2(32760);
    --
    V_POS INT;
    V_POS1 INT;
    V_COUNT  INT;
    V_I INT;
    V_J INT;
    V_FACTORDBNAME VARCHAR2(100);
    V_FORCOMCOL    VARCHAR2(5000);
    V_FACTORNAME   VARCHAR2(200);
    V_REFCOMCONT   VARCHAR2(32760);
    V_REFCOL       VARCHAR2(5000);
    V_TMP          VARCHAR2(32760);
    V_TMP_REP      VARCHAR2(32760);

  BEGIN
      --变量设置
      V_TABLEID := TABLEID;
      V_FORMULAID :=FORMULAID;
      V_FORMULACON := FORMULACON;

      FORMULA_P_PARSECOLUMN(V_TABLEID,V_FORMULAID,V_FORMULACON);
      --得到FORCOMCOL
      V_POS := INSTR(V_FORMULACON,'{',1)+1;
      V_POS1 := INSTR(V_FORMULACON,'}',V_POS);
      V_FORCOMCOL := SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS);
      --保存列都为大写
      V_FORCOMCOL := UPPER(REPLACE(V_FORCOMCOL,' ',''));

      --得到计算列内容
      V_POS := INSTR(V_FORMULACON,'{',V_POS1)+1;
      V_POS1:= INSTR(V_FORMULACON,'}',V_POS);
      V_REFCOMCONT := SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS);
      --得到V_REFCOLUMN
      V_I := 1;
      SELECT COUNT(*) INTO V_COUNT FROM  DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF = '1';
      --将公式计算内容解析到最底层
      --表内列公式，无行公式
      V_TMP_REP := UPPER(V_REFCOMCONT);
      WHILE (V_I <= V_COUNT) LOOP
        SELECT UPPER(DBCOLUMNNAME) INTO V_FACTORDBNAME  FROM (SELECT ROWNUM AS ORDERID,DBCOLUMNNAME FROM (SELECT DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF ='1' ORDER BY LENGTH(DBCOLUMNNAME) DESC,DBCOLUMNNAME DESC)KKK) WHERE ORDERID = V_I;
        V_I := V_I +1;
        --判断是否存在
        V_J :=0;
        
        V_POS := CONTAIN_COLUMN(V_TMP_REP,V_FACTORDBNAME);
            
        IF V_POS > 0 THEN
          SELECT COUNT(*) INTO V_J FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = V_TABLEID AND FORMULATYPE = '0' AND FORMULAID <> V_FORMULAID AND UPPER(FORCOMCOL) = UPPER(V_FACTORDBNAME) AND ROWNUM < 2;
          IF V_J > 0 THEN
            SELECT REFCOMCONT INTO V_TMP FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = V_TABLEID AND FORMULATYPE = '0' AND FORMULAID <> V_FORMULAID AND UPPER(FORCOMCOL) = UPPER(V_FACTORDBNAME) AND ROWNUM < 2;
            V_POS :=0;
            LOOP
              V_POS := CONTAIN_COLUMN(V_TMP_REP,V_FACTORDBNAME,V_POS);
              EXIT WHEN V_POS < 1;
                  
              V_REFCOMCONT := SUBSTR(V_REFCOMCONT,1,V_POS-1)||'('||V_TMP||')'||SUBSTR(V_REFCOMCONT,V_POS+LENGTH(V_FACTORDBNAME));
                                                                                           
              V_TMP_REP := SUBSTR(V_TMP_REP,1,V_POS-1)||'('||UPPER(V_TMP)||')'||SUBSTR(V_TMP_REP,V_POS+LENGTH(V_FACTORDBNAME));
              V_POS:= INSTR(V_TMP_REP,V_FACTORDBNAME,V_POS+LENGTH('('||V_TMP||')'),1);
            END LOOP;
            --从开始重新循环
            V_I := 1;
            V_TMP_REP := V_REFCOMCONT;
          ELSE
              V_TMP_REP := REPLACE(V_TMP_REP,V_FACTORDBNAME,LPAD('@',LENGTH(V_FACTORDBNAME),'@'));
          END IF;
        END IF;
      END LOOP;
      --需要进行替换
      --替换空格,同时前后增加,
      V_I := 1;
      V_TMP_REP := UPPER(V_REFCOMCONT);
      V_REFCOL := ',';
      WHILE (V_I <= V_COUNT) LOOP
        --此聚居保证V_REFCOL的正确
        SELECT UPPER(DBCOLUMNNAME) INTO V_FACTORDBNAME  FROM (SELECT ROWNUM AS ORDERID,DBCOLUMNNAME FROM (SELECT DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF ='1' ORDER BY LENGTH(DBCOLUMNNAME)DESC, DBCOLUMNNAME DESC)KKK ) WHERE ORDERID = V_I;
        V_I := V_I +1;
        IF INSTR(V_REFCOL,','||V_FACTORDBNAME||',',1) < 1 THEN
          V_POS := CONTAIN_COLUMN(V_TMP_REP,V_FACTORDBNAME);
          IF V_POS > 0 THEN
            V_REFCOL := V_REFCOL || V_FACTORDBNAME||',';
            V_TMP_REP := REPLACE(V_TMP_REP,V_FACTORDBNAME,LPAD('@',LENGTH(V_FACTORDBNAME),'@'));
          END if;
        END IF;
      END LOOP;
      --V_REFCOMCONT := UPPER(V_REFCOMCONT);

      --处理
      --V_REFCOL := SUBSTR(V_REFCOL,2,LENGTH(V_REFCOL)-2);
      IF LENGTH(V_REFCOL) = 1 THEN
        V_REFCOL := '';
      END IF;
      
      IF LENGTHB(V_REFCOMCONT) > 32000 THEN
       RAISE_APPLICATION_ERROR(-20001,V_FORCOMCOL||'列公式内容超32000字节长，目前长度为'||TO_CHAR(LENGTHB(V_REFCOMCONT))||'字节。');
       RETURN;
      END IF;
      --插入记录
      --V_REFCOMCONT内容全部修改为大写
      INSERT INTO FORMULA_T_FORMULADETAIL (FORMULAID, LINEID, TABLEID, FORMULATYPE, FORCOMCOL, FORWHERE, REFTABLEID, REFWHERECOL, REFCOLUMN, REFWHERE, REFCOMCONT, FORWHERECOL)
      VALUES(V_FORMULAID,1,V_TABLEID,'0', V_FORCOMCOL,'',V_TABLEID,'',V_REFCOL,'',V_REFCOMCONT,'');
      --公式需要重新计算
      SELECT DBTABLENAME INTO V_DBNAME FROM DICT_T_MODEL WHERE TABLEID = V_TABLEID ;
      --V_SQL := 'UPDATE '||V_DBNAME||' SET '||V_FORCOMCOL||' =('||V_REFCOMCONT||')';
      --判断是否存在TIMESTP
      --SELECT COUNT(*) INTO V_I FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND UPPER(DBCOLUMNNAME)= 'TIMESTP';
      --IF V_I > 0 THEN
      --   V_SQL := 'UPDATE '||V_DBNAME||' SET '||V_FORCOMCOL||' =('||V_REFCOMCONT||'),TIMESTP='''||SYS_GUID()||''' WHERE '||V_FORCOMCOL||' <>('||V_REFCOMCONT||')';
      --ELSE
        V_SQL := 'UPDATE '||V_DBNAME||' SET '||V_FORCOMCOL||' =('||V_REFCOMCONT||') WHERE '||V_FORCOMCOL||' <>('||V_REFCOMCONT||')';
      --END IF;
      EXECUTE IMMEDIATE V_SQL;
      --同步更新引用此列的表内公式
      --得到当前列的中文名称
      SELECT NAME INTO V_FACTORNAME FROM DICT_T_FACTOR WHERE TABLEID =V_TABLEID AND UPPER(DBCOLUMNNAME) =UPPER(V_FORCOMCOL);
      FOR V_RECORD_OTH IN (SELECT FORMULAID, CAST(FORMULADEF AS VARCHAR2(4000)) REFCOMCONT FROM FORMULA_T_FORMULADEF WHERE TABLEID =V_TABLEID AND FORMULATYPE = '0' AND FORMULAID <> V_FORMULAID AND INSTR(REFCOLUMN, UPPER(','||V_FORCOMCOL||','),1,1) > 0) LOOP
         --首先删除记录
         DELETE FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = V_TABLEID AND FORMULAID =V_RECORD_OTH.FORMULAID AND FORMULATYPE='0';
         FORMULA_DEF_INSERT_0(V_TABLEID,V_RECORD_OTH.FORMULAID,V_RECORD_OTH.REFCOMCONT);
      END LOOP;
    END FORMULA_DEF_INSERT_0;

  PROCEDURE FORMULA_DEF_INSERT_8 (TABLEID VARCHAR2,FORMULAID VARCHAR2,FORMULACON VARCHAR2)  AS
    V_TABLEID     VARCHAR2(32);
    V_FORMULAID    VARCHAR2(32);
    V_FORMULACON  VARCHAR2(30000);
    --
    V_POS INT;
    V_POS1 INT;
    V_COUNT  INT;
    V_I INT;
    V_J INT;
    V_NO INT; --序号
    V_FACTORDBNAME VARCHAR2(100);
    V_DBNAME       VARCHAR2(100);
    V_SQL          VARCHAR2(32000);
    --
    V_FORWHERE VARCHAR2(5000);
    V_FORCOMCOL   VARCHAR2(5000);
    V_FORWHERECOL VARCHAR2(5000);
    --
    V_REFTABLEID VARCHAR2(32);
    V_REFWHERE VARCHAR2(5000);
    V_REFWHERECOL   VARCHAR2(5000);
    V_REFCOMCONT    VARCHAR2(5000);
    V_REFCOL     VARCHAR2(5000);
    V_TMP        VARCHAR2(5000);
    V_TMP_REP    VARCHAR2(5000);
    V_TMP_CONTENT VARCHAR2(5000);

  BEGIN
    --变量设置
    --TT(EF95F176586107D6E040A8C0200322E0).〖〗{N2XZBK}=TT(EF95F176586107D6E040A8C0200322E0).〖〗{EXPFUNCCODE}
    V_TABLEID := TABLEID;
    V_FORMULAID :=FORMULAID;
    V_FORMULACON := FORMULACON;
    --取得当前计算列和WHERE条件
    V_POS := 1;
    V_POS1 := INSTR(V_FORMULACON,'〖',V_POS,1);
    V_POS := V_POS1+1;
    V_POS1 := INSTR(V_FORMULACON,'〗',V_POS,1);
    --得到FORWHERE
    V_FORWHERE := TRIM(SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS));
    --得到FORCOOMCOL
    V_POS := INSTR(V_FORMULACON,'{',V_POS)+1;
    V_POS1 := INSTR(V_FORMULACON,'}',V_POS);
    V_FORCOMCOL := UPPER(REPLACE(SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS),' ',''));
    --得到FORWHERECOL
    V_I := 1;
    SELECT COUNT(*) INTO V_COUNT FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF = '1';
    --初始化
    V_TMP_REP := V_FORWHERE;
    IF V_TMP_REP IS NOT NULL THEN
      V_FORWHERECOL := ',';
      WHILE (V_I <= V_COUNT) LOOP
        SELECT UPPER(DBCOLUMNNAME) INTO V_FACTORDBNAME  FROM (SELECT ROWNUM AS ORDERID,DBCOLUMNNAME FROM (SELECT DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF ='1' ORDER BY LENGTH(DBCOLUMNNAME)DESC, DBCOLUMNNAME DESC)KKK ) WHERE ORDERID = V_I;
        V_I := V_I +1;
        IF INSTR(V_FORWHERECOL,','||V_FACTORDBNAME||',',1) < 1 THEN
          
          V_POS := CONTAIN_COLUMN(V_TMP_REP,V_FACTORDBNAME);
          IF V_POS > 0 THEN
            V_FORWHERECOL := V_FORWHERECOL || V_FACTORDBNAME||',';
            V_TMP_REP := REPLACE(V_TMP_REP,V_FACTORDBNAME,LPAD('@',LENGTH(V_FACTORDBNAME),'@'));
          END IF;
        END IF;
      END LOOP;
    END IF;
    --V_FORWHERECOL := SUBSTR(V_FORWHERECOL,2,LENGTH(V_FORWHERECOL)-2);
    IF LENGTH(V_FORWHERECOL) = 1 THEN
      V_FORWHERECOL:= '';
    END IF;
    --------------------------------------------------先插入合计行记录
    V_POS := INSTR(V_FORMULACON,'}',1,1) + 1;
    V_POS1 := INSTR(V_FORMULACON,'=',V_POS,1) + 1;
    V_TMP_CONTENT := SUBSTR(V_FORMULACON,V_POS1);
    V_POS := INSTR(V_TMP_CONTENT,'TT(',1,1);
    V_J   := 2;
    V_NO := 1;
    WHILE (V_POS > 0) LOOP
        V_POS1:= INSTR(V_TMP_CONTENT,'}',V_POS,1)+1;
        V_TMP_CONTENT := SUBSTR(V_TMP_CONTENT,1,V_POS-1)||'CCOMPUTE'||TO_CHAR(V_J)||SUBSTR(V_TMP_CONTENT,V_POS1,LENGTH(V_TMP_CONTENT)-V_POS1+1);
        V_POS := INSTR(V_TMP_CONTENT,'TT(',1,1);
        V_J := V_J+1;
    END LOOP;
    V_REFCOMCONT :=V_TMP_CONTENT;
    --插入记录
    INSERT INTO FORMULA_T_FORMULADETAIL (FORMULAID, LINEID, TABLEID, FORMULATYPE, FORCOMCOL, FORWHERE, REFTABLEID, REFWHERECOL, REFCOLUMN, REFWHERE, REFCOMCONT, FORWHERECOL)
    VALUES(V_FORMULAID,V_NO,V_TABLEID,'8', V_FORCOMCOL,V_FORWHERE,'',V_REFWHERECOL,V_REFCOL,V_REFWHERE,V_REFCOMCONT,V_FORWHERECOL);
    --------------------------------------------------先插入合计行记录
    --根据数据要素
    V_NO := V_NO+1;
    V_POS := INSTR(V_FORMULACON,'TT(',1,2)+3;
    WHILE (V_POS > 3 ) LOOP
      --得到当前表TABLEID
      V_POS1 := INSTR(V_FORMULACON,')',V_POS);
      V_REFTABLEID := SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS);
      IF UPPER(V_REFTABLEID) = UPPER('SELF') THEN
        V_REFTABLEID := V_TABLEID;
      END IF;
      --判断当前表的类型，若是增量的表，则设置增量状态
      --SELECT CASE WHEN MODELRELALVLID <> 'EXP' THEN 1 ELSE 0 END INTO V_ADDSTATUS FROM ELMT_T_MODEL WHERE TABLEID=V_REFTABLEID;
        
      --得到REFWHERE
      V_POS := INSTR(V_FORMULACON,'〖',V_POS1)+1;
      V_POS1 := INSTR(V_FORMULACON,'〗',V_POS,1);
      V_REFWHERE := SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS);
      IF V_REFWHERE IS NULL THEN
        V_REFWHERE := '';
      END IF;
      --得到计算列内容
      V_POS := INSTR(V_FORMULACON,'{',V_POS1)+1;
      V_POS1:= INSTR(V_FORMULACON,'}',V_POS);
      V_REFCOMCONT := SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS);
      --
      V_I := 1;
      --初始化
      V_TMP := V_REFCOMCONT;
      V_TMP_REP := V_REFWHERE;
      V_REFCOL :=',';
      V_REFWHERECOL:=',';
      SELECT COUNT(*) INTO V_COUNT FROM DICT_T_FACTOR WHERE TABLEID = V_REFTABLEID AND ISLEAF = '1';
      WHILE (V_I <= V_COUNT) LOOP
        SELECT UPPER(DBCOLUMNNAME) INTO V_FACTORDBNAME  FROM (SELECT ROWNUM AS ORDERID,DBCOLUMNNAME FROM (SELECT DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = V_REFTABLEID AND ISLEAF ='1' ORDER BY LENGTH(DBCOLUMNNAME)DESC, DBCOLUMNNAME DESC)KKK ) WHERE ORDERID = V_I;
        V_I := V_I +1;
        IF INSTR(V_REFCOL,','||V_FACTORDBNAME||',',1) < 1 THEN
          
          V_POS := CONTAIN_COLUMN(V_TMP,V_FACTORDBNAME);
            
          IF V_POS > 0 THEN
            
            V_REFCOL := V_REFCOL || V_FACTORDBNAME||',';
            V_TMP := REPLACE(V_TMP,V_FACTORDBNAME,LPAD('@',LENGTH(V_FACTORDBNAME),'@'));
          END IF;
        END IF;
                                   
        IF INSTR(V_REFWHERECOL,','||V_FACTORDBNAME||',',1) < 1 THEN
          
          V_POS := CONTAIN_COLUMN(V_TMP_REP,V_FACTORDBNAME);
          IF V_POS > 0 THEN
            V_REFWHERECOL := V_REFWHERECOL || V_FACTORDBNAME||',';
            V_TMP_REP := REPLACE(V_TMP_REP,V_FACTORDBNAME,LPAD('@',LENGTH(V_FACTORDBNAME),'@'));
          END IF;
        END IF;
      END LOOP;
      --V_REFCOL := SUBSTR(V_REFCOL,2,LENGTH(V_REFCOL)-2);
      IF LENGTH(V_REFCOL) = 1 THEN
        V_REFCOL := '';
      END IF;
      --V_REFWHERECOL := SUBSTR(V_REFWHERECOL,2,LENGTH(V_REFWHERECOL)-2);
      IF LENGTH(V_REFWHERECOL) = 1 THEN
        V_REFWHERECOL := '';
      END IF;
      --插入记录
      INSERT INTO FORMULA_T_FORMULADETAIL (FORMULAID, LINEID, TABLEID, FORMULATYPE, FORCOMCOL, FORWHERE, REFTABLEID, REFWHERECOL, REFCOLUMN, REFWHERE, REFCOMCONT, FORWHERECOL)
      VALUES(V_FORMULAID,V_NO,V_TABLEID,'8', V_FORCOMCOL,V_FORWHERE,V_REFTABLEID,V_REFWHERECOL,V_REFCOL,V_REFWHERE,V_REFCOMCONT,V_FORWHERECOL);
      --设置公式计算标志位
      SELECT DBTABLENAME INTO V_DBNAME FROM DICT_T_MODEL WHERE TABLEID = V_TABLEID ;
      V_SQL :='UPDATE '||V_DBNAME ||' SET NEEDUPDATE =NVL(NEEDUPDATE,'' '')||'','||V_FORCOMCOL||',8,'' WHERE INSTR(NVL(NEEDUPDATE,'' ''),'','||V_FORCOMCOL||',8,'',1,1) < 1';
      EXECUTE IMMEDIATE V_SQL;
      --重新计算位置
      V_POS := INSTR(V_FORMULACON,'TT(',V_POS1)+3;
      V_NO  := V_NO +1;
    END LOOP;
    END FORMULA_DEF_INSERT_8;

  PROCEDURE FORMULA_DEF_INSERT_A8 (TABLEID VARCHAR2,FORMULAID VARCHAR2,FORMULACON VARCHAR2)  AS
    V_TABLEID     VARCHAR2(32);
    V_FORMULAID    VARCHAR2(32);
    V_FORMULACON  VARCHAR2(30000);

    --
    V_POS INT;
    V_POS1 INT;
    V_COUNT  INT;
    V_I INT;
    V_J INT;
    V_NO INT; --序号
    V_FACTORDBNAME VARCHAR2(100);
    --
    V_FORWHERE VARCHAR2(5000);
    V_FORCOMCOL   VARCHAR2(5000);
    V_FORWHERECOL VARCHAR2(5000);
    --
    V_REFTABLEID VARCHAR2(32);
    V_REFWHERE VARCHAR2(5000);
    V_REFWHERECOL   VARCHAR2(5000);
    V_REFCOMCONT    VARCHAR2(5000);
    V_REFCOL     VARCHAR2(5000);
    V_TMP        VARCHAR2(5000);
    V_TMP_REP    VARCHAR2(5000);
    V_TMP_CONTENT VARCHAR2(5000);
    --
    V_ADDSTATUS   INT;

    TYPE T_STRINGARRAY IS TABLE OF VARCHAR2(32) INDEX BY PLS_INTEGER;
    V_COLARRY T_STRINGARRAY;
  BEGIN
    --变量设置

    V_TABLEID := TABLEID;
    V_FORMULAID :=FORMULAID;
    V_FORMULACON := FORMULACON;

    --取得当前计算列和WHERE条件
    V_POS := 1;
    V_POS1 := INSTR(V_FORMULACON,'〖',V_POS,1);
    V_POS := V_POS1+1;
    V_POS1 := INSTR(V_FORMULACON,'〗',-1*(LENGTH(V_FORMULACON)-(INSTR(V_FORMULACON,'{',V_POS))+1),1);
    --得到FORWHERE
    V_FORWHERE := TRIM(SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS));
    --得到FORCOOMCOL
    V_POS := INSTR(V_FORMULACON,'{',V_POS)+1;
    V_POS1 := INSTR(V_FORMULACON,'}',V_POS);
    V_FORCOMCOL := UPPER(REPLACE(SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS),' ',''));
    --得到FORWHERECOL
    SELECT COUNT(*) INTO V_COUNT FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF = '1';
    V_I :=0;
    FOR C_COL IN (SELECT UPPER(DBCOLUMNNAME) FACTORDBNAME  FROM (SELECT ROWNUM AS ORDERID,DBCOLUMNNAME FROM (SELECT DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF ='1' ORDER BY LENGTH(DBCOLUMNNAME) DESC,DBCOLUMNNAME DESC)KKK)) LOOP
      V_I := V_I + 1;
      V_COLARRY(V_I):= C_COL.FACTORDBNAME;
    END LOOP;
    V_I := 1;
    --初始化
    V_TMP_REP := V_FORWHERE;
    IF V_TMP_REP IS NOT NULL THEN
      V_FORWHERECOL := ',';
      WHILE (V_I <= V_COUNT) LOOP
        --SELECT UPPER(DBCOLUMNNAME) INTO V_FACTORDBNAME  FROM (SELECT ROWNUM AS ORDERID,DBCOLUMNNAME FROM (SELECT DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF ='1' ORDER BY LENGTH(DBCOLUMNNAME)DESC, DBCOLUMNNAME DESC)KKK ) WHERE ORDERID = V_I;
        V_FACTORDBNAME :=V_COLARRY(V_I);
        V_I := V_I +1;
        IF INSTR(V_FORWHERECOL,','||V_FACTORDBNAME||',',1) < 1 THEN
          V_POS := CONTAIN_COLUMN(V_TMP_REP,V_FACTORDBNAME);
          IF V_POS > 0 THEN  
            V_FORWHERECOL := V_FORWHERECOL || V_FACTORDBNAME||',';
            V_TMP_REP := REPLACE(V_TMP_REP,V_FACTORDBNAME,LPAD('@',LENGTH(V_FACTORDBNAME),'@'));
          END IF;
        END IF;
      END LOOP;
    END IF;
    --V_FORWHERECOL := SUBSTR(V_FORWHERECOL,2,LENGTH(V_FORWHERECOL)-2);
    IF LENGTH(V_FORWHERECOL) = 1 THEN
      V_FORWHERECOL := '';
    END IF;
    --------------------------------------------------先插入合计行记录
    V_POS := INSTR(V_FORMULACON,'}',1,1) + 1;
    V_POS1 := INSTR(V_FORMULACON,'=',V_POS,1) + 1;
    V_TMP_CONTENT := SUBSTR(V_FORMULACON,V_POS1);
    V_POS := INSTR(V_TMP_CONTENT,'TT(',1,1);
    V_J   := 2;
    V_NO := 1;
    WHILE (V_POS > 0) LOOP
        V_POS1:= INSTR(V_TMP_CONTENT,'}',V_POS,1)+1;
        V_TMP_CONTENT := SUBSTR(V_TMP_CONTENT,1,V_POS-1)||'CCOMPUTE'||TO_CHAR(V_J)||SUBSTR(V_TMP_CONTENT,V_POS1,LENGTH(V_TMP_CONTENT)-V_POS1+1);
        V_POS := INSTR(V_TMP_CONTENT,'TT(',1,1);
        V_J := V_J+1;
    END LOOP;
    V_REFCOMCONT :=V_TMP_CONTENT;
    --插入记录
    INSERT INTO FORMULA_T_FORMULADETAIL (FORMULAID, LINEID, TABLEID, FORMULATYPE, FORCOMCOL, FORWHERE, REFTABLEID, REFWHERECOL, REFCOLUMN, REFWHERE, REFCOMCONT, FORWHERECOL)
    VALUES(V_FORMULAID,V_NO,V_TABLEID,'A8', V_FORCOMCOL,V_FORWHERE,'',V_REFWHERECOL,V_REFCOL,V_REFWHERE,V_REFCOMCONT,V_FORWHERECOL);
    --------------------------------------------------先插入合计行记录
    --根据数据要素
    V_NO := V_NO+1;
    V_POS := INSTR(V_FORMULACON,'TT(',1,2)+3;
    WHILE (V_POS > 3 ) LOOP
      --得到当前表TABLEID
      V_POS1 := INSTR(V_FORMULACON,')',V_POS);
      V_REFTABLEID := SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS);
      IF UPPER(V_REFTABLEID) = UPPER('SELF') THEN
        V_REFTABLEID := V_TABLEID;
      END IF;
      --判断当前表的类型，若是增量的表，则设置增量状态
      --SELECT CASE WHEN MODELRELALVLID <> 'EXP' THEN 1 ELSE 0 END INTO V_ADDSTATUS FROM ELMT_T_MODEL WHERE TABLEID=V_REFTABLEID;
      V_ADDSTATUS :='1';
      --得到REFWHERE
      V_POS := INSTR(V_FORMULACON,'(',V_POS1)+1;
      V_POS1 := INSTR(V_FORMULACON,')',-1*(LENGTH(V_FORMULACON)-(INSTR(V_FORMULACON,'{',V_POS))+1),1);
      V_REFWHERE := SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS);
      --得到计算列内容
      V_POS := INSTR(V_FORMULACON,'{',V_POS1)+1;
      V_POS1:= INSTR(V_FORMULACON,'}',V_POS);
      V_REFCOMCONT := SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS);
      --
      V_I := 1;
      --初始化
      V_TMP := V_REFCOMCONT;
      V_TMP_REP := V_REFWHERE;
      V_REFCOL :=',';
      V_REFWHERECOL:=',';
      SELECT COUNT(*) INTO V_COUNT FROM DICT_T_FACTOR WHERE TABLEID = V_REFTABLEID AND ISLEAF = '1';
      WHILE (V_I <= V_COUNT) LOOP
        SELECT UPPER(DBCOLUMNNAME) INTO V_FACTORDBNAME  FROM (SELECT ROWNUM AS ORDERID,DBCOLUMNNAME FROM (SELECT DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = V_REFTABLEID AND ISLEAF ='1' ORDER BY LENGTH(DBCOLUMNNAME)DESC, DBCOLUMNNAME DESC)KKK ) WHERE ORDERID = V_I;
        V_I := V_I +1;
        IF INSTR(V_REFCOL,','||V_FACTORDBNAME||',',1) < 1 THEN
          
          V_POS := CONTAIN_COLUMN(V_TMP,V_FACTORDBNAME);
            
          IF V_POS > 0 THEN
            V_REFCOL := V_REFCOL || V_FACTORDBNAME||',';
            V_TMP := REPLACE(V_TMP,V_FACTORDBNAME,LPAD('@',LENGTH(V_FACTORDBNAME),'@'));
          END IF;
        END IF;
                                   
        IF INSTR(V_REFWHERECOL,','||V_FACTORDBNAME||',',1) < 1 THEN
          V_POS := CONTAIN_COLUMN(V_TMP_REP,V_FACTORDBNAME);
          IF V_POS > 0 THEN
            V_REFWHERECOL := V_REFWHERECOL || V_FACTORDBNAME||',';
            V_TMP_REP := REPLACE(V_TMP_REP,V_FACTORDBNAME,LPAD('@',LENGTH(V_FACTORDBNAME),'@'));
          END IF;
        END IF;
      END LOOP;
      --V_REFCOL := SUBSTR(V_REFCOL,2,LENGTH(V_REFCOL)-2);
      IF LENGTH(V_REFCOL) = 1 THEN
        V_REFCOL := '';
      END IF;
      --V_REFWHERECOL := SUBSTR(V_REFWHERECOL,2,LENGTH(V_REFWHERECOL)-2);
      IF LENGTH(V_FORWHERECOL) = 1 THEN
        V_FORWHERECOL := '';
      END IF;
      --插入记录
      INSERT INTO FORMULA_T_FORMULADETAIL (FORMULAID, LINEID, TABLEID, FORMULATYPE, FORCOMCOL, FORWHERE, REFTABLEID, REFWHERECOL, REFCOLUMN, REFWHERE, REFCOMCONT, FORWHERECOL)
      VALUES(V_FORMULAID,V_NO,V_TABLEID,'A8', V_FORCOMCOL,V_FORWHERE,V_REFTABLEID,V_REFWHERECOL,V_REFCOL,V_REFWHERE,V_REFCOMCONT,V_FORWHERECOL);
        
      --重新计算位置
      V_POS := INSTR(V_FORMULACON,'TT(',V_POS1)+3;
      V_NO  := V_NO +1;
    END LOOP;
    END FORMULA_DEF_INSERT_A8;

  PROCEDURE P_DEF_INSERT_1(TABLEID VARCHAR2,FORMULAID VARCHAR2,FORMULACON VARCHAR2) IS
    --固定行列表和浮动表的单元格公式
    V_TABLEID      VARCHAR2(32);
    V_FORMULAID    VARCHAR2(32);
    V_FORMULACON   VARCHAR2(32760);
    V_LEFT INT;
    V_RIGHT INT;
    V_POS INT;
    V_POS1 INT;

    V_COUNT  INT;
    V_J INT;
    V_FORCOMCOL    VARCHAR2(5000);
    V_REFCOMCONT   VARCHAR2(32760);
    V_REFCOL VARCHAR2(4000);
    V_FORMULA VARCHAR2(4000);
    V_TMP          VARCHAR2(32760);
    V_TMP_REP      VARCHAR2(32760);

    V_REFWHERE VARCHAR2(4000);
    V_FORWHERE VARCHAR2(4000);
      
    V_I NUMBER;
    V_FACTORDBNAME VARCHAR2(32);
    V_TMPWHERE VARCHAR2(4000);
    V_TMPCOL VARCHAR2(4000);

    V_STR VARCHAR2(30000);
    TYPE T_STRINGARRAY IS TABLE OF VARCHAR2(32) INDEX BY PLS_INTEGER;
    V_COLARRY T_STRINGARRAY;
    PROCEDURE PARSE_FORMULACOL_FORMULAWHERE(STR IN VARCHAR2,FORMULACOL OUT VARCHAR2,FORMULAWHERE OUT VARCHAR2) IS
      V_START NUMBER;
      V_END NUMBER;
      BEGIN
        --得到计算列行定位条件
        V_START := INSTR(STR,'〖',1) + 1;
        V_END := INSTR(STR,'〗',V_START);
        FORMULAWHERE := UPPER(TRIM(SUBSTR(STR,V_START,V_END - V_START)));
        --得到FORCOMCOL
        V_START := INSTR(STR,'{',1) + 1;
        V_END := INSTR(STR,'}',V_START);
        FORMULACOL := TRIM(SUBSTR(STR,V_START,V_END - V_START));
        --保存列都为大写
        FORMULACOL := UPPER(REPLACE(FORMULACOL,' ',''));
        RETURN;
      END ;
  BEGIN
    --浮动表公式格式〖fdcode='2030'〗{x1列}=〖fdcode='2035'〗{x2列}+〖fdcode='2035'〗{x列}
    --固定行列表公式格式〖ORDERID=2〗{x1列}=〖ORDERID=2〗{x2列}+〖ORDERID=2〗{x列}
    --变量设置
    V_TABLEID := TABLEID;
    V_FORMULAID :=FORMULAID;
    V_FORMULACON := FORMULACON;

    FORMULA_P_PARSECOLUMN(V_TABLEID,V_FORMULAID,V_FORMULACON);
    --得到公式计算列和行定位条件
    PARSE_FORMULACOL_FORMULAWHERE(V_FORMULACON,V_FORCOMCOL,V_FORWHERE);
    --得到公式内容
    V_POS1 := INSTR(V_FORMULACON,'}=');
    V_FORMULACON := TRIM(SUBSTR(V_FORMULACON,V_POS1 + 2));
    --V_POS := INSTR(V_FORMULACON,'=');
    --V_REFCOMCONT := TRIM(SUBSTR(V_FORMULACON,V_POS + 1));

    SELECT COUNT(*) INTO V_COUNT FROM  DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF = '1';
    V_I :=0;
    FOR C_COL IN (SELECT UPPER(DBCOLUMNNAME) FACTORDBNAME  FROM (SELECT ROWNUM AS ORDERID,DBCOLUMNNAME FROM (SELECT DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF ='1' ORDER BY LENGTH(DBCOLUMNNAME) DESC,DBCOLUMNNAME DESC)KKK)) LOOP
      V_I := V_I + 1;
      V_COLARRY(V_I):= C_COL.FACTORDBNAME;
    END LOOP;
    
    V_REFCOMCONT := V_FORMULACON;
    V_RIGHT := 1;
    LOOP
      V_LEFT := INSTR(V_REFCOMCONT,'〖',V_RIGHT);
      V_RIGHT := INSTR(V_REFCOMCONT,'〗{',V_LEFT);
      V_RIGHT := INSTR(V_REFCOMCONT,'}',V_RIGHT);
      IF V_LEFT < 1 OR V_RIGHT < 1 THEN
        EXIT;
      END IF;
      V_FORMULA := SUBSTR(V_REFCOMCONT,V_LEFT,V_RIGHT - V_LEFT + 1);
      PARSE_FORMULACOL_FORMULAWHERE(V_FORMULA,V_TMP,V_TMP_REP);
      --检查是否有嵌套公式
      --先检查引用列是否列间公式，若是列间公式，则替换
      V_I := 1;
      --V_TMP := ' '||V_TMP||' ';
      WHILE (V_I <= V_COUNT) LOOP
        V_FACTORDBNAME := V_COLARRY(V_I);
        V_I := V_I +1;
        --判断是否存在
        V_POS :=0;
        LOOP
          V_POS := CONTAIN_COLUMN(V_TMP,V_FACTORDBNAME,V_POS);
          EXIT WHEN V_POS < 1;
          SELECT COUNT(*) INTO V_J FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = V_TABLEID AND FORMULATYPE = '0' AND FORCOMCOL = V_FACTORDBNAME;
                  
          IF V_J > 0 THEN
            SELECT REFCOMCONT INTO V_STR FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = V_TABLEID AND FORMULATYPE = '0' AND FORCOMCOL = V_FACTORDBNAME;
            V_STR := '('||V_STR||')';
            V_TMP := SUBSTR(V_TMP,1,V_POS - 1)||V_STR||SUBSTR(V_TMP,V_POS + LENGTH(V_FACTORDBNAME));
            V_POS := V_POS + LENGTH(V_STR) - LENGTH(V_FACTORDBNAME);
          END IF;
        END LOOP;
      END LOOP;
      --将复合公式全部拆解为〖fdcode='2035'〗{x2列}的形式
      V_I := 1;
      V_TMP := ' '||V_TMP||' ';
      WHILE (V_I <= V_COUNT) LOOP
        V_FACTORDBNAME := V_COLARRY(V_I);
        V_I := V_I +1;
        --判断是否存在
        V_POS :=0;
        LOOP
          V_POS := CONTAIN_COLUMN(V_TMP,V_FACTORDBNAME,V_POS);
          EXIT WHEN V_POS < 1;
          V_STR := '〖'||V_TMP_REP||'〗{'||V_FACTORDBNAME||'}';
          V_TMP := SUBSTR(V_TMP,1,V_POS - 1)||V_STR||SUBSTR(V_TMP,V_POS + LENGTH(V_FACTORDBNAME));
          V_POS := V_POS + LENGTH(V_STR) - LENGTH(V_FACTORDBNAME);
        END LOOP;
      END LOOP;
      V_REFCOMCONT := SUBSTR(V_REFCOMCONT,1,V_LEFT - 1)||'('||V_TMP||')'||SUBSTR(V_REFCOMCONT,V_RIGHT + 1);
      V_RIGHT := V_RIGHT + LENGTH(V_TMP) - LENGTH(V_FORMULA);
    END LOOP;
      
    --检查是否单元格公式，若有则解析都底层
    V_RIGHT := 1;
    LOOP
      V_LEFT := INSTR(V_REFCOMCONT,'〖',V_RIGHT);
      V_RIGHT := INSTR(V_REFCOMCONT,'〗{',V_LEFT);
      V_RIGHT := INSTR(V_REFCOMCONT,'}',V_RIGHT);
      IF V_LEFT < 1 OR V_RIGHT < 1 THEN
        EXIT;
      END IF;

      V_FORMULA := SUBSTR(V_REFCOMCONT,V_LEFT,V_RIGHT - V_LEFT + 1 );
      PARSE_FORMULACOL_FORMULAWHERE(V_FORMULA,V_TMP,V_TMP_REP);
        
      SELECT COUNT(*) INTO V_J FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = V_TABLEID AND FORMULATYPE = '1' AND FORCOMCOL = V_TMP AND FORWHERE = V_TMP_REP;
      IF V_J > 0 THEN
        SELECT REFCOMCONT INTO V_TMP FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = V_TABLEID AND FORMULATYPE = '1' AND FORCOMCOL = V_TMP AND FORWHERE = V_TMP_REP;
        V_TMP := '('||V_TMP||')';
        V_REFCOMCONT := SUBSTR(V_REFCOMCONT,1,V_LEFT - 1)||V_TMP||SUBSTR(V_REFCOMCONT,V_RIGHT + 1);
        V_RIGHT := V_RIGHT + LENGTH(V_TMP) + 2 - LENGTH(V_FORMULA);
      END IF;
    END LOOP;
      
    --解析单元格公式条件和列，用于触发器计算
    V_REFWHERE := '';
    V_REFCOL := ',';
    V_RIGHT := 0;
    LOOP
      V_RIGHT := V_RIGHT + 1;
      V_LEFT := INSTR(V_REFCOMCONT,'〖',V_RIGHT);
      V_RIGHT := INSTR(V_REFCOMCONT,'〗{',V_LEFT);
      IF V_LEFT < 1 OR V_RIGHT < 1 THEN
        EXIT;
      END IF;
      --条件以“fdcode='2035'$列|”的形式存在REFWHERE列中
      V_TMPWHERE := TRIM(SUBSTR(V_REFCOMCONT,V_LEFT + 1,V_RIGHT - V_LEFT - 1));
      V_LEFT  := V_RIGHT;
      V_RIGHT := INSTR(V_REFCOMCONT,'}',V_RIGHT);
      V_TMPCOL :=TRIM(SUBSTR(V_REFCOMCONT,V_LEFT + 2,V_RIGHT - V_LEFT - 2));
      IF INSTR('|'||V_REFWHERE,'|'||V_TMPWHERE||'$'||V_TMPCOL||'|') < 1 THEN
        V_REFWHERE := V_REFWHERE||V_TMPWHERE||'$'||V_TMPCOL||'|';
      END IF;
        
      IF INSTR(','||V_REFCOL,','||V_TMPCOL||',') < 1 THEN
        V_REFCOL:= V_REFCOL||V_TMPCOL||',';
      END IF;
        
    END LOOP;
    
    IF LENGTH(V_REFCOL) = 1 THEN
      V_REFCOL := '';
    END IF;
      
    INSERT INTO FORMULA_T_FORMULADETAIL (FORMULAID, LINEID, TABLEID, FORMULATYPE, FORCOMCOL, FORWHERE, REFTABLEID, REFWHERECOL, REFCOLUMN, REFWHERE, REFCOMCONT, FORWHERECOL)
    VALUES(V_FORMULAID,1,V_TABLEID,'1', V_FORCOMCOL,V_FORWHERE,V_TABLEID,'',V_REFCOL,V_REFWHERE,V_REFCOMCONT,'');
  END P_DEF_INSERT_1;

  PROCEDURE P_DROPVOIDTRIGGER(P_TABLEID VARCHAR2 DEFAULT '%') IS
    V_TABLEID VARCHAR2(32);
    V_TRIGGERNAME VARCHAR2(30);
    V_TABLENAME VARCHAR2(32);
    V_CNT INT;
    V_SQL VARCHAR2(1000);
  BEGIN
    --删除无用的表间公式触发器
    IF P_TABLEID IS NULL OR P_TABLEID = '%' THEN
      V_TABLENAME := '%';
    ELSE
      SELECT NVL((SELECT UPPER(DBTABLENAME) FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID),'%') INTO V_TABLENAME FROM DUAL;
    END IF;
    FOR C_TRIGGER IN (SELECT TRIGGER_NAME,TABLE_NAME,BASE_OBJECT_TYPE FROM USER_TRIGGERS WHERE TRIGGER_NAME LIKE '%_TR_8'
                      AND TABLE_NAME NOT IN ( SELECT F_GETPHYSICTABLE(X.REFTABLEID) FROM FORMULA_T_FORMULADETAIL X,DICT_T_MODEL Y WHERE  X.REFTABLEID = Y.TABLEID AND X.FORMULATYPE = '8')) LOOP
      V_TRIGGERNAME :=C_TRIGGER.TRIGGER_NAME;
      V_TABLENAME := C_TRIGGER.TABLE_NAME;
      /*SELECT TABLEID INTO V_TABLEID FROM DICT_T_MODEL WHERE UPPER(DBTABLENAME) = V_TABLENAME;
      IF SUBSTR(V_TRIGGERNAME,-2,2) = '_8' THEN
        SELECT COUNT(*) INTO V_CNT FROM FORMULA_T_FORMULADETAIL WHERE REFTABLEID = V_TABLEID AND FORMULATYPE = '8';
      ELSE
         SELECT COUNT(*) INTO V_CNT FROM FORMULA_T_FORMULADETAIL  WHERE TABLEID = V_TABLEID AND FORMULATYPE = '8' AND (NVL(INSTR(REFWHERE,'@ACCTCODE@',1),0) > 0 OR NVL(INSTR(REFWHERE,'@DEPTID@',1),0) > 0);
      END IF;*/
      --IF V_CNT = 0 THEN
        V_SQL := 'DROP TRIGGER '||V_TRIGGERNAME;
        EXECUTE IMMEDIATE V_SQL;
        IF C_TRIGGER.BASE_OBJECT_TYPE = 'VIEW' THEN
          SELECT COUNT(*) INTO V_CNT FROM USER_TRIGGERS WHERE TABLE_NAME = C_TRIGGER.TABLE_NAME AND TRIGGER_NAME <> 'TR_'||C_TRIGGER.TABLE_NAME||'_IDU';
          IF V_CNT < 1 THEN
            SELECT COUNT(*) INTO V_CNT FROM USER_TRIGGERS WHERE TABLE_NAME = C_TRIGGER.TABLE_NAME AND TRIGGER_NAME = 'TR_'||C_TRIGGER.TABLE_NAME||'_IDU';
            IF V_CNT = 1 THEN
              V_SQL := 'DROP TRIGGER '||'TR_'||C_TRIGGER.TABLE_NAME||'_IDU';
              EXECUTE IMMEDIATE V_SQL;
            END IF;
          END IF;
        END IF;
      --END IF;
    END LOOP;
    --删除无用的视图触发器
    FOR C_TRG IN (SELECT TRIGGER_NAME,TABLE_NAME,BASE_OBJECT_TYPE FROM USER_TRIGGERS  X 
      WHERE BASE_OBJECT_TYPE = 'VIEW' AND X.TRIGGER_NAME = 'TR_'||X.TABLE_NAME||'_IDU' 
      AND NOT EXISTS(SELECT 1 FROM USER_TRIGGERS Y WHERE Y.TABLE_NAME = X.TABLE_NAME AND Y.TRIGGER_NAME <> 'TR_'||X.TABLE_NAME||'_IDU' )) LOOP
      V_SQL := 'DROP TRIGGER '||C_TRG.TRIGGER_NAME;
      EXECUTE IMMEDIATE V_SQL;
    END LOOP;
  END P_DROPVOIDTRIGGER;

  PROCEDURE FORMULA_P_GENTRIGGER (P_REFTABLEID VARCHAR2,V_FORMULATYPE VARCHAR2) IS
  --针对表间公式的触发器的处理
   V_COUNT INT;
   V_POS   INT;
   V_POS1  INT;
   V_TYPE    NUMBER;
   V_COLS    VARCHAR2(4000);
   V_TMP_COL VARCHAR2(1000);
   V_REP1    VARCHAR2(32000);
   V_REP2    VARCHAR2(32000) := ',';
   V_REP4    VARCHAR2(32000);
   V_REP5    VARCHAR2(500);
   V_SQL     VARCHAR2(32000);
   V_ISVIEW NUMBER;
   V_TABLETYPE VARCHAR2(32);
  BEGIN
       SELECT COUNT(*) INTO V_COUNT FROM FORMULA_T_FORMULADETAIL WHERE FORMULATYPE = V_FORMULATYPE AND REFTABLEID = P_REFTABLEID;
       IF V_COUNT < 1 THEN
         RETURN;
       END IF;
       SELECT UPPER(TRIM(DBTABLENAME)),TABLETYPE INTO V_REP1,V_TABLETYPE FROM DICT_T_MODEL WHERE TABLEID=P_REFTABLEID;
       V_REP1 := F_GETPHYSICTABLE(P_REFTABLEID);
       V_ISVIEW := 0;
       --SELECT COUNT(*) INTO V_ISVIEW FROM USER_VIEWS WHERE VIEW_NAME = V_REP1;
       IF V_FORMULATYPE = '8' THEN
           --得到相关列
           V_SQL := 'SELECT CONNSTRA(REFWHERECOL||'',''||REFCOLUMN) COLS  FROM FORMULA_T_FORMULADETAIL WHERE FORMULATYPE=''8'' AND REFTABLEID = :V_TABLEID AND LINEID > 1';
           
           EXECUTE IMMEDIATE V_SQL INTO V_COLS USING P_REFTABLEID;
           --把两个相连的逗号变成一个
           V_COLS := REPLACE(V_COLS,',,',',');
           V_COLS := REPLACE(V_COLS,',,',',');
           V_COLS := REPLACE(V_COLS,',,',',');
           V_POS :=NVL(INSTR(V_COLS,',',1,1),0);
           V_POS1 :=NVL(INSTR(V_COLS,',',V_POS+1,1),0);
           WHILE(V_POS> 0 AND V_POS1 > 0) LOOP
               --得到列
               V_TMP_COL := SUBSTR(V_COLS,V_POS+1,V_POS1-V_POS-1);
               IF V_TMP_COL IS NOT NULL THEN
                 If INSTR(V_REP2,','||V_TMP_COL||',') < 1 THEN
                   --判断列是否合法
                   V_COUNT :=0;
                   SELECT COUNT(*) INTO V_COUNT FROM  DICT_T_FACTOR WHERE TABLEID =P_REFTABLEID AND UPPER(DBCOLUMNNAME) =V_TMP_COL;
                   IF V_COUNT > 0 THEN
                     V_COUNT :=0;
                     SELECT 1,DATATYPE INTO V_COUNT,V_TYPE FROM DICT_T_FACTOR WHERE TABLEID =P_REFTABLEID AND UPPER(DBCOLUMNNAME) =V_TMP_COL;
                     IF  V_COUNT > 0 THEN
                         IF V_ISVIEW = 1 THEN
                           V_REP2 := V_REP2||'UPDATING('''||V_TMP_COL||''') OR ';
                         ELSE
                           V_REP2 :=V_REP2||V_TMP_COL||',';
                         END IF;

                         IF V_TYPE = 1 OR V_TYPE=2 OR V_TYPE=5 THEN
                            V_REP4 :=V_REP4||'||CASE WHEN NVL(:NEW.'||V_TMP_COL||',0)=NVL(:OLD.'||V_TMP_COL||',0) THEN '' '' ELSE ''@'||V_TMP_COL||'@'' END'||CHR(10);
                         END IF;
                         IF V_TYPE = 3 OR V_TYPE=6 THEN
                            V_REP4 :=V_REP4||'||CASE WHEN NVL(:NEW.'||V_TMP_COL||',''***'')=NVL(:OLD.'||V_TMP_COL||',''***'') THEN '' '' ELSE ''@'||V_TMP_COL||'@'' END'||CHR(10);
                         END IF;
                     END IF;
                   END IF;
                 END IF;
               END IF;
               LOOP 
                 EXIT WHEN NVL(INSTR(V_COLS,','||V_TMP_COL||','),0) < 1;
                 V_COLS := REPLACE(V_COLS,','||V_TMP_COL||',',',');
                 V_COLS := REPLACE(V_COLS,',,',',');
               END LOOP;
               --V_COLS := SUBSTR(V_COLS,V_POS+1);
               V_POS := NVL(INSTR(V_COLS,',',1,1),0);
               V_POS1 := NVL(INSTR(V_COLS,',',V_POS+1,1),0);
           END LOOP;
           --产生SQL
           IF V_ISVIEW = 0 THEN
             SELECT REMARK INTO V_SQL FROM DICT_T_PUBLIC WHERE TYPEID ='FORMULA_DIVSORT' AND KEYID='001';
             IF LENGTH(V_REP2) < 2 THEN
               V_REP2 := V_REP2||'STATUS,';
             END IF;
             IF INSTR(V_REP2,',STATUS,') < 1 THEN
               V_REP2 := V_REP2||'STATUS,';
             END IF;
             V_REP2 := SUBSTR(V_REP2,2);
             V_REP2 := SUBSTR(V_REP2,1,LENGTH(V_REP2)-1);
           ELSE
             SELECT REMARK INTO V_SQL FROM DICT_T_PUBLIC WHERE TYPEID ='FORMULA_DIVSORT' AND KEYID='002';
             IF LENGTH(V_REP2) < 2 THEN
               V_REP2 := V_REP2||'UPDATING(''STATUS'') OR ';
             END IF;
             IF INSTR(V_REP2,'UPDATING(''STATUS'') OR ') < 1 THEN
               V_REP2 := V_REP2||'UPDATING(''STATUS'') OR ';
             END IF;
             V_REP2 := SUBSTR(V_REP2,2);
             V_REP2 := SUBSTR(V_REP2,1,LENGTH(V_REP2)-3);
           END IF;
           --V_REP4 :=V_REP4||'||CASE WHEN NVL(:NEW.STATUS,''***'')=NVL(:OLD.STATUS,''***'') THEN '' '' ELSE ''@STATUS@'' END'||CHR(10);
           V_SQL := REPLACE(V_SQL,'@REP1@',V_REP1);
           V_SQL := REPLACE(V_SQL,'@REP2@',V_REP2);
           V_SQL := REPLACE(V_SQL,'@REP3@',P_REFTABLEID);
           V_SQL := REPLACE(V_SQL,'@REP4@',V_REP4);
           
           EXECUTE IMMEDIATE V_SQL;
           --P_CREATE_VIEW_TRIGGER(P_REFTABLEID);
           /*IF V_ISVIEW = '1' THEN
             FORMULA_P_CREATEVIEWTRIGGER(V_TABLEID);
           END IF;*/
           --FORMULA_SP_GENTRIGGER_FOR_AC(V_TABLEID_OTH);
        END IF;
        IF V_FORMULATYPE = '9' THEN --工资统发部分
            --得到相关列
           SELECT CONNSTRA(REFWHERECOL||','||REFCOLUMN) INTO V_COLS  FROM FORMULA_T_FORMULADETAIL WHERE FORMULATYPE='9' AND REFTABLEID =P_REFTABLEID;
           V_POS :=INSTR(V_COLS,',',1,1);
           V_POS1 :=INSTR(V_COLS,',',V_POS+1,1);
           WHILE(V_POS> 0 AND V_POS1 > 0) LOOP
               --得到列
               V_TMP_COL := SUBSTR(V_COLS,V_POS+1,V_POS1-V_POS-1);
               --判断列是否合法
               V_COUNT :=0;
               SELECT COUNT(*) INTO V_COUNT FROM  DICT_T_FACTOR WHERE TABLEID =P_REFTABLEID AND UPPER(DBCOLUMNNAME) =V_TMP_COL;
               IF V_COUNT > 0 THEN
                   V_COUNT :=0;
                   SELECT 1,DATATYPE INTO V_COUNT,V_TYPE FROM DICT_T_FACTOR WHERE TABLEID =P_REFTABLEID AND UPPER(DBCOLUMNNAME) =V_TMP_COL;
                   IF  V_COUNT > 0 THEN
                       V_REP2 :=V_REP2||V_TMP_COL||',';
                       IF V_TYPE = 1 OR V_TYPE=2 THEN
                          V_REP4 :=V_REP4||'||CASE WHEN NVL(:NEW.'||V_TMP_COL||',0)=NVL(:OLD.'||V_TMP_COL||',0) THEN '' '' ELSE ''@'||V_TMP_COL||'@'' END'||CHR(10);
                       END IF;
                       IF V_TYPE = 3 OR V_TYPE=6 THEN
                          V_REP4 :=V_REP4||'||CASE WHEN NVL(:NEW.'||V_TMP_COL||',''***'')=NVL(:OLD.'||V_TMP_COL||',''***'') THEN '' '' ELSE ''@'||V_TMP_COL||'@'' END'||CHR(10);
                       END IF;
                   END IF;
               END IF;
               V_COLS := SUBSTR(V_COLS,V_POS1+1);
               V_POS :=INSTR(V_COLS,',',1,1);
               V_POS1 :=INSTR(V_COLS,',',V_POS+1,1);
           END LOOP;
           --产生SQL
           --SELECT REMARK INTO V_SQL FROM EXP_T_PUBLIC WHERE TYPEID ='FORMULA_DIVSORT' AND KEYID='0002';--PUB_T_SYS_PUBLIC
           V_SQL := REPLACE(V_SQL,'@REP1@',V_REP1);
           V_SQL := REPLACE(V_SQL,'@REP2@',SUBSTR(V_REP2,1,LENGTH(V_REP2)-1));
           V_SQL := REPLACE(V_SQL,'@REP3@',P_REFTABLEID);
           V_SQL := REPLACE(V_SQL,'@REP4@',V_REP4);
           --得到当前TABLEID的SALARYTYPE值
           V_REP5 := ' WHEN (NEW.GENMODE=''1'')';
           V_SQL := REPLACE(V_SQL,'@REP5@',V_REP5);
            EXECUTE IMMEDIATE V_SQL;
        END IF;
  END FORMULA_P_GENTRIGGER;
  
  PROCEDURE P_CREATE_TRIGGER_8(P_TABLEID VARCHAR2) AS
    BEGIN
      FOR C_TAB IN (SELECT DISTINCT REFTABLEID FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = P_TABLEID AND FORMULATYPE = '8' AND LINEID > 1) LOOP
        FORMULA_P_GENTRIGGER(C_TAB.REFTABLEID,'8');
      END LOOP;
      RETURN;
    END P_CREATE_TRIGGER_8;

  PROCEDURE FORMULA_P_GENTRIGGER_6 (P_TABLEID VARCHAR2) IS
  --针对部门预算相关表的触发器的处理
   V_COUNT INT;
   V_POS   INT;
   V_POS1  INT;
   V_TYPE    VARCHAR2(10);
   V_COLS    VARCHAR2(32000);
   V_TMP_COL VARCHAR2(32000);
   V_REP1    VARCHAR2(32000);
   V_REP2    VARCHAR2(32000) := ',';
   V_REP4    VARCHAR2(32000);
   V_SQL     VARCHAR2(32000);
   V_TABLEID_COM VARCHAR2(50);
   V_YEAR    VARCHAR2(4);
   V_MODELTYPE VARCHAR2(10);
   V_ISVIEW NUMBER;
  BEGIN
       --取得当前年度
       V_YEAR := GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR');
       --得到当前支出明细表
       SELECT  TABLEID INTO V_TABLEID_COM FROM DICT_T_MODEL WHERE DEALTYPE='2201' AND ROWNUM < 2;
       --相关列
       SELECT  TRIM(UPPER(DBTABLENAME)),DEALTYPE INTO V_REP1,V_MODELTYPE FROM DICT_T_MODEL WHERE TABLEID=P_TABLEID AND ROWNUM < 2;
       V_REP1 := F_GETPHYSICTABLE(P_TABLEID);
       V_ISVIEW := 0;
       --SELECT COUNT(*) INTO V_ISVIEW FROM USER_VIEWS WHERE VIEW_NAME = V_REP1;
       --得到相关列
       SELECT NVL(CONNSTRA(COLS||','),'*') INTO V_COLS FROM(
       SELECT DISTINCT DICT_T_FACTOR.DBCOLUMNNAME COLS FROM CAL_T_FORMULA,DICT_T_FACTOR
        WHERE DICT_T_FACTOR.TABLEID = P_TABLEID AND INSTR(CAL_T_FORMULA.REFCOLID,DICT_T_FACTOR.COLUMNID,1,1) > 0 
        AND INSTR(CAL_T_FORMULA.REFTABID,P_TABLEID,1,1) > 0) TT;
       ----
       V_COLS := ','||V_COLS;
       V_POS :=INSTR(V_COLS,',',1,1);
       V_POS1 :=INSTR(V_COLS,',',V_POS+1,1);
       WHILE(V_POS> 0 AND V_POS1 > 0) LOOP
           --得到列
           V_TMP_COL := SUBSTR(V_COLS,V_POS+1,V_POS1-V_POS-1);
           --判断列是否合法
           V_COUNT :=0;
           SELECT COUNT(*) INTO V_COUNT FROM  DICT_T_FACTOR WHERE TABLEID =P_TABLEID AND UPPER(DBCOLUMNNAME) =UPPER(V_TMP_COL);
           IF V_COUNT > 0 THEN
               V_COUNT :=0;
               SELECT 1,DATATYPE INTO V_COUNT,V_TYPE FROM DICT_T_FACTOR WHERE TABLEID =P_TABLEID AND UPPER(DBCOLUMNNAME) =UPPER(V_TMP_COL);
               IF  V_COUNT > 0 THEN
                 IF V_ISVIEW = 0 THEN
                   V_REP2 :=V_REP2||V_TMP_COL||',';
                 ELSE
                   V_REP2 := V_REP2||'UPDATING('''||V_TMP_COL||''') OR ';
                 END IF;
                   IF V_TYPE = 1 OR V_TYPE=2 THEN
                      V_REP4 :=V_REP4||'||CASE WHEN NVL(:NEW.'||V_TMP_COL||',0)=NVL(:OLD.'||V_TMP_COL||',0) THEN '' '' ELSE ''@'||V_TMP_COL||'@'' END'||CHR(10);
                   END IF;
                   IF V_TYPE = 3 OR V_TYPE=6 THEN
                      V_REP4 :=V_REP4||'||CASE WHEN NVL(:NEW.'||V_TMP_COL||',''***'')=NVL(:OLD.'||V_TMP_COL||',''***'') THEN '' '' ELSE ''@'||V_TMP_COL||'@'' END'||CHR(10);
                   END IF;
               END IF;
           END IF;
           V_COLS := SUBSTR(V_COLS,V_POS1+1);
           V_POS :=NVL(INSTR(V_COLS,',',1,1),0);
           V_POS1 :=NVL(INSTR(V_COLS,',',V_POS+1,1),0);
       END LOOP;
       --产生sql
       IF V_ISVIEW = 0 THEN
         SELECT REMARK INTO V_SQL FROM DICT_T_PUBLIC WHERE TYPEID ='FORMULA_COMPUTE' AND KEYID='001';
         IF LENGTH(V_REP2) < 2 THEN
           V_REP2 := V_REP2||'STATUS,';
         END IF;
         IF INSTR(V_REP2,',STATUS,') < 1 THEN
           V_REP2 := V_REP2||'STATUS,';
         END IF;
         V_REP2 := SUBSTR(V_REP2,2);
         V_REP2 := SUBSTR(V_REP2,1,LENGTH(V_REP2)-1);
       ELSE
         SELECT REMARK INTO V_SQL FROM DICT_T_PUBLIC WHERE TYPEID ='FORMULA_COMPUTE' AND KEYID='002';
         IF LENGTH(V_REP2) < 2 THEN
           V_REP2 := V_REP2||'UPDATING(''STATUS'') OR ';
         END IF;
         IF INSTR(V_REP2,'UPDATING(''STATUS'') OR ') < 1 THEN
           V_REP2 := V_REP2||'UPDATING(''STATUS'') OR ';
         END IF;
         V_REP2 := SUBSTR(V_REP2,2);
         V_REP2 := SUBSTR(V_REP2,1,LENGTH(V_REP2)-3);
       END IF;
       --SELECT REMARK INTO V_SQL FROM DICT_T_PUBLIC WHERE TYPEID ='FORMULA_COMPUTE' AND KEYID='0001';
       V_SQL := REPLACE(V_SQL,'@REP1@',V_REP1);
       V_SQL := REPLACE(V_SQL,'@REP2@',V_REP2);
       V_SQL := REPLACE(V_SQL,'@REP3@',P_TABLEID);
       V_SQL := REPLACE(V_SQL,'@REP4@',V_REP4);
       V_SQL := REPLACE(V_SQL,'@REP5@',V_TABLEID_COM);
       IF V_MODELTYPE ='32' THEN --多记录的单位基本数字表
         IF V_ISVIEW = 0 THEN
           V_SQL := REPLACE(V_SQL,'@REP6@','ACCTCODE,');
         ELSE
           V_SQL := REPLACE(V_SQL,'@REP6@','UPDATING(''ACCTCODE'') OR ');
         END IF;
         V_SQL := REPLACE(V_SQL,'@REP7@',' OR (UPDATING AND :NEW.ACCTCODE <> :OLD.ACCTCODE)');
       ELSE
         V_SQL := REPLACE(V_SQL,'@REP6@',' ');
         V_SQL := REPLACE(V_SQL,'@REP7@',' ');
       END IF;
       V_SQL := REPLACE(V_SQL,'@REP8@',V_YEAR);
       --dbms_output.put_line(v_SQL);
       BEGIN
       EXECUTE IMMEDIATE V_SQL;
       EXCEPTION WHEN OTHERS THEN
         dbms_output.put_line(v_SQL);
         RAISE;
       END;
       --P_CREATE_VIEW_TRIGGER(P_TABLEID);
  END FORMULA_P_GENTRIGGER_6;

  PROCEDURE FORMULA_P_GENTRIGGER_6_ALL IS
    --创建单位基本数字表相关表的触发器
    V_DBNAME         VARCHAR2(100);
    V_CNT          INT;
    V_REFTABLEID     VARCHAR2(32);
    V_REFTABLEID_ALL VARCHAR2(4000);

  BEGIN
      --先删除原有触发器
      FOR V_RECORD IN (SELECT TABLEID, DBTABLENAME  FROM DICT_T_MODEL  WHERE DEALTYPE IN ('61', '62')  AND INPUTLVL = '3') LOOP
        V_REFTABLEID := V_RECORD.TABLEID;
        V_DBNAME     := V_RECORD.DBTABLENAME;
        SELECT COUNT(*)  INTO V_CNT FROM USER_TRIGGERS  WHERE UPPER(TRIGGER_NAME) = UPPER(V_DBNAME || '_TR_6');
        IF V_CNT > 0 THEN
          EXECUTE IMMEDIATE 'DROP TRIGGER ' || V_DBNAME || '_TR_6';
        END IF;
      END LOOP;

      --创建触发器
      --获得所有被公式引用过的单位级基本数字表
      SELECT CONNSTRA(',' || REFTABID || ',')    INTO V_REFTABLEID_ALL  FROM (SELECT DISTINCT REFTABID FROM CAL_T_FORMULA) AAA;

      FOR C_RECORD IN (SELECT TABLEID FROM DICT_T_MODEL  WHERE INSTR(V_REFTABLEID_ALL,TABLEID,1) > 0  AND DEALTYPE IN ('61', '62')  AND INPUTLVL = '3') LOOP
        V_REFTABLEID := C_RECORD.TABLEID;
        --创建触发器
        FORMULA_P_GENTRIGGER_6(V_REFTABLEID);
      END LOOP;
  END FORMULA_P_GENTRIGGER_6_ALL;
  
  PROCEDURE P_CREATE_FORMULA_TRIGGER(P_TABLEID VARCHAR2) IS
    V_CNT NUMBER;
  BEGIN
    FORMULA_P_GENTRIGGER(P_TABLEID,'8');
    SELECT COUNT(*) INTO V_CNT 
    FROM CAL_T_FORMULA,DICT_T_FACTOR
    WHERE DICT_T_FACTOR.TABLEID = P_TABLEID 
    AND INSTR(CAL_T_FORMULA.REFCOLID,DICT_T_FACTOR.COLUMNID,1,1) > 0 
    AND INSTR(CAL_T_FORMULA.REFTABID,P_TABLEID,1,1) > 0;
    IF V_CNT > 0 THEN
      FORMULA_P_GENTRIGGER_6(P_TABLEID);
    END IF;
    RETURN;
  END P_CREATE_FORMULA_TRIGGER;

  PROCEDURE FORMULA_P_GENTRIGGER_ALL IS
  BEGIN
       FOR V_RECORD IN (SELECT DISTINCT REFTABLEID,FORMULATYPE,TABLEID FROM FORMULA_T_FORMULADETAIL WHERE (FORMULATYPE='8' OR FORMULATYPE='9') AND LINEID <> 1 
         AND FORMULAID IN (SELECT FORMULAID FROM FORMULA_T_FORMULADEF WHERE FORMULATYPE IN ('8','9'))) LOOP
          FORMULA_P_GENTRIGGER(V_RECORD.REFTABLEID,V_RECORD.FORMULATYPE);
       END LOOP ;
       FORMULA_P_GENTRIGGER_6_ALL;
  END FORMULA_P_GENTRIGGER_ALL;
  
  --測算公式定義
  PROCEDURE P_DEF_INSERT_10(P_TABLEID VARCHAR2,P_FORMULAID VARCHAR2,P_FORMULACON VARCHAR2) IS
    V_TABLEID     VARCHAR2(32);
    V_FORMULAID    VARCHAR2(32);
    V_FORMULACON  VARCHAR2(30000);

    --
    V_POS INT;
    V_POS1 INT;
    V_COUNT  INT;
    V_I INT;
    V_J INT;
    V_NO INT; --序号
    V_FACTORDBNAME VARCHAR2(100);
    --
    V_FORWHERE VARCHAR2(5000);
    V_FORCOMCOL   VARCHAR2(5000);
    V_FORWHERECOL VARCHAR2(5000);
    --
    V_REFTABLEID VARCHAR2(32);
    V_REFWHERE VARCHAR2(5000);
    V_REFWHERECOL   VARCHAR2(5000);
    V_REFCOMCONT    VARCHAR2(5000);
    V_REFCOL     VARCHAR2(5000);
    V_TMP        VARCHAR2(5000);
    V_TMP_REP    VARCHAR2(5000);
    V_TMP_CONTENT VARCHAR2(5000);
    --
    V_ADDSTATUS   INT;

    TYPE T_STRINGARRAY IS TABLE OF VARCHAR2(32) INDEX BY PLS_INTEGER;
    V_COLARRY T_STRINGARRAY;
  BEGIN
    --变量设置

    V_TABLEID := P_TABLEID;
    V_FORMULAID :=P_FORMULAID;
    V_FORMULACON := P_FORMULACON;

    --取得当前计算列和WHERE条件
    V_POS := 1;
    V_POS1 := INSTR(V_FORMULACON,'〖',V_POS,1);
    V_POS := V_POS1+1;
    V_POS1 := INSTR(V_FORMULACON,'〗',V_POS);
    --得到FORWHERE
    V_FORWHERE := TRIM(SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS));
    --得到FORCOOMCOL
    V_POS := INSTR(V_FORMULACON,'{',V_POS)+1;
    V_POS1 := INSTR(V_FORMULACON,'}',V_POS);
    V_FORCOMCOL := UPPER(REPLACE(SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS),' ',''));
    --得到FORWHERECOL
    SELECT COUNT(*) INTO V_COUNT FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF = '1';
    V_I :=0;
    FOR C_COL IN (SELECT UPPER(DBCOLUMNNAME) FACTORDBNAME  FROM (SELECT ROWNUM AS ORDERID,DBCOLUMNNAME FROM (SELECT DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF ='1' ORDER BY LENGTH(DBCOLUMNNAME) DESC,DBCOLUMNNAME DESC)KKK)) LOOP
      V_I := V_I + 1;
      V_COLARRY(V_I):= C_COL.FACTORDBNAME;
    END LOOP;
    V_I := 1;
    --初始化
    V_TMP_REP := V_FORWHERE;
    IF V_TMP_REP IS NOT NULL THEN
      V_FORWHERECOL := ',';
      WHILE (V_I <= V_COUNT) LOOP
        --SELECT UPPER(DBCOLUMNNAME) INTO V_FACTORDBNAME  FROM (SELECT ROWNUM AS ORDERID,DBCOLUMNNAME FROM (SELECT DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF ='1' ORDER BY LENGTH(DBCOLUMNNAME)DESC, DBCOLUMNNAME DESC)KKK ) WHERE ORDERID = V_I;
        V_FACTORDBNAME :=V_COLARRY(V_I);
        V_I := V_I +1;
        IF INSTR(V_FORWHERECOL,','||V_FACTORDBNAME||',',1) < 1 THEN
          V_POS := CONTAIN_COLUMN(V_TMP_REP,V_FACTORDBNAME);
          IF V_POS > 0 THEN  
            V_FORWHERECOL := V_FORWHERECOL || V_FACTORDBNAME||',';
            V_TMP_REP := REPLACE(V_TMP_REP,V_FACTORDBNAME,LPAD('@',LENGTH(V_FACTORDBNAME),'@'));
          END IF;
        END IF;
      END LOOP;
    END IF;
    --V_FORWHERECOL := SUBSTR(V_FORWHERECOL,2,LENGTH(V_FORWHERECOL)-2);
    IF LENGTH(V_FORWHERECOL) = 1 THEN
      V_FORWHERECOL := '';
    END IF;
    --------------------------------------------------先插入合计行记录
    V_POS := INSTR(V_FORMULACON,'}',1,1) + 1;
    V_POS1 := INSTR(V_FORMULACON,'=',V_POS,1) + 1;
    V_TMP_CONTENT := SUBSTR(V_FORMULACON,V_POS1);
    V_POS := INSTR(V_TMP_CONTENT,'TT(',1,1);
    V_J   := 2;
    V_NO := 1;
    WHILE (V_POS > 0) LOOP
        V_POS1:= INSTR(V_TMP_CONTENT,'}',V_POS,1)+1;
        V_TMP_CONTENT := SUBSTR(V_TMP_CONTENT,1,V_POS-1)||'CCOMPUTE'||TO_CHAR(V_J)||SUBSTR(V_TMP_CONTENT,V_POS1,LENGTH(V_TMP_CONTENT)-V_POS1+1);
        V_POS := INSTR(V_TMP_CONTENT,'TT(',1,1);
        V_J := V_J+1;
    END LOOP;
    V_REFCOMCONT :=V_TMP_CONTENT;
    --插入记录
    INSERT INTO FORMULA_T_FORMULADETAIL (FORMULAID, LINEID, TABLEID, FORMULATYPE, FORCOMCOL, FORWHERE, REFTABLEID, REFWHERECOL, REFCOLUMN, REFWHERE, REFCOMCONT, FORWHERECOL)
    VALUES(V_FORMULAID,V_NO,V_TABLEID,'10', V_FORCOMCOL,V_FORWHERE,'',V_REFWHERECOL,V_REFCOL,V_REFWHERE,V_REFCOMCONT,V_FORWHERECOL);
    --------------------------------------------------先插入合计行记录
    --根据数据要素
    V_NO := V_NO+1;
    V_POS := INSTR(V_FORMULACON,'TT(',1,2)+3;
    WHILE (V_POS > 3 ) LOOP
      --得到当前表TABLEID
      V_POS1 := INSTR(V_FORMULACON,')',V_POS);
      V_REFTABLEID := SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS);
      IF UPPER(V_REFTABLEID) = UPPER('SELF') THEN
        V_REFTABLEID := V_TABLEID;
      END IF;
      --判断当前表的类型，若是增量的表，则设置增量状态
      --SELECT CASE WHEN MODELRELALVLID <> 'EXP' THEN 1 ELSE 0 END INTO V_ADDSTATUS FROM ELMT_T_MODEL WHERE TABLEID=V_REFTABLEID;
      V_ADDSTATUS :='1';
      --得到REFWHERE
      V_POS := INSTR(V_FORMULACON,'〖',V_POS1)+1;
      V_POS1 := INSTR(V_FORMULACON,'〗',V_POS);
      V_REFWHERE := SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS);
      --得到公式内容
      V_POS := INSTR(V_FORMULACON,'{',V_POS1)+1;
      V_POS1:= INSTR(V_FORMULACON,'}',V_POS);
      V_REFCOMCONT := SUBSTR(V_FORMULACON,V_POS,V_POS1 - V_POS);
      --
      V_I := 1;
      --初始化
      V_TMP := V_REFCOMCONT;
      V_TMP_REP := V_REFWHERE;
      V_REFCOL :=',';
      V_REFWHERECOL:=',';
      SELECT COUNT(*) INTO V_COUNT FROM DICT_T_FACTOR WHERE TABLEID = V_REFTABLEID AND ISLEAF = '1';
      WHILE (V_I <= V_COUNT) LOOP
        SELECT UPPER(DBCOLUMNNAME) INTO V_FACTORDBNAME  FROM (SELECT ROWNUM AS ORDERID,DBCOLUMNNAME FROM (SELECT DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = V_REFTABLEID AND ISLEAF ='1' ORDER BY LENGTH(DBCOLUMNNAME)DESC, DBCOLUMNNAME DESC)KKK ) WHERE ORDERID = V_I;
        V_I := V_I +1;
        IF INSTR(V_REFCOL,','||V_FACTORDBNAME||',',1) < 1 THEN
          
          V_POS := CONTAIN_COLUMN(V_TMP,V_FACTORDBNAME);
            
          IF V_POS > 0 THEN
            V_REFCOL := V_REFCOL || V_FACTORDBNAME||',';
            V_TMP := REPLACE(V_TMP,V_FACTORDBNAME,LPAD('@',LENGTH(V_FACTORDBNAME),'@'));
          END IF;
        END IF;
                                   
        IF INSTR(V_REFWHERECOL,','||V_FACTORDBNAME||',',1) < 1 THEN
          V_POS := CONTAIN_COLUMN(V_TMP_REP,V_FACTORDBNAME);
          IF V_POS > 0 THEN
            V_REFWHERECOL := V_REFWHERECOL || V_FACTORDBNAME||',';
            V_TMP_REP := REPLACE(V_TMP_REP,V_FACTORDBNAME,LPAD('@',LENGTH(V_FACTORDBNAME),'@'));
          END IF;
        END IF;
      END LOOP;
      --V_REFCOL := SUBSTR(V_REFCOL,2,LENGTH(V_REFCOL)-2);
      IF LENGTH(V_REFCOL) = 1 THEN
        V_REFCOL := '';
      END IF;
      --V_REFWHERECOL := SUBSTR(V_REFWHERECOL,2,LENGTH(V_REFWHERECOL)-2);
      IF LENGTH(V_FORWHERECOL) = 1 THEN
        V_FORWHERECOL := '';
      END IF;
      --插入记录
      INSERT INTO FORMULA_T_FORMULADETAIL (FORMULAID, LINEID, TABLEID, FORMULATYPE, FORCOMCOL, FORWHERE, REFTABLEID, REFWHERECOL, REFCOLUMN, REFWHERE, REFCOMCONT, FORWHERECOL)
      VALUES(V_FORMULAID,V_NO,V_TABLEID,'10', V_FORCOMCOL,V_FORWHERE,V_REFTABLEID,V_REFWHERECOL,V_REFCOL,V_REFWHERE,V_REFCOMCONT,V_FORWHERECOL);
        
      --重新计算位置
      V_POS := INSTR(V_FORMULACON,'TT(',V_POS1)+3;
      V_NO  := V_NO +1;
    END LOOP;
    RETURN;
    END P_DEF_INSERT_10;
 
  FUNCTION GETCELLDATA(V_TABLE VARCHAR2,COL VARCHAR2,WHERECLAUSE VARCHAR2) RETURN NUMBER IS
  --获得指定行指定列的值
    RESULT NUMBER;
    V_SQL VARCHAR2(30000);
  BEGIN
    V_SQL := 'SELECT '||COL||' FROM '||V_TABLE||' WHERE '||WHERECLAUSE;
    EXECUTE IMMEDIATE V_SQL INTO RESULT;
    RETURN(RESULT);
  END GETCELLDATA;

  PROCEDURE FORMULA_REFTABLE_TABCOL_PSN (V_TABLEID VARCHAR2,V_AGENCYID VARCHAR2) IS

    V_POS      INT;
    V_POS1     INT;
    V_SQL      VARCHAR2(32767);
    V_EXECSQL  VARCHAR2(32767);
    V_DBNAME   VARCHAR2(100);
    V_COL      VARCHAR2(32767);
    V_TMP      VARCHAR2(32767);
    V_FORCOMCOL  VARCHAR2(32767);
    V_DATAKEY    VARCHAR2(32);
    -----
    V_FORMULATYPE FORMULA_T_FORMULADEF.FORMULATYPE%TYPE;
    V_NEEDUPDATE VARCHAR2(4000);
    V_WHERE VARCHAR2(5000);
    -----
    V_UPDATE_COL VARCHAR2(32767);
    V_AFFECT_COL VARCHAR2(32767);
    V_TMP_COL    VARCHAR2(32767);
    V_REFCOMCONT CLOB;

    V_TMP_ACCTCODE VARCHAR2(100);
    V_SQL3 VARCHAR2(32767);

    V_STR1 VARCHAR2(32767);
    V_STR2 VARCHAR2(32767);
    V_STR3 VARCHAR2(32767);
    V_STR4 VARCHAR2(32767);
    V_STR5 VARCHAR2(32767);
    V_CNT INT;
    
    V_FORMULACONTENT SYS_REFCURSOR;
    V_DATA SYS_REFCURSOR;
  BEGIN
    V_AFFECT_COL := ',';

    --表间列公式计算(基本数字类的表间列公式)
    --目前不支持关联列，以及按行进行设置的列公式。
    --公式类型=8，
    --首先获得需要进行计算的公式列
    --SELECT COUNT(*) INTO V_I FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND UPPER(DBCOLUMNNAME)= 'TIMESTP';
    SELECT DBTABLENAME INTO V_DBNAME FROM DICT_T_MODEL WHERE TABLEID = V_TABLEID ;
    V_SQL := 'SELECT NEEDUPDATE ,DATAKEY FROM '||V_DBNAME||' WHERE AGENCYID ='''||V_AGENCYID||''' AND NEEDUPDATE IS NOT NULL ';

    OPEN V_DATA FOR V_SQL;
    LOOP
      FETCH V_DATA INTO V_NEEDUPDATE,V_DATAKEY;
        EXIT WHEN V_DATA%NOTFOUND;

        --若不需要计算，则返回
        IF V_NEEDUPDATE IS NULL OR (INSTR(V_NEEDUPDATE,',8,',1,1) < 1 AND INSTR(V_NEEDUPDATE,',9,',1,1) < 1)THEN
            CLOSE V_DATA;
            RETURN ;
        END IF;
        --循环进行处理
        V_AFFECT_COL := ','; --20080521 WHF
        V_TMP :='(';
        V_POS := INSTR(V_NEEDUPDATE,',',1,1);
        WHILE(V_POS>0)   LOOP
            V_POS1 := INSTR(V_NEEDUPDATE,',',V_POS+1,1);
            IF V_POS1 < 1 THEN
               EXIT;
            END IF;
            V_FORMULATYPE := SUBSTR(V_NEEDUPDATE,V_POS1+1,1);
            IF (V_FORMULATYPE = '8' OR V_FORMULATYPE = '9')  THEN
              V_COL := SUBSTR(V_NEEDUPDATE,V_POS+1,V_POS1-V_POS-1);
              V_TMP := V_TMP||''''||V_COL||''',';
            END IF;
            V_POS := INSTR(V_NEEDUPDATE,',',V_POS1+1,2);
        END LOOP;
        --若不需要计算，则返回
        IF V_TMP ='(' THEN
           CLOSE V_DATA;
           RETURN;
        END IF;
        V_TMP := SUBSTR(V_TMP,1,LENGTH(V_TMP)-1)||')';
        V_TMP_COL := ','||REPLACE(SUBSTR(V_TMP,2,LENGTH(V_TMP)-2),'''','')||',';

        --公式计算
        V_SQL    := 'SELECT FORWHERE,EXECSQL,FORCOMCOL,FORMULATYPE FROM
   (SELECT FORMULATYPE,FORWHERE,FORCOMCOL,
   CASE WHEN FORMULATYPE=''9'' THEN '',''||FORCOMCOL||''=(SELECT NVL(''||MAX(REPLACE(CAST(REFCOMCONT AS VARCHAR2(4000)),''@AGENCYID@'','''''''||V_AGENCYID||'''''''))||'',0) FROM DUAL) ''
   ELSE FORMULA_TABOUTCOMPUTE(CASE WHEN LINEID=''1'' THEN 1 ELSE 0 END ||LINEID||''^''||FORCOMCOL||''^''||''SELECT NVL(''||REFCOMCONT||'',0) FROM ''||CASE WHEN LINEID =''1'' THEN ''('' ELSE (SELECT DBTABLENAME FROM DICT_T_MODEL WHERE TABLEID = REFTABLEID)||'' WHERE ''|| (CASE WHEN NVL(LENGTH(REFWHERE),0) > 0 THEN ''AGENCYID ='''''||V_AGENCYID||''''' AND (''|| NVL(REFWHERE,'' '')||'')  ''  WHEN NVL(LENGTH(REFWHERE),0) < 1 THEN '' AGENCYID = '''''||V_AGENCYID||'''''  '' ELSE ''AGENCYID ='''''||V_AGENCYID||''''' AND (''|| NVL(REFWHERE,''1=1'')||'')'' END)  END)
   END AS EXECSQL FROM (SELECT LINEID,FORWHERE,FORCOMCOL,REFCOMCONT,REFTABLEID,REFWHERE,FORMULATYPE FROM FORMULA_T_FORMULADETAIL
   WHERE TABLEID = '''||V_TABLEID||''' AND (FORMULATYPE = ''8'' OR FORMULATYPE = ''9'') AND FORCOMCOL IN '||V_TMP||' ORDER BY LINEID)MMM GROUP BY FORMULATYPE,FORCOMCOL,FORWHERE)DDD';
       
        V_CNT := 0;
        V_STR1 := ' ';
        OPEN V_FORMULACONTENT FOR V_SQL;
        LOOP
          FETCH V_FORMULACONTENT INTO V_WHERE,V_EXECSQL,V_FORCOMCOL,V_FORMULATYPE;
            EXIT WHEN V_FORMULACONTENT%NOTFOUND;
            --其他处理
            --得到需要更新的列公式
            SELECT NVL((SELECT CONNSTRA(FORCOMCOL||',') FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = V_TABLEID AND FORMULATYPE = '0'   AND INSTR(','||REFCOLUMN||',', ','||V_FORCOMCOL||',', 1,1) > 0),' ') INTO V_UPDATE_COL FROM DUAL;
            V_POS := INSTR(V_UPDATE_COL,',',1,1) ;
            WHILE(V_POS > 0) LOOP
              V_COL := SUBSTR(V_UPDATE_COL,1,V_POS-1);
              IF INSTR(V_AFFECT_COL,','||V_COL||',',1,1) < 1 THEN
                 V_AFFECT_COL := V_AFFECT_COL||V_COL||',';
              END IF;
              V_UPDATE_COL := SUBSTR(V_UPDATE_COL,V_POS+1);
              V_POS := INSTR(V_UPDATE_COL,',',1,1) ;
            END LOOP;
            --替换V_TMP内的值
            V_TMP_COL := REPLACE(V_TMP_COL,','||V_FORCOMCOL||',',',');

            --计算
            IF V_FORMULATYPE <> '9' THEN
                --表间公式计算
                IF INSTR(V_EXECSQL,'@AGENCYID@',1,1) > 0 THEN
                   V_EXECSQL := REPLACE(V_EXECSQL,'@AGENCYID@',''''||V_AGENCYID||'''');
                END IF;
                IF INSTR(V_EXECSQL,'@DATAKEY@',1,1) > 0 THEN
                   V_EXECSQL := REPLACE(V_EXECSQL,'@DATAKEY@',''''||V_DATAKEY||'''');
                ELSE
                    --基本数字表类型计算
                    --这里留有扩展为FORWHERE
                    V_EXECSQL := V_EXECSQL;
                END IF;
                IF INSTR(V_EXECSQL,'@ACCTCODE@',1) > 0 THEN
                  V_SQL3 := 'SELECT ACCTCODE FROM ' || V_DBNAME || ' WHERE AGENCYID= ''' || V_AGENCYID || ''' AND DATAKEY= ''' || V_DATAKEY || ''' ';
                  EXECUTE IMMEDIATE V_SQL3 INTO V_TMP_ACCTCODE;
                  V_EXECSQL := REPLACE(V_EXECSQL,'@ACCTCODE@','''' || V_TMP_ACCTCODE || '''');
                END IF;
            END IF;
            V_STR1 := V_STR1 || V_EXECSQL;
            V_CNT := V_CNT + 1;
            IF V_CNT >= 20 THEN
              --进行TIMESTP的判断
              --IF  V_I < 1 THEN
                V_STR1 := 'UPDATE '|| V_DBNAME || ' SET NEEDUPDATE = SUBSTR(NEEDUPDATE,NVL(LENGTH('''||V_NEEDUPDATE||'''),0) + 1) '||V_STR1||' WHERE AGENCYID = ''' || V_AGENCYID || ''' AND DATAKEY = ''' || V_DATAKEY || ''' ' ;
              --ELSE
              --  V_STR1 := 'UPDATE '|| V_DBNAME || ' SET TIMESTP=SYS_GUID(),NEEDUPDATE = SUBSTR(NEEDUPDATE,NVL(LENGTH('''||V_NEEDUPDATE||'''),0) + 1) '||V_STR1||' WHERE AGENCYID = ''' || V_AGENCYID || ''' AND DATAKEY = ''' || V_DATAKEY || ''' ' ;
              --END IF;
              EXECUTE IMMEDIATE V_STR1;
              V_NEEDUPDATE := '';
              V_CNT := 0;
              V_STR1 := ' ';
            END IF;
        END LOOP;
        CLOSE V_FORMULACONTENT;

        IF LENGTH(V_STR1) > 5 THEN
          --IF  V_I < 1 THEN
            V_STR1 := 'UPDATE '|| V_DBNAME || ' SET NEEDUPDATE =SUBSTR(NEEDUPDATE,NVL(LENGTH('''||V_NEEDUPDATE||'''),0) + 1) '||V_STR1||' WHERE AGENCYID = ''' || V_AGENCYID || ''' AND DATAKEY = ''' || V_DATAKEY || ''' ' ;
          --ELSE
          --  V_STR1 := 'UPDATE '|| V_DBNAME || ' SET TIMESTP=SYS_GUID(),NEEDUPDATE = SUBSTR(NEEDUPDATE,NVL(LENGTH('''||V_NEEDUPDATE||'''),0) + 1) '||V_STR1||' WHERE AGENCYID = ''' || V_AGENCYID || ''' AND DATAKEY = ''' || V_DATAKEY || ''' ' ;
          --END IF;
          EXECUTE IMMEDIATE V_STR1;
        END IF;

        --处理乱码，一旦发现全角字符乱码，全部置刷新标记
        V_STR1 := 'UPDATE '||V_DBNAME||' SET NEEDUPDATE = PKG_FORMULA.F_GETNEEDUPDATE_689('''||V_TABLEID||''') WHERE AGENCYID = '''||V_AGENCYID||''' AND DATAKEY = '''||V_DATAKEY||''' AND  LENGTH(NEEDUPDATE) <> LENGTHB(NEEDUPDATE) AND NEEDUPDATE IS NOT NULL';
        EXECUTE IMMEDIATE V_STR1;

        --更新列公式内容
        --更新不正确的标志位
        V_AFFECT_COL := SUBSTR(V_AFFECT_COL,2);
        V_POS := INSTR(V_AFFECT_COL,',',1,1) ;
        V_EXECSQL := ' ';
        WHILE(V_POS > 0) LOOP
          V_COL := SUBSTR(V_AFFECT_COL,1,V_POS-1);
          SELECT REFCOMCONT INTO V_REFCOMCONT FROM FORMULA_T_FORMULADETAIL WHERE TABLEID =V_TABLEID AND FORMULATYPE='0' AND FORCOMCOL = V_COL;
          --执行SQL语句
          V_CNT := DBMS_LOB.GETLENGTH(V_REFCOMCONT);
          IF V_CNT > 32000 THEN
            V_STR1 := DBMS_LOB.SUBSTR(V_REFCOMCONT,15000,1);
            V_STR2 := DBMS_LOB.SUBSTR(V_REFCOMCONT,15000,15001);
            V_STR3 := DBMS_LOB.SUBSTR(V_REFCOMCONT,15000,30001);
            V_STR4 := DBMS_LOB.SUBSTR(V_REFCOMCONT,15000,45001);
            V_STR5 := DBMS_LOB.SUBSTR(V_REFCOMCONT,15000,60001);
            EXECUTE IMMEDIATE 'UPDATE '|| V_DBNAME || ' SET ' || V_STR1||V_STR2||V_STR3||V_STR4||V_STR5 || ' WHERE AGENCYID = ''' || V_AGENCYID || ''' AND DATAKEY = ''' || V_DATAKEY || ''' ';
          ELSE
            IF LENGTH(V_EXECSQL) + V_CNT > 32000 THEN
              IF LENGTH(V_EXECSQL) > 1 THEN
                V_EXECSQL := 'UPDATE '|| V_DBNAME || ' SET ' || SUBSTR(V_EXECSQL,1,LENGTH(V_EXECSQL) - 1) || ' WHERE AGENCYID = ''' || V_AGENCYID || ''' AND DATAKEY = ''' || V_DATAKEY || ''' ';
                EXECUTE IMMEDIATE V_EXECSQL;
              END IF;
              V_EXECSQL := ' ';
            END IF;
            V_STR1 := DBMS_LOB.SUBSTR(V_REFCOMCONT,32000,1);
            V_EXECSQL := V_EXECSQL ||V_COL||' =('||V_STR1||'),';
          END IF;
          --循环
          V_AFFECT_COL := SUBSTR(V_AFFECT_COL,V_POS+1);
          V_POS := INSTR(V_AFFECT_COL,',',1,1) ;
        END LOOP;
        IF LENGTH(V_EXECSQL) > 1 THEN
          V_EXECSQL := 'UPDATE '|| V_DBNAME || ' SET ' || SUBSTR(V_EXECSQL,1,LENGTH(V_EXECSQL) - 1) || ' WHERE AGENCYID = ''' || V_AGENCYID || ''' AND DATAKEY = ''' || V_DATAKEY || ''' ';
          EXECUTE IMMEDIATE V_EXECSQL;
        END IF;
    END LOOP;
    CLOSE V_DATA;
  END FORMULA_REFTABLE_TABCOL_PSN;

  /*PROCEDURE P_CALCULATEFORMULA_1(V_AGENCYID VARCHAR2,V_TABLEID VARCHAR2,V_FORMULAID VARCHAR2) IS
    --表内行公式计算
    V_TABLE VARCHAR2(32);
    V_SQL VARCHAR2(30000);
    V_FORMULA VARCHAR2(30000);
    V_FORWHERE VARCHAR2(4000);
    V_POS NUMBER;
    V_POS1 NUMBER;
    V_POS2 NUMBER;
    V_COL VARCHAR2(30000);
    V_TMP VARCHAR2(30000);
    V_REFWHERE VARCHAR2(4000);
  BEGIN
    --公式格式〖FDCODE='2030'〗{X1列}=〖FDCODE='2035'〗{X2列}+〖FDCODE='2035'〗{X列}
    SELECT DBTABLENAME INTO V_TABLE FROM DICT_T_MODEL WHERE TABLEID = V_TABLEID;
    SELECT T.FORCOMCOL,T.FORWHERE,T.REFCOMCONT INTO V_COL,V_FORWHERE,V_FORMULA FROM FORMULA_T_FORMULADETAIL T WHERE T.TABLEID = V_TABLEID AND T.FORMULAID = V_FORMULAID AND T.FORMULATYPE = '1';
    V_FORMULA := ' '||V_FORMULA||' ';
    LOOP
      V_POS := INSTR(V_FORMULA,'〖',1);
      V_POS1 := INSTR(V_FORMULA,'〗{',V_POS);
      IF V_POS < 1 OR V_POS1 < 1 THEN
        EXIT;
      END IF;
      V_REFWHERE := ' AGENCYID = '''||V_AGENCYID||''' AND ('||SUBSTR(V_FORMULA,V_POS,V_POS1 - V_POS + 1)||')';
     
      V_POS2 := INSTR(V_FORMULA,'}',V_POS1);
      V_TMP := SUBSTR(V_FORMULA,V_POS1 + 2,V_POS2 - V_POS1 -2);
      V_TMP := 'PKG_FORMULA.GETCELLDATA('''||V_TABLE||''','''||V_TMP||''','''||V_REFWHERE||''')';
      V_FORMULA := SUBSTR(V_FORMULA,1,V_POS - 1)||V_TMP||SUBSTR(V_FORMULA,V_POS1 + 1);
    END LOOP;
    
    V_SQL := 'UPDATE '||V_TABLE||' SET '||V_COL||'= '||V_FORMULA||'WHERE AGENCYID='''||V_AGENCYID||''' AND ('||V_FORWHERE||')';
    EXECUTE IMMEDIATE V_SQL;
    RETURN;
  END P_CALCULATEFORMULA_1;*/

  PROCEDURE P_CALCULATEFORMULA_1(P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2) IS
    V_TABLE VARCHAR2(30);
    V_SQL VARCHAR2(32000);
    V_FORMULA VARCHAR2(32000);
    V_TMP VARCHAR2(32000);
    V_START NUMBER;
    V_POS NUMBER;
    V_END NUMBER;
    V_STR VARCHAR2(32000);
    V_COL VARCHAR2(30);
    V_WHERE VARCHAR2(4000);
    V_RETCOL VARCHAR2(30);
    V_FORWHERE VARCHAR2(4000);
  BEGIN
    SELECT DBTABLENAME INTO V_TABLE FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    FOR C_ROW IN (SELECT DISTINCT FORWHERE FROM FORMULA_T_FORMULADEF WHERE TABLEID = P_TABLEID AND FORMULATYPE = '1') LOOP
      V_STR := ' ';
      FOR C_FORMULA IN (SELECT FORMULAID FROM FORMULA_T_FORMULADEF WHERE TABLEID = P_TABLEID AND FORMULATYPE = '1' AND FORWHERE = C_ROW.FORWHERE) LOOP
        SELECT FORCOMCOL,FORWHERE,REFCOMCONT INTO V_RETCOL,V_FORWHERE,V_FORMULA FROM FORMULA_T_FORMULADETAIL WHERE FORMULAID = C_FORMULA.FORMULAID;
        LOOP
          V_START := INSTR(V_FORMULA,'〖');
          V_POS := INSTR(V_FORMULA,'〗{',V_START + 1);
          V_END := INSTR(V_FORMULA,'}',V_POS + 1);
          IF V_START > 0 AND V_POS > 0 AND V_END > 0 THEN
            V_TMP := SUBSTR(V_FORMULA,V_START,V_END - V_START + 1);
            V_WHERE :=SUBSTR(V_FORMULA,V_START + 1,V_POS - V_START - 1);
            V_COL := SUBSTR(V_FORMULA,V_POS + 2,V_END - V_POS - 2);
            V_SQL := '
(SELECT '||V_COL||' FROM '||V_TABLE||' WHERE AGENCYID = XX.AGENCYID AND '||V_WHERE||')
';
            V_FORMULA := REPLACE(V_FORMULA,V_TMP,V_SQL);
          ELSE
            EXIT;
          END IF;
        END LOOP;
        V_STR := V_STR||'
'||V_RETCOL||'='||V_FORMULA||',';
      END LOOP;
      IF LENGTH(V_STR) > 5 THEN
        V_STR := SUBSTR(V_STR,1,LENGTH(V_STR) - 1);
        V_SQL := 'UPDATE '||V_TABLE||' XX 
   SET '||V_STR||'
 WHERE AGENCYID = '''||P_AGENCYID||''' AND '||V_FORWHERE;
  --DBMS_OUTPUT.PUT_LINE(V_SQL);
        EXECUTE IMMEDIATE V_SQL;
      END IF;
    END LOOP;
  END P_CALCULATEFORMULA_1;
  
  PROCEDURE FORMULA_P_CALCULATEFORMULA_A8 (V_TABLEID VARCHAR2,V_AGENCYID VARCHAR2) IS

    V_POS      INT;

    V_SQL      VARCHAR2(32767);
    V_EXECSQL  VARCHAR2(32767);
    V_DBNAME   VARCHAR2(100);
    V_COL      VARCHAR2(32767);

    V_FORCOMCOL  VARCHAR2(32767);
    V_DATAKEY    VARCHAR2(32);

    V_WHERE VARCHAR2(5000);
    -----
    V_UPDATE_COL VARCHAR2(32767);
    V_AFFECT_COL VARCHAR2(32767);

    V_REFCOMCONT CLOB;

    V_TMP_ACCTCODE VARCHAR2(100);
    V_SQL3 VARCHAR2(32767);

    V_STR1 VARCHAR2(32767);
    V_STR2 VARCHAR2(32767);
    V_STR3 VARCHAR2(32767);
    V_STR4 VARCHAR2(32767);
    V_STR5 VARCHAR2(32767);
    V_CNT INT;

    V_FORMULACONTENT SYS_REFCURSOR;
    V_DATA SYS_REFCURSOR;
  BEGIN
    
    SELECT COUNT(*) INTO V_CNT FROM FORMULA_T_FORMULADEF  WHERE TABLEID = V_TABLEID AND FORMULATYPE = 'A8' AND ROWNUM < 2;
    IF V_CNT < 1 THEN
      RETURN;
    END IF;
    
    V_AFFECT_COL := ',';

    --表间列公式计算(基本数字类的表间列公式)
    --目前不支持关联列，以及按行进行设置的列公式。
    
    SELECT DBTABLENAME INTO V_DBNAME FROM DICT_T_MODEL WHERE TABLEID = V_TABLEID ;
    V_SQL := 'SELECT DATAKEY FROM '||V_DBNAME||' WHERE AGENCYID ='''||V_AGENCYID||'''';
    OPEN V_DATA FOR V_SQL;
    LOOP
      FETCH V_DATA INTO V_DATAKEY;
        EXIT WHEN V_DATA%NOTFOUND;
       
        --循环进行处理
        V_AFFECT_COL := ','; 

        --公式计算
        V_SQL    := 'SELECT FORWHERE,EXECSQL,FORCOMCOL FROM
   (SELECT FORWHERE,FORCOMCOL,
   FORMULA_TABOUTCOMPUTE(CASE WHEN LINEID=''1'' THEN 1 ELSE 0 END ||LINEID||''^''||FORCOMCOL||''^''||''SELECT NVL(''||REFCOMCONT||'',0) FROM ''||CASE WHEN LINEID =''1'' THEN ''('' ELSE (SELECT DBTABLENAME FROM DICT_T_MODEL WHERE TABLEID = REFTABLEID)||'' WHERE ''|| (CASE WHEN NVL(LENGTH(REFWHERE),0) > 0 THEN ''AGENCYID ='''''||V_AGENCYID||''''' AND (''|| NVL(REFWHERE,'' '')||'')  ''  WHEN  NVL(LENGTH(REFWHERE),0) < 1 THEN '' AGENCYID = '''''||V_AGENCYID||''''' '' ELSE ''AGENCYID ='''''||V_AGENCYID||''''' AND (''|| NVL(REFWHERE,''1=1'')||'')'' END)  END)
   AS EXECSQL FROM (SELECT LINEID,FORWHERE,FORCOMCOL,REFCOMCONT,REFTABLEID,REFWHERE,FORMULATYPE FROM FORMULA_T_FORMULADETAIL
   WHERE TABLEID = '''||V_TABLEID||''' AND FORMULATYPE = ''A8''  ORDER BY LINEID)MMM GROUP BY FORCOMCOL,FORWHERE)DDD';
       
        V_CNT := 0;
        V_STR1 := ' ';
        OPEN V_FORMULACONTENT FOR V_SQL;
        LOOP
          FETCH V_FORMULACONTENT INTO V_WHERE,V_EXECSQL,V_FORCOMCOL;
            EXIT WHEN V_FORMULACONTENT%NOTFOUND;

            --其他处理
            --得到需要更新的列公式
            SELECT NVL((SELECT CONNSTRA(FORCOMCOL||',') FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = V_TABLEID AND FORMULATYPE = '0'   AND INSTR(','||REFCOLUMN||',', ','||V_FORCOMCOL||',', 1,1) > 0),' ') INTO V_UPDATE_COL FROM DUAL;
            V_POS := INSTR(V_UPDATE_COL,',',1,1) ;
            WHILE(V_POS > 0) LOOP
              V_COL := SUBSTR(V_UPDATE_COL,1,V_POS-1);
              IF INSTR(V_AFFECT_COL,','||V_COL||',',1,1) < 1 THEN
                 V_AFFECT_COL := V_AFFECT_COL||V_COL||',';
              END IF;
              V_UPDATE_COL := SUBSTR(V_UPDATE_COL,V_POS+1);
              V_POS := INSTR(V_UPDATE_COL,',',1,1) ;
            END LOOP;

            --计算
            
            --表间公式计算
            IF INSTR(V_EXECSQL,'@AGENCYID@',1,1) > 0 THEN
               V_EXECSQL := REPLACE(V_EXECSQL,'@AGENCYID@',''''||V_AGENCYID||'''');
            END IF;
            IF INSTR(V_EXECSQL,'@DATAKEY@',1,1) > 0 THEN
               V_EXECSQL := REPLACE(V_EXECSQL,'@DATAKEY@',''''||V_DATAKEY||'''');
            ELSE
                --基本数字表类型计算
                --这里留有扩展为FORWHERE
                V_EXECSQL := V_EXECSQL;
            END IF;
            IF INSTR(V_EXECSQL,'@ACCTCODE@',1) > 0 THEN
              V_SQL3 := 'SELECT ACCTCODE FROM ' || V_DBNAME || ' WHERE AGENCYID= ''' || V_AGENCYID || ''' AND DATAKEY= ''' || V_DATAKEY || '''';
              EXECUTE IMMEDIATE V_SQL3 INTO V_TMP_ACCTCODE;
              V_EXECSQL := REPLACE(V_EXECSQL,'@ACCTCODE@','''' || V_TMP_ACCTCODE || '''');
            END IF;
            
            V_STR1 := V_STR1 || TRIM(V_EXECSQL);
            V_CNT := V_CNT + 1;
            IF V_CNT >= 20 THEN
              IF SUBSTR(V_STR1,1,1) = ',' THEN
                V_STR1 := SUBSTR(V_STR1,2);
              END IF;
              V_STR1 := 'UPDATE '|| V_DBNAME || ' SET '||V_STR1||' WHERE AGENCYID = ''' || V_AGENCYID || ''' AND DATAKEY = ''' || V_DATAKEY || ''' ' ;
              
              EXECUTE IMMEDIATE V_STR1;
              V_CNT := 0;
              V_STR1 := ' ';
            END IF;
        END LOOP;
        CLOSE V_FORMULACONTENT;

        IF LENGTH(V_STR1) > 5 THEN
          IF SUBSTR(V_STR1,1,1) = ',' THEN
             V_STR1 := SUBSTR(V_STR1,2);
          END IF;
          V_STR1 := 'UPDATE '|| V_DBNAME || ' SET '||V_STR1||' WHERE AGENCYID = ''' || V_AGENCYID || ''' AND DATAKEY = ''' || V_DATAKEY || ''' ' ;
          
          EXECUTE IMMEDIATE V_STR1;
        END IF;

        --处理乱码，一旦发现全角字符乱码，全部置刷新标记
        V_STR1 := 'UPDATE '||V_DBNAME||' SET NEEDUPDATE = PKG_FORMULA.F_GETNEEDUPDATE_689('''||V_TABLEID||''') WHERE AGENCYID = '''||V_AGENCYID||''' AND DATAKEY = '''||V_DATAKEY||''' AND  LENGTH(NEEDUPDATE) <> LENGTHB(NEEDUPDATE) AND NEEDUPDATE IS NOT NULL';
        EXECUTE IMMEDIATE V_STR1;

        --更新列公式内容
        --更新不正确的标志位
        V_AFFECT_COL := SUBSTR(V_AFFECT_COL,2);
        V_POS := INSTR(V_AFFECT_COL,',',1,1) ;
        V_EXECSQL := ' ';
        WHILE(V_POS > 0) LOOP
          V_COL := SUBSTR(V_AFFECT_COL,1,V_POS-1);
          SELECT REFCOMCONT INTO V_REFCOMCONT FROM FORMULA_T_FORMULADETAIL WHERE TABLEID =V_TABLEID AND FORMULATYPE='0' AND FORCOMCOL = V_COL;
          --执行SQL语句
          V_CNT := DBMS_LOB.GETLENGTH(V_REFCOMCONT);
          IF V_CNT > 32000 THEN
            V_STR1 := DBMS_LOB.SUBSTR(V_REFCOMCONT,15000,1);
            V_STR2 := DBMS_LOB.SUBSTR(V_REFCOMCONT,15000,15001);
            V_STR3 := DBMS_LOB.SUBSTR(V_REFCOMCONT,15000,30001);
            V_STR4 := DBMS_LOB.SUBSTR(V_REFCOMCONT,15000,45001);
            V_STR5 := DBMS_LOB.SUBSTR(V_REFCOMCONT,15000,60001);
            EXECUTE IMMEDIATE 'UPDATE '|| V_DBNAME || ' SET ' || V_STR1||V_STR2||V_STR3||V_STR4||V_STR5 || ' WHERE AGENCYID = ''' || V_AGENCYID || ''' AND DATAKEY = ''' || V_DATAKEY || ''' ';
          ELSE
            IF LENGTH(V_EXECSQL) + V_CNT > 32000 THEN
              IF LENGTH(V_EXECSQL) > 1 THEN
                V_EXECSQL := 'UPDATE '|| V_DBNAME || ' SET ' || SUBSTR(V_EXECSQL,1,LENGTH(V_EXECSQL) - 1) || ' WHERE AGENCYID = ''' || V_AGENCYID || ''' AND DATAKEY = ''' || V_DATAKEY || ''' ';
                EXECUTE IMMEDIATE V_EXECSQL;
              END IF;
              V_EXECSQL := ' ';
            END IF;
            V_STR1 := DBMS_LOB.SUBSTR(V_REFCOMCONT,32000,1);
            V_EXECSQL := V_EXECSQL ||V_COL||' =('||V_STR1||'),';
          END IF;
          --循环
          V_AFFECT_COL := SUBSTR(V_AFFECT_COL,V_POS+1);
          V_POS := INSTR(V_AFFECT_COL,',',1,1) ;
        END LOOP;
        IF LENGTH(V_EXECSQL) > 5 THEN
          V_EXECSQL := 'UPDATE '|| V_DBNAME || ' SET ' || SUBSTR(V_EXECSQL,1,LENGTH(V_EXECSQL) - 1) || ' WHERE AGENCYID = ''' || V_AGENCYID || ''' AND DATAKEY = ''' || V_DATAKEY || ''' ';
          EXECUTE IMMEDIATE V_EXECSQL;
        END IF;
    END LOOP;
    CLOSE V_DATA;
  END FORMULA_P_CALCULATEFORMULA_A8;

  PROCEDURE FORMULA_P_CALCULATEHIRACHY(V_AGENCYID VARCHAR2,V_TABLEID VARCHAR2) IS
  --按照层次汇总浮动表数据
    V_SQL VARCHAR2(30000);
    V_TABLENAME VARCHAR2(32);
    TYPE T_STRINGARRAY IS TABLE OF VARCHAR2(32) INDEX BY PLS_INTEGER;
    V_COLARRY T_STRINGARRAY;
    V_NUMCOL T_STRINGARRAY;
    V_NUMCOLLIST VARCHAR2(30000);
    V_SUMCOLLIST VARCHAR2(30000);
    V_I NUMBER :=0;
    V_DEALTYPE VARCHAR2(100);
    V_LEVEL NUMBER;
  BEGIN
    SELECT DBTABLENAME,DEALTYPE INTO V_TABLENAME,V_DEALTYPE FROM DICT_T_MODEL WHERE TABLEID = V_TABLEID;
    --暂时处理浮动，只有一个FDCODE，固定行列表暂不处理
    IF NOT (V_DEALTYPE = 'A1') THEN
      RETURN;
    END IF;
    FOR C_COL IN (SELECT DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF = '1' AND DATATYPE = 3 AND DBCOLUMNNAME LIKE 'FDCODE%') LOOP
      V_I := V_I + 1;
      V_COLARRY(V_I) := C_COL.DBCOLUMNNAME;
    END LOOP;
    IF V_I < 1 THEN
      RETURN;
    END IF;
    V_I := 0;
    V_NUMCOLLIST := ' ';
    V_SUMCOLLIST :=' ';
    FOR C_NUM IN (SELECT DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = V_TABLEID AND ISLEAF = '1' AND DATATYPE IN(1,2))LOOP
      V_I := V_I + 1;
      V_NUMCOL(V_I) := C_NUM.DBCOLUMNNAME;
      V_NUMCOLLIST := V_NUMCOLLIST||C_NUM.DBCOLUMNNAME||',';
      V_SUMCOLLIST := V_SUMCOLLIST||'SUM('||C_NUM.DBCOLUMNNAME||') '||C_NUM.DBCOLUMNNAME||',';
    END LOOP;
    IF V_I < 1 THEN
      RETURN;
    END IF;
    --有是否其中项(ISQZX = '1')和倒挤行(ISDJ='1')，是否其中项不影响计算结果，倒挤行暂时不考虑
    V_NUMCOLLIST := SUBSTR(V_NUMCOLLIST,1,LENGTH(V_NUMCOLLIST) - 1);
    V_SUMCOLLIST := SUBSTR(V_SUMCOLLIST,1,LENGTH(V_SUMCOLLIST) - 1);
    
    V_SQL := 'SELECT MAX(LEVELNO) FROM '||V_TABLENAME||' WHERE AGENCYID = ? AND ISLEAF = ''0''';
    EXECUTE IMMEDIATE V_SQL INTO V_LEVEL USING V_AGENCYID;
    
    IF V_LEVEL < 2 THEN
      RETURN;
    END IF;
    --计算合计行
    FOR V_I IN 1..V_LEVEL LOOP
      V_SQL := '
      BEGIN
        FOR C_DATA IN (SELECT DATAKEY,FDCODE FROM '||V_TABLENAME||' WHERE AGENCYID = '''||V_AGENCYID||''' AND  ISLEAF = ''0'' AND LEVELNO = '||TO_CHAR(V_I)||') LOOP
          UPDATE '||V_TABLENAME||'SET 
          ('||V_NUMCOLLIST||')=
          (SELECT '||V_SUMCOLLIST||' 
          FROM '||V_TABLENAME||'
          WHERE AGENCYID = '''||V_AGENCYID||''' 
          AND LEVELNO > '||TO_CHAR(V_I)||' 
          AND ISLEAF = ''1'' 
          AND FDCODE LIKE C_DATA.FDCODE||''%'') 
          WHERE AGENCYID = '''||V_AGENCYID||''' AND DATAKEY = C_DATA.DATAKEY;
        END LOOP;
      END;';
      EXECUTE IMMEDIATE V_SQL;
    END LOOP;
    
    RETURN;
  END FORMULA_P_CALCULATEHIRACHY;
  
  FUNCTION FORMULA_F_CALCULATEFORMULA_0(P_TABLEID VARCHAR2,P_DATA CLOB) RETURN CLOB IS
    V_STR VARCHAR2(32000);
    V_SQL VARCHAR2(32000);
    V_COL VARCHAR2(30);
    V_TABLE VARCHAR2(32);
    V_NUM NUMBER;
    V_DESCTBL   DBMS_SQL.DESC_TAB;
    V_CURSOR INTEGER;
    V_CNT NUMBER;
    V_TMP VARCHAR2(32000);
    V_STR2 VARCHAR2(32000);
    V_STR3 VARCHAR2(32000);
  BEGIN
    --传回一行数据，计算公式，将变化的字段和数据以键值对的形式返回
    IF P_TABLEID IS NULL THEN
      RETURN '';
    END IF;
    V_STR := DBMS_LOB.SUBSTR(P_DATA,30000);
    IF V_STR IS NULL THEN
      RETURN '';
    END IF;
    
    SELECT COUNT(*) INTO V_NUM FROM FORMULA_T_FORMULADEF WHERE TABLEID = P_TABLEID AND FORMULATYPE = '0';
    IF V_NUM < 1 THEN
      RETURN '';
    END IF;
    
    SELECT DBTABLENAME INTO V_TABLE FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    V_SQL := 'SELECT '||V_STR||' FROM DUAL';
    
    V_CURSOR := DBMS_SQL.OPEN_CURSOR();
    DBMS_SQL.PARSE(V_CURSOR, V_SQL, DBMS_SQL.NATIVE);
    DBMS_SQL.DESCRIBE_COLUMNS(V_CURSOR,V_CNT,V_DESCTBL);
    V_STR := '';
    V_STR2 := '';
    V_STR3 :='';
    FOR I IN 1 .. V_CNT LOOP
       --V_DESCTBL(I).COL_TYPE);
       V_COL := UPPER(V_DESCTBL(I).COL_NAME);
       SELECT COUNT(*) INTO V_NUM FROM FORMULA_T_FORMULADEF WHERE TABLEID = P_TABLEID AND FORCOMCOL = V_COL AND FORMULATYPE = '0';
       IF V_NUM > 0 THEN
         SELECT REFCOMCONT INTO V_TMP FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = P_TABLEID AND FORCOMCOL = V_COL AND FORMULATYPE = '0';
         V_STR := V_STR||'('||V_TMP ||') '||V_COL||',';
         V_STR2 :=V_STR2||'(0-'||V_COL||') '||V_COL||',';
         V_STR3 :=V_STR3||'SUM('||V_COL||') '||V_COL||',';
       END IF;
     END LOOP;
     DBMS_SQL.CLOSE_CURSOR(V_CURSOR);
     IF V_STR  IS NOT NULL THEN
       V_SQL := 'WITH TDATA AS
       ('||V_SQL||') ';
       V_STR := SUBSTR(V_STR,1,LENGTH(V_STR) - 1);
       V_STR2 := SUBSTR(V_STR2,1,LENGTH(V_STR2) - 1);
       V_STR3 := SUBSTR(V_STR3,1,LENGTH(V_STR3) - 1);
       V_STR := 'SELECT '||V_STR||' FROM TDATA';
       V_STR2 :='SELECT '||V_STR2||' FROM TDATA';
       V_STR3 := V_SQL||'
       SELECT '||V_STR3 ||' FROM (
       '||V_STR||' 
       UNION ALL
       '||V_STR2||') T';
       V_CURSOR := DBMS_SQL.OPEN_CURSOR();
       DBMS_SQL.PARSE(V_CURSOR, V_STR3, DBMS_SQL.NATIVE);
       DBMS_SQL.DESCRIBE_COLUMNS(V_CURSOR,V_CNT,V_DESCTBL);
       FOR I IN 1 .. V_CNT LOOP
         DBMS_SQL.DEFINE_COLUMN(V_CURSOR,I,V_NUM);
       END LOOP;
       V_NUM := DBMS_SQL.EXECUTE(V_CURSOR);
       
       V_NUM := DBMS_SQL.FETCH_ROWS(V_CURSOR);
       V_STR2 := '';
       FOR I IN 1 .. V_CNT LOOP
         DBMS_SQL.COLUMN_VALUE(V_CURSOR,I,V_NUM);
         IF V_NUM <> 0 THEN
           --V_STR2 := V_STR2||TO_CHAR(V_NUM)||' '||V_DESCTBL(I).COL_NAME||',';
           V_STR2 := V_STR2||V_DESCTBL(I).COL_NAME||'='||TO_CHAR(V_NUM)||',';
         END IF;
       END LOOP;
       DBMS_SQL.CLOSE_CURSOR(V_CURSOR);
      
       IF V_STR2  IS NOT NULL THEN
         V_STR2 := SUBSTR(V_STR2,1,LENGTH(V_STR2) - 1);
         RETURN V_STR2;
       ELSE
         RETURN '';
       END IF;
     ELSE
       RETURN '';
     END IF;
  END FORMULA_F_CALCULATEFORMULA_0;
  
  PROCEDURE FORMULA_P_CALULATEBLOCK(P_AGENCYID VARCHAR2,P_TABLEID VARCHAR2) IS
    V_TABLE VARCHAR2(32);
    V_SQL VARCHAR2(32000);
    V_COL VARCHAR2(3000);
    V_COLLIST VARCHAR2(30000);
    V_DATALIST VARCHAR2(30000);
    V_WHERE VARCHAR2(30000);
    V_PKLIST VARCHAR2(3000);
    TYPE T_STRINGARRAY IS TABLE OF VARCHAR2(32) INDEX BY PLS_INTEGER;
    V_PKARRY T_STRINGARRAY;
    V_I INTEGER;
    V_DESCTBL   DBMS_SQL.DESC_TAB;
    V_CUR INTEGER;
    V_CNT NUMBER;
    V_BLOCK VARCHAR2(32760);
    --V_CLOB CLOB;
  BEGIN
    --获取逻辑主键
    SELECT DBTABLENAME INTO V_TABLE FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    V_I := 0;
    V_PKLIST := ',';
    V_WHERE := '';
    FOR C_COL IN (SELECT UPPER(DBCOLUMNNAME) DBCOLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = P_TABLEID AND ISKEY = '1') LOOP
      V_I := V_I + 1;
      V_PKARRY(V_I) := C_COL.DBCOLUMNNAME;
      V_PKLIST := V_PKLIST||C_COL.DBCOLUMNNAME||',';
      V_WHERE := V_WHERE||C_COL.DBCOLUMNNAME||'= C_DATA.'||C_COL.DBCOLUMNNAME||' AND ';
    END LOOP;
    V_WHERE := TRIM(SUBSTR(V_WHERE,1,LENGTH(V_WHERE) - 4));
    IF V_I < 1 THEN
      RAISE_APPLICATION_ERROR(-20001,'缺少逻辑主键');
      RETURN;
    END IF;
    FOR C_SQL IN (SELECT FORMULADEF SQL_TXT FROM FORMULA_T_FORMULADEF WHERE TABLEID = P_TABLEID AND FORMULATYPE = 'A0' ORDER BY ORDERID) LOOP
      --V_CLOB := c_sql.sql_txt;
      V_SQL := DBMS_LOB.SUBSTR(C_SQL.SQL_TXT,32000);
      V_SQL := REPLACE(V_SQL,'@AGENCYID@',''''||P_AGENCYID||'''');
      V_CUR := DBMS_SQL.OPEN_CURSOR();
      DBMS_SQL.PARSE(V_CUR, V_SQL, DBMS_SQL.NATIVE);
      DBMS_SQL.DESCRIBE_COLUMNS(V_CUR,V_CNT,V_DESCTBL);
      IF V_CNT < V_I THEN
        RAISE_APPLICATION_ERROR(-20001,'缺少逻辑主键！');
        RETURN;
      END IF;
      --只有主键，没有意义，不处理此类数据
      IF V_CNT = V_I THEN
        CONTINUE;
      END IF;
      V_I := 0;
      V_COLLIST := '';
      V_DATALIST := '';
      FOR I IN 1 .. V_CNT LOOP
         --V_DESCTBL(I).COL_TYPE);
         V_COL := UPPER(V_DESCTBL(I).COL_NAME);
         V_COLLIST := V_COLLIST||V_COL||',';
         IF INSTR(V_PKLIST,','||V_COL||',') > 0 THEN
           V_I := V_I + 1;
         END IF;
         V_DATALIST := V_DATALIST||'C_DATA.'||V_COL||',';
      END LOOP;
      V_COLLIST := TRIM(SUBSTR(V_COLLIST,1,LENGTH(V_COLLIST) - 1));
      V_DATALIST := TRIM(SUBSTR(V_DATALIST,1,LENGTH(V_DATALIST) - 1));
      IF V_I < V_PKARRY.COUNT THEN
        DBMS_SQL.CLOSE_CURSOR(V_CUR);
        RAISE_APPLICATION_ERROR(-20001,'缺少逻辑主键！');
        RETURN;
      END IF;
      DBMS_SQL.CLOSE_CURSOR(V_CUR);
      V_BLOCK := '
      DECLARE 
      V_I NUMBER;
      BEGIN
        FOR C_DATA IN ('||V_SQL||') LOOP
          SELECT COUNT(*) INTO V_I FROM '||V_TABLE||' WHERE '||V_WHERE||';
          IF V_I > 0 THEN
            UPDATE '||V_TABLE||' SET ('||V_COLLIST||')=(SELECT '||V_DATALIST||' FROM DUAL) WHERE  '||V_WHERE||';
          ELSE
            INSERT INTO '||V_TABLE||'('||V_COLLIST||')
            SELECT '||V_DATALIST||' FROM DUAL;
          END IF;
        END LOOP;
      END;';
      EXECUTE IMMEDIATE V_BLOCK;
    END LOOP;
  END FORMULA_P_CALULATEBLOCK;
  
  PROCEDURE REFRESH_ALL(P_APPID VARCHAR2,P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2) IS
    V_ENDFLAG VARCHAR2(10);
    V_AGENCYTAB VARCHAR2(30);
    V_CUR SYS_REFCURSOR;
    V_GUID VARCHAR2(32);
  BEGIN
    SELECT TABLENAME INTO V_AGENCYTAB FROM DICT_T_APPCODE WHERE APPID = P_APPID AND OBJECTID = 'AgencyID';
    EXECUTE IMMEDIATE 'SELECT ISLEAF FROM '||V_AGENCYTAB||' WHERE GUID = :V_AGENCYDID' INTO V_ENDFLAG USING P_AGENCYID;
    IF V_ENDFLAG = '1' THEN
      FORMULA_REFTABLE_TABCOL_PSN(P_TABLEID,P_AGENCYID);
      RETURN;
    END IF;
    OPEN V_CUR FOR 'SELECT GUID,ISLEAF FROM '||V_AGENCYTAB||' WHERE SUPERGUID = :V_AGENCYID' USING P_AGENCYID;
    LOOP
      FETCH V_CUR INTO V_GUID,V_ENDFLAG;
      EXIT WHEN V_CUR%NOTFOUND;
      IF V_ENDFLAG = '1' THEN
        FORMULA_REFTABLE_TABCOL_PSN(P_TABLEID,V_GUID);
      ELSE
        REFRESH_ALL(P_APPID ,P_TABLEID,V_GUID);
      END IF;
    END LOOP;
    CLOSE V_CUR;
    RETURN;
  END REFRESH_ALL;
  
  FUNCTION F_CALCULATEFORMULA_ROW(P_TABLEID VARCHAR2,P_ROWDATA CLOB) RETURN CLOB IS
    V_SQL VARCHAR2(32000);
    V_PARM VARCHAR2(32000);
    V_TABLE VARCHAR2(30);
    V_STR VARCHAR2(32000);
    V_STR2 VARCHAR2(32000);
    V_STR3 VARCHAR2(32000);
    V_FORMULA VARCHAR2(32000);
    V_AGENCYID VARCHAR2(32);
    V_PROJTYPEID VARCHAR2(32);
    V_EXPECOID VARCHAR2(32);
    V_COLID VARCHAR2(32);
    V_COL VARCHAR2(30);
    V_CNT NUMBER;
    V_NEW NUMBER;
    V_DESCTBL   DBMS_SQL.DESC_TAB;
    V_CURSOR INTEGER;
    V_COLLIST VARCHAR2(32000);
    V_TMP VARCHAR2(32000);
    V_EXP VARCHAR2(4000);
    V_START NUMBER;
    V_END NUMBER;
    V_TYPE NUMBER;
    V_RET VARCHAR2(4000);
    V_FORCOLLIST VARCHAR2(4000);
    V_REFTABLENAME VARCHAR2(30);
    V_ARG VARCHAR2(1000);
  BEGIN
    V_PARM := P_ROWDATA; 
    --传回一行数据，计算公式，将变化的字段和数据以键值对的形式返回
    IF P_TABLEID IS NULL THEN
      RETURN '';
    END IF;
    V_STR := DBMS_LOB.SUBSTR(V_PARM,32000);
    IF V_STR IS NULL THEN
      RETURN '';
    END IF;
    V_SQL := 'SELECT '||V_STR||' FROM DUAL';
    V_FORCOLLIST := ',';
    V_STR2 := ',';
    V_STR3 := ',';
    --单元格和表间公式是互斥的，只能有一种存在
    SELECT COUNT(*) INTO V_CNT FROM CAL_T_FORMULA WHERE TABLEID = P_TABLEID;
    SELECT DBTABLENAME INTO V_TABLE FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    --计算单元格公式
    IF V_CNT > 0 THEN
      V_SQL := 'SELECT AGENCYID,PROJTYPEID,EXPECOID FROM (SELECT '||V_STR||' FROM DUAL) T';
      EXECUTE IMMEDIATE V_SQL INTO V_AGENCYID,V_PROJTYPEID,V_EXPECOID;
     
      V_PARM := '';
      V_COLLIST := ',';
      FOR C_FORMULA IN (SELECT FORMULASQL,FUNDSOURCEID  FROM (
            SELECT CASE WHEN Y.FORMULAID IN ('001','002') THEN EMPTY_CLOB() ELSE X.FORMULASQL END FORMULASQL,ROW_NUMBER() OVER(ORDER BY Y.FUNDSOURCEID,Y.AGENCYID DESC) RN,Y.FUNDSOURCEID
            FROM CAL_T_FORMULA X,CAL_T_OUTWINDOWSET Y
            WHERE X.FORMULAID = Y.FORMULAID AND 
            (Y.AGENCYID = V_AGENCYID OR Y.AGENCYID = '*') AND Y.PROJTYPEID =V_PROJTYPEID AND Y.EXPECOID=V_EXPECOID
            ) T WHERE RN = 1) LOOP
          V_COLID := C_FORMULA.FUNDSOURCEID;
          SELECT DBCOLUMNNAME INTO V_COL FROM DICT_T_FACTOR WHERE TABLEID = P_TABLEID AND COLUMNID = V_COLID;
          V_FORMULA := DBMS_LOB.SUBSTR(C_FORMULA.FORMULASQL,32000);
          IF V_FORMULA IS NULL THEN
            CONTINUE;
          END IF;
          /*V_FORMULA := REPLACE(V_FORMULA,'@AGENCYID@',V_AGENCYID);
          V_FORMULA := REPLACE(V_FORMULA,'@PROJTYPEID@',V_PROJTYPEID);
          V_FORMULA := REPLACE(V_FORMULA,'@EXPECOID@',V_EXPECOID);*/
          V_SQL := REPLACE_PARAMETER(V_FORMULA,V_TABLE,'TXYZ');
          V_SQL := 'SELECT ('||V_SQL||') '||V_COL||' FROM (SELECT '||V_STR||' FROM DUAL) TXYZ';
          
          EXECUTE IMMEDIATE V_SQL INTO V_NEW;
          V_NEW := NVL(V_NEW,0);
          V_PARM := V_PARM||TO_CHAR(V_NEW) ||' '||V_COL||',';
          V_COLLIST := V_COLLIST||V_COL||',';
          IF INSTR(V_FORCOLLIST,','||V_COL||',') < 1 THEN
            V_FORCOLLIST := V_FORCOLLIST||V_COL||',';
            V_STR2 := V_STR2||'(0 - '||V_COL||') '||V_COL||',';
            V_STR3 := V_STR3||'SUM( '||V_COL||') '||V_COL||',';
          END IF;
        END LOOP;
        V_PARM := SUBSTR(V_PARM,1,LENGTH(V_PARM) - 1);
        IF LENGTH(V_COLLIST) > 1 THEN
          V_SQL := 'SELECT '||V_STR||' FROM DUAL';
      
          V_CURSOR := DBMS_SQL.OPEN_CURSOR();
          DBMS_SQL.PARSE(V_CURSOR, V_SQL, DBMS_SQL.NATIVE);
          DBMS_SQL.DESCRIBE_COLUMNS(V_CURSOR,V_CNT,V_DESCTBL);
          V_STR := '';
          V_TMP := 'SELECT ';
          FOR I IN 1 .. V_CNT LOOP
             V_COL := UPPER(V_DESCTBL(I).COL_NAME);
             IF INSTR(V_COLLIST,','||V_COL||',') > 0 THEN
               V_TMP := V_TMP||'Y.'||V_COL||',';
             ELSE
               V_TMP := V_TMP||'X.'||V_COL||',';
             END IF;
           END LOOP;
           DBMS_SQL.CLOSE_CURSOR(V_CURSOR);
           V_TMP := SUBSTR(V_TMP,1,LENGTH(V_TMP) - 1);
           V_SQL := V_TMP||' FROM 
           ( '||V_SQL||') X,
           (SELECT '||V_PARM||' FROM DUAL) Y ';
        ELSE
          V_SQL := 'SELECT '||V_STR||' FROM DUAL';
        END IF;
        GOTO CALFORMULA0;
    END IF;
    
    SELECT COUNT(*) INTO V_CNT FROM FORMULA_T_FORMULADEF WHERE TABLEID = P_TABLEID AND FORMULATYPE = '8' AND ROWNUM < 2;
    --计算表间公式
    IF V_CNT > 0 THEN
      V_SQL := 'SELECT AGENCYID FROM (SELECT '||V_STR||' FROM DUAL) T';
      EXECUTE IMMEDIATE V_SQL INTO V_AGENCYID;
      V_PARM := '';
      V_COLLIST := ',';
      FOR C_COL IN (SELECT FORMULAID,FORCOMCOL FROM FORMULA_T_FORMULADEF WHERE TABLEID = P_TABLEID AND FORMULATYPE = '8') LOOP
        SELECT REFCOMCONT INTO V_TMP FROM FORMULA_T_FORMULADETAIL WHERE FORMULAID = C_COL.FORMULAID AND LINEID = 1;
        FOR C_FORMULA IN (SELECT LINEID,REFCOMCONT,REFTABLEID,REFWHERE FROM FORMULA_T_FORMULADETAIL WHERE FORMULAID = C_COL.FORMULAID AND LINEID > 1) LOOP
          SELECT DBTABLENAME INTO V_REFTABLENAME FROM DICT_T_MODEL WHERE TABLEID = C_FORMULA.REFTABLEID;
          IF C_FORMULA.REFWHERE IS NULL THEN
          V_SQL := 'NVL((SELECT '||C_FORMULA.REFCOMCONT||' FROM '||V_REFTABLENAME||' WHERE AGENCYID = '''||V_AGENCYID||'''),0)';
          ELSE
            V_SQL := 'NVL((SELECT '||C_FORMULA.REFCOMCONT||' FROM '||V_REFTABLENAME||' WHERE AGENCYID = '''||V_AGENCYID||''' AND '||C_FORMULA.REFWHERE||'),0)';
          END IF;
          V_EXP := 'CCOMPUTE'||TRIM(TO_CHAR(C_FORMULA.LINEID));
          V_TMP := REPLACE(V_TMP,V_EXP,V_SQL);
        END LOOP;
        /*V_START := 1;
        LOOP
          V_START := NVL(INSTR(V_TMP,'@'),0);
          EXIT WHEN V_START < 1;
          V_END := NVL(INSTR(V_TMP,'@',V_START + 1),0);
          IF V_END > V_START THEN
            V_ARG := SUBSTR(V_TMP,V_START,V_END - V_START + 1);
            V_COL := TRIM(UPPER(SUBSTR(V_ARG,1,LENGTH(V_ARG) - 2)));
            SELECT DATATYPE INTO V_TYPE FROM DICT_T_FACTOR WHERE TABLEID = P_TABLEID AND DBCOLUMNNAME = V_COL;
            IF V_TYPE = 0 OR V_TYPE = 1 OR V_TYPE = 2 THEN
              EXECUTE IMMEDIATE 'SELECT '||V_COL||' FROM (SELECT '||V_STR||' FROM DUAL) T'INTO V_NEW;
              V_TMP := REPLACE(V_TMP,V_ARG,TO_CHAR(V_NEW));
            END IF;
            IF V_TYPE = 3 OR V_TYPE = 6 THEN
              EXECUTE IMMEDIATE 'SELECT '||V_COL||' FROM (SELECT '||V_STR||' FROM DUAL) T'INTO V_RET;
              V_RET := NVL(V_RET,'');
              V_TMP := REPLACE(V_TMP,V_ARG,''''||V_RET||'''');
            END IF;
          ELSE
            EXIT;
          END IF;
        END LOOP;*/
        V_TMP := REPLACE_PARAMETER(V_TMP,V_TABLE,'TXYZ');
        V_SQL := 'SELECT ('||V_TMP||') '||C_COL.FORCOMCOL||' FROM (SELECT '||V_STR||' FROM DUAL) TXYZ';
        EXECUTE IMMEDIATE V_SQL INTO V_NEW;
        V_NEW := NVL(V_NEW,0);
        V_PARM := V_PARM||TO_CHAR(V_NEW) ||' '||C_COL.FORCOMCOL||',';
        V_COLLIST := V_COLLIST||C_COL.FORCOMCOL||',';
        IF INSTR(V_FORCOLLIST,','||C_COL.FORCOMCOL||',') < 1 THEN
          V_FORCOLLIST := V_FORCOLLIST||C_COL.FORCOMCOL||',';
          V_STR2 := V_STR2||'(0 - '||C_COL.FORCOMCOL||') '||C_COL.FORCOMCOL||',';
          V_STR3 := V_STR3||'SUM( '||C_COL.FORCOMCOL||') '||C_COL.FORCOMCOL||',';
        END IF;
      END LOOP;
      V_PARM := SUBSTR(V_PARM,1,LENGTH(V_PARM) - 1);
      IF LENGTH(V_COLLIST) > 1 THEN
        V_SQL := 'SELECT '||V_STR||' FROM DUAL';
      
        V_CURSOR := DBMS_SQL.OPEN_CURSOR();
        DBMS_SQL.PARSE(V_CURSOR, V_SQL, DBMS_SQL.NATIVE);
        DBMS_SQL.DESCRIBE_COLUMNS(V_CURSOR,V_CNT,V_DESCTBL);
        V_TMP := 'SELECT ';
        FOR I IN 1 .. V_CNT LOOP
           V_COL := UPPER(V_DESCTBL(I).COL_NAME);
           IF INSTR(V_COLLIST,','||V_COL||',') > 0 THEN
             V_TMP := V_TMP||'Y.'||V_COL||',';
           ELSE
             V_TMP := V_TMP||'X.'||V_COL||',';
           END IF;
         END LOOP;
         DBMS_SQL.CLOSE_CURSOR(V_CURSOR);
         V_TMP := SUBSTR(V_TMP,1,LENGTH(V_TMP) - 1);
         V_SQL := V_TMP||' FROM 
         ( '||V_SQL||') X,
         (SELECT '||V_PARM||' FROM DUAL) Y ';
      ELSE
        V_SQL := 'SELECT '||V_STR||' FROM DUAL';
      END IF;
      GOTO CALFORMULA0;
    END IF;
    
    <<CALFORMULA0>>
    --计算列间公式
    
    V_CURSOR := DBMS_SQL.OPEN_CURSOR();
    DBMS_SQL.PARSE(V_CURSOR, V_SQL, DBMS_SQL.NATIVE);
    DBMS_SQL.DESCRIBE_COLUMNS(V_CURSOR,V_CNT,V_DESCTBL);
    V_COLLIST := ',';
    FOR I IN 1 .. V_CNT LOOP
       --V_DESCTBL(I).COL_TYPE);
       V_COL := UPPER(V_DESCTBL(I).COL_NAME);
       V_COLLIST := V_COLLIST||V_COL||',';
     END LOOP;
     DBMS_SQL.CLOSE_CURSOR(V_CURSOR);
     
     FOR C_FORMULA IN (SELECT FORCOMCOL,REFCOMCONT FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = P_TABLEID AND FORMULATYPE = '0') LOOP
       V_START := INSTR(V_COLLIST,','||C_FORMULA.FORCOMCOL||',');
       IF V_START > 0 THEN
         V_COLLIST := SUBSTR(V_COLLIST,1,V_START)||'('||C_FORMULA.REFCOMCONT||') '||SUBSTR(V_COLLIST,V_START + 1);
       END IF;
       IF INSTR(V_FORCOLLIST,','||C_FORMULA.FORCOMCOL||',') < 1 THEN
         V_FORCOLLIST := V_FORCOLLIST||C_FORMULA.FORCOMCOL||',';
         V_STR2 := V_STR2||'(0 - '||C_FORMULA.FORCOMCOL||') '||C_FORMULA.FORCOMCOL||',';
         V_STR3 := V_STR3||'SUM( '||C_FORMULA.FORCOMCOL||') '||C_FORMULA.FORCOMCOL||',';
       END IF;
     END LOOP;
     
     IF LENGTH(V_FORCOLLIST) < 2 THEN
       RETURN '';
     END IF;
     V_COLLIST := SUBSTR(V_COLLIST,2);
     V_COLLIST := SUBSTR(V_COLLIST,1,LENGTH(V_COLLIST) - 1);
     
     V_FORCOLLIST := SUBSTR(V_FORCOLLIST,2);
     V_FORCOLLIST := SUBSTR(V_FORCOLLIST,1,LENGTH(V_FORCOLLIST) - 1);
     
     V_STR2 := SUBSTR(V_STR2,2);
     V_STR2 := SUBSTR(V_STR2,1,LENGTH(V_STR2) - 1);
     
     V_STR3 := SUBSTR(V_STR3,2);
     V_STR3 := SUBSTR(V_STR3,1,LENGTH(V_STR3) - 1);
     
     V_STR := DBMS_LOB.SUBSTR(P_ROWDATA,32000);
     V_SQL := '
WITH TDATA1 AS ('||V_SQL||'),
TDATA2 AS (SELECT '||V_STR||' FROM DUAL)
SELECT '||V_STR3||' FROM (
SELECT '||V_FORCOLLIST||' FROM (
SELECT '||V_COLLIST||' FROM TDATA1) T1
UNION ALL
SELECT '||V_STR2||' FROM TDATA2) T2';
     --DBMS_OUTPUT.put_line(v_sql);
     
     V_CURSOR := DBMS_SQL.OPEN_CURSOR();
     DBMS_SQL.PARSE(V_CURSOR, V_SQL, DBMS_SQL.NATIVE);
     DBMS_SQL.DESCRIBE_COLUMNS(V_CURSOR,V_CNT,V_DESCTBL);
     FOR I IN 1 .. V_CNT LOOP
       DBMS_SQL.DEFINE_COLUMN(V_CURSOR,I,V_NEW);
     END LOOP;
     V_NEW := DBMS_SQL.EXECUTE(V_CURSOR);
         
     V_NEW := DBMS_SQL.FETCH_ROWS(V_CURSOR);
     V_STR2 := '';
     FOR I IN 1 .. V_CNT LOOP
       DBMS_SQL.COLUMN_VALUE(V_CURSOR,I,V_NEW);
       IF V_NEW <> 0 THEN
         V_STR2 := V_STR2||V_DESCTBL(I).COL_NAME||'='||TO_CHAR(V_NEW)||',';
       END IF;
     END LOOP;
     DBMS_SQL.CLOSE_CURSOR(V_CURSOR);
        
     IF V_STR2  IS NOT NULL THEN
       V_STR2 := SUBSTR(V_STR2,1,LENGTH(V_STR2) - 1);
       RETURN V_STR2;
     ELSE
       RETURN '';
     END IF;
       
  END F_CALCULATEFORMULA_ROW;
  
  PROCEDURE P_CALCULATEFORMULA(P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2) IS
    V_CNT NUMBER;
    V_SQL VARCHAR2(32000);
    V_TABLE varchar2(30);
    V_APPID VARCHAR2(32);
    V_SETLIST VARCHAR2(32000);
    V_REFTABLENAME VARCHAR2(30);
    V_CUR SYS_REFCURSOR;
    V_NEEDUPDATE VARCHAR2(4000);
    V_PROJTYPEID VARCHAR2(32);
    V_COLID VARCHAR2(32);
    V_EXPECOID VARCHAR2(32);
    V_POS NUMBER;
    V_START NUMBER;
    V_END NUMBER;
    V_MARK VARCHAR2(4000);
    V_LEN NUMBER;
    V_FORMULATYPE VARCHAR2(32);
    V_COLLIST VARCHAR2(32000);
    V_COL VARCHAR2(30);
    V_FORMULASQL CLOB;
    V_FORMULA VARCHAR2(32000);
    V_TMP VARCHAR2(32000);
    V_EXP VARCHAR2(4000);
    V_DATAKEY VARCHAR2(32);
    V_FORMULAID VARCHAR2(32);
    V_FORMULACOL VARCHAR2(30);
  BEGIN
    SELECT APPID,DBTABLENAME INTO V_APPID,V_TABLE FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    SELECT COUNT(*) INTO V_CNT FROM CAL_T_FORMULA WHERE TABLEID = P_TABLEID;
    --计算单元格公式
    IF V_CNT > 0 THEN
      V_SQL := 'SELECT DATAKEY,NEEDUPDATE,PROJTYPEID,EXPECOID FROM '||V_TABLE||' WHERE AGENCYID = '''||P_AGENCYID||''' AND LENGTH(NEEDUPDATE)>4 AND INSTR(NEEDUPDATE,'',6,'') > 0';
        OPEN V_CUR FOR V_SQL;
        LOOP
          FETCH V_CUR INTO V_DATAKEY,V_NEEDUPDATE,V_PROJTYPEID,V_EXPECOID;
          EXIT WHEN V_CUR%NOTFOUND;
          --NEEDUPDATE格式为,列名1,6,,列名2,6,
          --先解析出列名
          V_NEEDUPDATE := REPLACE(V_NEEDUPDATE,' ','');
          IF V_NEEDUPDATE IS NULL THEN
            CONTINUE;
          END IF;
          V_START := 1;
          V_SETLIST := '';
          V_COLLIST :=',';
          LOOP
            IF V_NEEDUPDATE IS NULL THEN
              EXIT;
            END IF;
            V_START := INSTR(V_NEEDUPDATE,',',V_START);
            EXIT WHEN V_START < 1;
            V_POS := INSTR(V_NEEDUPDATE,',',V_START + 1);
            V_END := INSTR(V_NEEDUPDATE,',',V_POS + 1);
            IF V_POS < 1 OR V_END < 1 THEN
              EXIT;
            END IF;
            V_LEN := V_POS - V_START - 1;
            V_COL := SUBSTR(V_NEEDUPDATE,V_START + 1,V_LEN);
            V_LEN := V_END - V_POS - 1;
            V_FORMULATYPE:=SUBSTR(V_NEEDUPDATE,V_POS + 1,V_LEN);
            V_LEN := V_END - V_START + 1;
            V_MARK := SUBSTR(V_NEEDUPDATE,V_START,V_LEN);
            
            IF V_FORMULATYPE <> '6' THEN
              V_START := V_END + 1;
              CONTINUE;
            END IF;
            SELECT NVL((SELECT COLUMNID FROM DICT_T_FACTOR WHERE TABLEID = P_TABLEID AND DBCOLUMNNAME = V_COL AND ISLEAF = '1'),'') INTO V_COLID FROM DUAL;
            
            V_NEEDUPDATE := REPLACE(V_NEEDUPDATE,V_MARK,'');
            V_START := 1;
            IF V_COLID IS NULL THEN
              CONTINUE;
            END IF; 
            --先判断项目类别与经济科目有无对应关系
            SELECT COUNT (*) INTO V_CNT FROM CAL_T_OUTWINDOWSET WHERE TABLEID = P_TABLEID AND (AGENCYID = P_AGENCYID OR AGENCYID = '*') AND PROJTYPEID =V_PROJTYPEID AND EXPECOID=V_EXPECOID AND FUNDSOURCEID = V_COLID;
            IF V_CNT < 1 THEN
              RAISE_APPLICATION_ERROR(-20001,'至少有一个项目类别、经济科目与资金来源没有对应关系，请设置该对应关系！');
              RETURN;
            END IF;
            SELECT FORMULASQL  INTO V_FORMULASQL FROM (
            SELECT CASE WHEN Y.FORMULAID IN ('001','002') THEN EMPTY_CLOB() ELSE X.FORMULASQL END FORMULASQL,ROW_NUMBER() OVER(ORDER BY Y.AGENCYID DESC) RN
            FROM CAL_T_FORMULA X,CAL_T_OUTWINDOWSET Y
            WHERE X.FORMULAID = Y.FORMULAID AND y.TABLEID = P_TABLEID AND 
            (Y.AGENCYID = P_AGENCYID OR Y.AGENCYID = '*') AND Y.PROJTYPEID =V_PROJTYPEID AND Y.EXPECOID=V_EXPECOID AND Y.FUNDSOURCEID = V_COLID
            ) T WHERE RN = 1;
            V_FORMULA := DBMS_LOB.SUBSTR(V_FORMULASQL,32000);
            IF V_FORMULA IS NULL THEN
              CONTINUE;
            END IF;
            /*V_FORMULA := REPLACE(V_FORMULA,'@AGENCYID@',P_AGENCYID);
            V_FORMULA := REPLACE(V_FORMULA,'@PROJTYPEID@',V_PROJTYPEID);
            V_FORMULA := REPLACE(V_FORMULA,'@EXPECOID@',V_EXPECOID);*/
            V_FORMULA := REPLACE_PARAMETER(V_FORMULA,V_TABLE,'TXYZ');
            V_SETLIST := V_SETLIST||V_COL||'='||V_FORMULA||',';
          END LOOP;
          V_SETLIST := SUBSTR(V_SETLIST,1,LENGTH(V_SETLIST) - 1);
          IF V_SETLIST IS NOT NULL THEN
            V_SETLIST := ','||V_SETLIST;
          ELSE
            V_SETLIST := ' ';
          END IF;
          V_SQL := 'UPDATE '||V_TABLE||' TXYZ SET NEEDUPDATE = '''||V_NEEDUPDATE ||''''||V_SETLIST||' WHERE  AGENCYID = '''||P_AGENCYID||''' AND DATAKEY = '''||V_DATAKEY||''' AND PROJTYPEID = '''||V_PROJTYPEID||''' AND EXPECOID = '''||V_EXPECOID||'''';
          EXECUTE IMMEDIATE V_SQL;
        END LOOP;
        CLOSE V_CUR;
    END IF;
    --计算表间公式
    V_SETLIST := '';
    V_NEEDUPDATE := '';
    V_SQL := 'SELECT NEEDUPDATE ,DATAKEY FROM '||V_TABLE||' WHERE AGENCYID = :P_AGENCYID AND INSTR(NEEDUPDATE,'',8,'') > 0';
    OPEN V_CUR FOR V_SQL USING P_AGENCYID;
    LOOP
      FETCH V_CUR INTO V_NEEDUPDATE,V_DATAKEY;
      EXIT WHEN V_CUR%NOTFOUND;
      --NEEDUPDATE格式为,列名1,6,,列名2,6,
      --先解析出列名
      V_NEEDUPDATE := REPLACE(V_NEEDUPDATE,' ','');
      IF V_NEEDUPDATE IS NULL THEN
        CONTINUE;
      END IF;
      V_START := 1;
      V_SETLIST := ' ';
      V_COLLIST :=',';
      LOOP
        IF V_NEEDUPDATE IS NULL THEN
          EXIT;
        END IF;
        V_START := INSTR(V_NEEDUPDATE,',',V_START);
        EXIT WHEN V_START < 1;
        V_POS := INSTR(V_NEEDUPDATE,',',V_START + 1);
        V_END := INSTR(V_NEEDUPDATE,',',V_POS + 1);
        IF V_POS < 1 OR V_END < 1 THEN
          EXIT;
        END IF;
        V_LEN := V_POS - V_START - 1;
        V_FORMULACOL := SUBSTR(V_NEEDUPDATE,V_START + 1,V_LEN);
        V_LEN := V_END - V_POS - 1;
        V_FORMULATYPE:=SUBSTR(V_NEEDUPDATE,V_POS + 1,V_LEN);
        V_LEN := V_END - V_START + 1;
        V_MARK := SUBSTR(V_NEEDUPDATE,V_START,V_LEN);
            
        IF V_FORMULATYPE <> '8' THEN
          V_START := V_END + 1;
          CONTINUE;
        END IF;
        V_NEEDUPDATE := REPLACE(V_NEEDUPDATE,V_MARK,'');
        
        SELECT NVL((SELECT FORMULAID FROM FORMULA_T_FORMULADEF WHERE TABLEID = P_TABLEID AND FORMULATYPE = '8' AND FORCOMCOL = V_FORMULACOL),'') INTO V_FORMULAID FROM DUAL;
        IF V_FORMULAID IS NOT NULL THEN
          SELECT REFCOMCONT INTO V_TMP FROM FORMULA_T_FORMULADETAIL WHERE FORMULAID = V_FORMULAID AND LINEID = 1;
          FOR C_FORMULA IN (SELECT LINEID,REFCOMCONT,REFTABLEID,REFWHERE FROM FORMULA_T_FORMULADETAIL WHERE FORMULAID = V_FORMULAID AND LINEID > 1) LOOP
            SELECT DBTABLENAME INTO V_REFTABLENAME FROM DICT_T_MODEL WHERE TABLEID = C_FORMULA.REFTABLEID;
            IF C_FORMULA.REFWHERE IS NULL THEN
            V_SQL := '(SELECT '||C_FORMULA.REFCOMCONT||' FROM '||V_REFTABLENAME||' WHERE AGENCYID = TXYZ.AGENCYID)';
            ELSE
              V_SQL := '(SELECT '||C_FORMULA.REFCOMCONT||' FROM '||V_REFTABLENAME||' WHERE AGENCYID = TXYZ.AGENCYID AND '||C_FORMULA.REFWHERE||')';
            END IF;
            V_EXP := 'CCOMPUTE'||TRIM(TO_CHAR(C_FORMULA.LINEID));
            V_TMP := REPLACE(V_TMP,V_EXP,V_SQL);
          END LOOP;
          /*V_START := 1;
          LOOP
            V_START := NVL(INSTR(V_TMP,'@'),0);
            EXIT WHEN V_START < 1;
            V_END := NVL(INSTR(V_TMP,'@',V_START + 1),0);
            IF V_END > V_START THEN
              V_ARG := SUBSTR(V_TMP,V_START,V_END - V_START + 1);
              V_COL := TRIM(UPPER(SUBSTR(V_ARG,1,LENGTH(V_ARG) - 2)));
              SELECT COUNT(*) INTO V_CNT FROM USER_TAB_COLUMNS WHERE TABLE_NAME = V_TABLE AND COLUMN_NAME = V_COL;
              IF V_CNT > 0 THEN
                V_TMP := REPLACE(V_TMP,V_ARG,'TXYZ.'||V_COL);
              END IF;
            ELSE
              EXIT;
            END IF;
          END LOOP;*/
          V_TMP := REPLACE_PARAMETER(V_TMP,V_TABLE,'TXYZ');
          V_SETLIST := V_SETLIST||V_FORMULACOL||'='||V_TMP||',';
        END IF;
        --V_SETLIST := SUBSTR(V_SETLIST,2);
        IF LENGTH(V_SETLIST) >= 30000 THEN
          --V_SETLIST := SUBSTR(V_SETLIST,1,LENGTH(V_SETLIST) - 1);
          V_SQL := 'UPDATE '||V_TABLE ||' TXYZ SET '||V_SETLIST||'NEEDUPDATE = '''||V_NEEDUPDATE ||''' WHERE DATAKEY = :1';
          EXECUTE IMMEDIATE V_SQL USING V_DATAKEY;
          V_SETLIST := '';
        END IF;
      END LOOP;
      IF LENGTH(V_SETLIST) > 0 THEN
        --V_SETLIST := SUBSTR(V_SETLIST,1,LENGTH(V_SETLIST) - 1);
        V_SQL := 'UPDATE '||V_TABLE ||' TXYZ SET '||V_SETLIST||'NEEDUPDATE = '''||V_NEEDUPDATE ||''' WHERE DATAKEY = :1';
        EXECUTE IMMEDIATE V_SQL USING V_DATAKEY;
      END IF;
    END LOOP;
    CLOSE V_CUR;
    --计算浮动表公式
    P_CALCULATEFORMULA_1(P_TABLEID,P_AGENCYID);
    --计算列间公式
    V_SETLIST := '';
    FOR C_COL IN (SELECT FORMULAID,FORCOMCOL,TABLEID FROM FORMULA_T_FORMULADEF WHERE TABLEID = P_TABLEID AND FORMULATYPE = '0') LOOP
      SELECT REFCOMCONT INTO V_TMP FROM FORMULA_T_FORMULADETAIL WHERE FORMULAID = C_COL.FORMULAID ;
      V_SETLIST := V_SETLIST||C_COL.FORCOMCOL||'='||V_TMP||',';
      IF LENGTH(V_SETLIST) >= 30000 THEN
        V_SETLIST := SUBSTR(V_SETLIST,1,LENGTH(V_SETLIST) - 1);
        V_SQL := 'UPDATE '||V_TABLE ||' TXYZ SET '||V_SETLIST||' WHERE AGENCYID = '''||P_AGENCYID||'''';
        EXECUTE IMMEDIATE V_SQL;
        V_SETLIST := '';
      END IF;
    END LOOP;
    
    IF LENGTH(V_SETLIST) >= 5 THEN
      V_SETLIST := SUBSTR(V_SETLIST,1,LENGTH(V_SETLIST) - 1);
      V_SQL := 'UPDATE '||V_TABLE ||' TXYZ SET '||V_SETLIST||' WHERE AGENCYID = '''||P_AGENCYID||'''';
      EXECUTE IMMEDIATE V_SQL;
    END IF;
    RETURN;
  END P_CALCULATEFORMULA;

  FUNCTION F_CALCULATEFORMULA_1(P_TABLEID VARCHAR2,P_FORMULA_CELLS VARCHAR2,P_REFERENCED_CELLS VARCHAR2) RETURN VARCHAR2 IS
    V_NUM NUMBER;
    V_OLDDATA VARCHAR2(4000);
    V_NEW NUMBER;
    V_SQL VARCHAR2(32000);
    V_WHERE VARCHAR2(4000);
    V_REFWHERE VARCHAR2(4000);
    V_COL VARCHAR2(30);
    V_REFCOL VARCHAR2(4000);
    V_TYPE VARCHAR2(4000);
    V_POS NUMBER;
    V_START NUMBER;
    V_END NUMBER;
    V_LEN NUMBER;
    V_PARM1 VARCHAR2(4000);
    V_PARM2 VARCHAR2(4000);
    V_FORMULA VARCHAR2(4000);
    V_TMP  VARCHAR2(4000);
    V_DATA VARCHAR2(4000);
    V_STR VARCHAR2(4000);
    V_RET VARCHAR2(4000);
    V_CONT VARCHAR2(4000);
    BEGIN
      --P_FORMULACELLS=[TEMPLATEID='abcde',COL1|213],[TEMPLATEID='12345',COL1|312]
      V_PARM1 := TRIM(P_FORMULA_CELLS);
      V_PARM2 := TRIM(P_REFERENCED_CELLS);
      IF V_PARM1 IS NULL THEN
        RETURN '';
      END IF;
      IF V_PARM2 IS NULL THEN
        RETURN '';
      END IF;
      V_RET := '';
      LOOP
        V_POS := NVL(INSTR(V_PARM1,'],['),0);
        IF V_POS > 0 THEN
          V_FORMULA := SUBSTR(V_PARM1,1,V_POS);
          V_PARM1 := SUBSTR(V_PARM1,V_POS + 2);
        ELSE
          V_FORMULA := V_PARM1;
          V_PARM1 := '';
        END IF;
        --V_FORMULA=[TEMPLATEID='abcde',COL1|213]
        V_START := NVL(INSTR(V_FORMULA,','),0);
        IF V_START < 1 THEN
          RAISE_APPLICATION_ERROR('-20001','公式解析错误！');
          RETURN '';
        END IF;
        V_WHERE := TRIM(SUBSTR(V_FORMULA,2,V_START - 2));
        V_FORMULA := TRIM(SUBSTR(V_FORMULA,V_START + 1));
        V_START := NVL(INSTR(V_FORMULA,'|'),0);
        IF V_START < 1 THEN
          RAISE_APPLICATION_ERROR('-20001','公式解析错误！');
          RETURN '';
        END IF;
        V_COL := TRIM(SUBSTR(V_FORMULA,1,V_START - 1));
        V_FORMULA := TRIM(SUBSTR(V_FORMULA,V_START + 1));
        V_OLDDATA := TRIM(SUBSTR(V_FORMULA,1,LENGTH(V_FORMULA) - 1));
        V_NUM := TO_NUMBER(V_OLDDATA);
        V_PARM2 := TRIM(P_REFERENCED_CELLS);
        --P_REFERENCED_CELLS=[TEMPLATEID='abcde',COL1|123],[TEMPLATEID='12345',COL1|456]
        V_CONT := '';
        FOR C_FORMULA IN (SELECT REFCOMCONT,REFWHERE FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = P_TABLEID AND FORMULATYPE = '1' AND FORCOMCOL = V_COL AND FORWHERE = V_WHERE) LOOP
          V_CONT := C_FORMULA.REFCOMCONT;
          V_REFWHERE := REPLACE(C_FORMULA.REFWHERE,'$',',');
          LOOP
            V_START := NVL(INSTR(V_REFWHERE,'|'),0);
          EXIT WHEN V_START < 1;
            V_TMP := SUBSTR(V_REFWHERE,1,V_START);
            V_REFWHERE := SUBSTR(V_REFWHERE,V_START + 1);
            V_STR := V_TMP;
            V_START := INSTR(V_TMP,',');
            V_REFCOL := TRIM(SUBSTR(V_TMP,V_START + 1));
            V_REFCOL := TRIM(SUBSTR(V_REFCOL,1,LENGTH(V_REFCOL) - 1));
            V_START := INSTR(V_PARM2,V_TMP);
            IF V_START > 0 THEN
              V_LEN := LENGTH(V_TMP);
              V_END := INSTR(V_PARM2,']',V_START + V_LEN);
              IF V_END > 0 THEN
                V_DATA := SUBSTR(V_PARM2,V_START + V_LEN,V_END - (V_START + V_LEN));
                V_PARM2 := REPLACE(V_PARM2,'['||V_TMP||V_DATA||']','');
                --表中公司内容为〖TEMPLATEID='3B9A5C870FDF4ACE8038525678A44327'〗{SNZSRS}
                --去掉最后一个竖线
                V_STR := SUBSTR(V_STR,1,LENGTH(V_STR) - 1);
                V_STR := REPLACE(V_STR,',','〗{');
                V_STR := '〖'||V_STR||'}';
                SELECT DATATYPE INTO V_TYPE FROM DICT_T_FACTOR WHERE TABLEID = P_TABLEID AND DBCOLUMNNAME = V_REFCOL AND ISLEAF = '1';
                IF V_TYPE = '3' OR V_TYPE = '6' THEN
                  V_DATA := ''''||V_DATA||'''';
                END IF;
                V_CONT := REPLACE(V_CONT,V_STR,V_DATA);
              END IF;
            END IF;
          END LOOP;
          IF V_CONT IS NOT NULL THEN
            V_SQL := 'SELECT '||V_CONT||' CNUM FROM DUAL';
            --dbms_output.put_line(v_sql);
            
            EXECUTE IMMEDIATE V_SQL INTO V_NEW;
            V_NEW := NVL(V_NEW,0);
            V_NEW := V_NEW - V_NUM;
            IF V_NEW <> 0 THEN
              V_RET := V_RET||'['||V_WHERE||','||V_COL||'|'||TO_CHAR(V_NEW)||'],';
            END IF;
          END IF;
        END LOOP;
        EXIT WHEN V_PARM1 IS NULL;
      END LOOP;
      V_RET := SUBSTR(V_RET,1,LENGTH(V_RET) - 1);
      RETURN V_RET;
  END F_CALCULATEFORMULA_1;
  
  FUNCTION F_GET_FORMULA_CELL(P_TABLEID VARCHAR2) RETURN SYS_REFCURSOR IS
    V_CUR SYS_REFCURSOR;
  BEGIN
    OPEN V_CUR FOR SELECT FORWHERE||','||FORCOMCOL FORMULACELL,REPLACE(REFWHERE,'$',',') REFERENCED_CELL 
    FROM FORMULA_T_FORMULADETAIL 
    WHERE TABLEID = P_TABLEID AND FORMULATYPE = '1' AND REFWHERE IS NOT NULL;
    RETURN V_CUR;
  END F_GET_FORMULA_CELL;
  
  PROCEDURE P_CALCULATEFORMULA_10(P_ESTID VARCHAR2,P_WHERE VARCHAR2 DEFAULT '') IS
    V_SQL VARCHAR2(32760);
    V_TABLE VARCHAR2(30);
    V_TMP  VARCHAR2(32760);
    V_SETLIST VARCHAR2(32760);
    V_EXP VARCHAR2(4000);
    V_REFTABLENAME VARCHAR2(30);
    V_TABLEID VARCHAR2(32);
    V_TYPE  VARCHAR2(32);
    V_WHERE VARCHAR2(32760);
    V_COLID VARCHAR2(4000);
    V_COLLIST VARCHAR2(4000);
    BEGIN
      SELECT X.ESTMODELID,X.FORMULASET,X.LOGIC_KEY INTO V_TABLEID,V_TYPE,V_COLID FROM BGT_T_ESTIMATE X WHERE X.ESTID = P_ESTID;
      SELECT DBTABLENAME INTO V_TABLE FROM DICT_T_MODEL WHERE TABLEID = V_TABLEID;
      V_SETLIST := '';
      --此处计算有待优化。应该将取数条件一样的公式先计算FORMULA_T_FORMULADETAIL表中REFTABLEID,REFWHERE一样的公式一起计算，这样有助于提高计算效率
      FOR C_COL IN (SELECT FORCOMCOL,FORMULAID,TABLEID,FORWHERE,RELAID FROM FORMULA_T_FORMULADEF WHERE TABLEID = V_TABLEID AND FORMULATYPE = '10' AND DEFTYPE = P_ESTID) LOOP
        SELECT REFCOMCONT INTO V_TMP FROM FORMULA_T_FORMULADETAIL WHERE FORMULAID = C_COL.FORMULAID AND LINEID = 1;
        FOR C_FORMULA IN (SELECT LINEID,REFCOMCONT,REFTABLEID,REFWHERE FROM FORMULA_T_FORMULADETAIL WHERE FORMULAID = C_COL.FORMULAID AND LINEID > 1) LOOP
          SELECT DBTABLENAME INTO V_REFTABLENAME FROM DICT_T_MODEL WHERE TABLEID = C_FORMULA.REFTABLEID;
          IF C_FORMULA.REFWHERE IS NULL THEN
          V_SQL := '(SELECT '||C_FORMULA.REFCOMCONT||' FROM '||V_REFTABLENAME||')';
          ELSE
            V_SQL := '(SELECT '||C_FORMULA.REFCOMCONT||' FROM '||V_REFTABLENAME||' WHERE '||C_FORMULA.REFWHERE||')';
          END IF;
          V_EXP := 'CCOMPUTE'||TRIM(TO_CHAR(C_FORMULA.LINEID));
          V_TMP := REPLACE(V_TMP,V_EXP,V_SQL);
        END LOOP;
        
        V_SETLIST := V_SETLIST||C_COL.FORCOMCOL||'='||V_TMP;
        /*--V_SETLIST := SUBSTR(V_SETLIST,2);
        IF LENGTH(V_SETLIST) >= 30000 THEN*/
        --V_SETLIST := SUBSTR(V_SETLIST,1,LENGTH(V_SETLIST) - 1);
        IF V_TYPE = '0' THEN
          V_COLLIST := ' ';
          FOR C_FACTOR IN (SELECT T.DBCOLUMNNAME FROM DICT_T_FACTOR T WHERE TABLEID = V_TABLEID AND V_COLID LIKE '%'||COLUMNID||'%') LOOP
            V_COLLIST := V_COLLIST||C_FACTOR.DBCOLUMNNAME||'||''|''';
          END LOOP;
          V_COLLIST := TRIM(V_COLLIST);
          V_WHERE := 'PKG_UTILS.MD5('||V_COLLIST||') = '''||C_COL.RELAID||'''';
        END IF;
        IF V_TYPE = '1' THEN
          SELECT CONDITIONSQL INTO V_WHERE FROM BGT_T_FORMULASORT WHERE QUERYID = (SELECT QUERYID FROM BGT_T_SORTDEF WHERE ESTID = P_ESTID AND FORMULASORTID = C_COL.RELAID);
        END IF;
        V_SQL := 'UPDATE '||V_TABLE ||' TXYZ SET '||V_SETLIST||' WHERE '||V_WHERE;
        IF P_WHERE IS NOT NULL THEN
          V_SQL := V_SQL||' AND '||P_WHERE;
        END IF;
        --参数替换
        V_SQL := REPLACE_PARAMETER(V_SQL,V_TABLE,'TXYZ');
        --dbms_output.put_line(v_SQL);
        BEGIN
          EXECUTE IMMEDIATE V_SQL;
        EXCEPTION WHEN OTHERS THEN
          dbms_output.put_line(v_SQL);
          RAISE;
        END;
        V_SETLIST := '';
       /* END IF;*/
      END LOOP;
      RETURN;
  END P_CALCULATEFORMULA_10;
  
  PROCEDURE P_CALCULATEFORMULA_0(P_TABLEID VARCHAR2,P_WHERE VARCHAR2 DEFAULT '') IS
    V_SQL VARCHAR2(4000);
    V_SETLIST VARCHAR2(4000);
    V_TMP VARCHAR2(4000);
    V_TABLE VARCHAR2(4000);
  BEGIN
    SELECT DBTABLENAME INTO V_TABLE FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    V_SETLIST := '';
    FOR C_COL IN (SELECT FORMULAID,FORCOMCOL,TABLEID FROM FORMULA_T_FORMULADEF WHERE TABLEID = P_TABLEID AND FORMULATYPE = '0') LOOP
      SELECT REFCOMCONT INTO V_TMP FROM FORMULA_T_FORMULADETAIL WHERE FORMULAID = C_COL.FORMULAID ;
      V_SETLIST := V_SETLIST||C_COL.FORCOMCOL||'='||V_TMP||',';
      IF LENGTH(V_SETLIST) >= 30000 THEN
        V_SETLIST := SUBSTR(V_SETLIST,1,LENGTH(V_SETLIST) - 1);
        V_SQL := 'UPDATE '||V_TABLE ||' TXYZ SET '||V_SETLIST||CASE WHEN P_WHERE IS NULL THEN '' ELSE ' WHERE '||P_WHERE END;
        EXECUTE IMMEDIATE V_SQL;
        V_SETLIST := '';
      END IF;
    END LOOP;
    
    IF LENGTH(V_SETLIST) >= 5 THEN
      V_SETLIST := SUBSTR(V_SETLIST,1,LENGTH(V_SETLIST) - 1);
      V_SQL := 'UPDATE '||V_TABLE ||' TXYZ SET '||V_SETLIST||CASE WHEN P_WHERE IS NULL THEN '' ELSE ' WHERE '||P_WHERE END;
      EXECUTE IMMEDIATE V_SQL;
    END IF;
    RETURN;
  END P_CALCULATEFORMULA_0;
  
  PROCEDURE P_MARKNEEDUPDATE(P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2 DEFAULT '%') IS
    V_TABLENAME VARCHAR2(30);
    V_SQL VARCHAR2(32000);
    V_NEEDUPDATE VARCHAR2(4000);
  BEGIN
    SELECT DBTABLENAME INTO V_TABLENAME FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    V_NEEDUPDATE := F_GETNEEDUPDATE_689(P_TABLEID);
    V_SQL := 'UPDATE '||V_TABLENAME||' SET NEEDUPDATE = NVL(NEEDUPDATE,'''')||'''||V_NEEDUPDATE||''' WHERE AGENCYID LIKE '''||P_AGENCYID||'%''';
    EXECUTE IMMEDIATE V_SQL;
    RETURN;
  END P_MARKNEEDUPDATE;
  
  FUNCTION GETSTANDARDGRADVALUE(P_AGENCYID VARCHAR2,P_STANDARID VARCHAR2,P_FLAG CHAR DEFAULT '0') RETURN NUMBER IS
    V_NUM NUMBER;
  BEGIN
    IF P_FLAG ='0' THEN
      SELECT NVL((SELECT Y.NUMVALUE 
      FROM CAL_T_AGSTANDGRADE X, CAL_T_STANDGRADE Y  
      WHERE X.STANDARDID = Y.STANDARDID
      AND X.GRADEID = Y.GRADEID AND X.AGENCYID  = P_AGENCYID AND X.STANDARDID = P_STANDARID),0) INTO V_NUM FROM DUAL; 
   ELSE
      EXECUTE IMMEDIATE 'SELECT NVL((SELECT Y.NUMVALUE 
      FROM SPF_T_CAGSTANDGRADE X, SPF_T_CSTANDGRADE Y  
      WHERE X.STANDARDID = Y.STANDARDID
      AND X.GRADEID = Y.GRADEID AND X.AGENCYID  = :P_AGENCYID AND X.STANDARDID = :P_STANDARID),0)  FROM DUAL' 
      INTO V_NUM USING P_AGENCYID,P_STANDARID; 
   END IF;
   RETURN V_NUM;
  END GETSTANDARDGRADVALUE;
  
  PROCEDURE FORMULA_P_CALCULATE_SPF_QUOTA(P_TABLEID VARCHAR2,P_PROJECTID VARCHAR2,P_SPFID VARCHAR2) IS
  --项目支出定额公式计算
    V_SQL VARCHAR2(30000);
    V_TABLENAME VARCHAR2(32);
    V_COL VARCHAR2(3000);
    V_AGENCYID VARCHAR2(32);
    V_CUR SYS_REFCURSOR;

    --公式游标结果
    V_FORMULA VARCHAR2(32000);
    V_FORMULASQL CLOB;
    V_CNT NUMBER;

    --最终计算结果更新表达式
    V_SET VARCHAR2(32000);
    --中间变量
    V_FORMULALIST VARCHAR2(32000);
    V_COLLIST VARCHAR2(32000);
    V_CUR2 SYS_REFCURSOR;
  BEGIN
    EXECUTE IMMEDIATE 'SELECT COUNT (*) CNT FROM SPF_T_CSPFTOFORMULA WHERE  SPFID = :P_SPFID' INTO V_CNT using P_SPFID;
    IF V_CNT < 1 THEN
      --RAISE_APPLICATION_ERROR(-20001,'专项['||P_SPFID||']没有对应关系，请在项目支出录入设置中增加该对应关系！');
      RETURN;
    END IF;
    SELECT DBTABLENAME INTO V_TABLENAME FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    V_SQL := 'SELECT DISTINCT AGENCYID FROM '||V_TABLENAME||' WHERE PROJECTID = '''||P_PROJECTID||''' AND SPFID = '''||P_SPFID||'''';
    OPEN V_CUR FOR V_SQL;
    LOOP
      FETCH V_CUR INTO V_AGENCYID;--,V_FUNDSOURCEID;
      EXIT WHEN V_CUR%NOTFOUND;
      
      V_SET := '';
      V_FORMULALIST := ',';
      V_COLLIST :=',';
       
      --先判断项目与资金来源有无对应关系
      EXECUTE IMMEDIATE 'SELECT COUNT (*) CNT FROM SPF_T_CSPFTOFORMULA WHERE  SPFID = :P_SPFID' INTO V_CNT USING P_SPFID;
      IF V_CNT < 1 THEN
        --RAISE_APPLICATION_ERROR(-20001,'专项['||P_SPFID||']没有对应关系，请在项目支出录入设置中增加该对应关系！');
        --RETURN;
        CONTINUE;
      END IF;
      OPEN V_CUR2 FOR 'SELECT X.FORMULASQL,Y.DEFAULTCOLID FROM SPF_T_CFORMULA X,SPF_T_CSPFTOFORMULA Y   
      WHERE X.FORMULAID = Y.FORMULAID AND Y.SPFID= :P_SPFID' USING P_SPFID;
      LOOP
        FETCH V_CUR2  INTO V_FORMULASQL,V_COL;
        EXIT WHEN V_CUR2%NOTFOUND;
        V_FORMULA := DBMS_LOB.SUBSTR(V_FORMULASQL,32000);
        IF V_FORMULA IS NULL THEN
          CONTINUE;
        END IF;
        V_FORMULA := REPLACE(V_FORMULA,'@AGENCYID@',''''||V_AGENCYID||'''');
        --EXECUTE IMMEDIATE V_FORMULA INTO V_RET;
        --V_SET := V_SET||V_COL||'='||TO_CHAR(V_RET)||',';
        V_SET := V_SET||V_COL||'='||V_FORMULA;
        --检查引用此列的列间公式
        FOR C_FORMULA IN (SELECT DISTINCT FORCOMCOL,REFCOMCONT FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = P_TABLEID AND FORMULATYPE = '0' AND INSTR(','||REFCOLUMN||','  , ','||V_COL||',') > 0) LOOP
          IF INSTR(V_COLLIST,','||C_FORMULA.FORCOMCOL||',') < 1 THEN
            V_COLLIST := V_COLLIST||C_FORMULA.FORCOMCOL||',';
            V_FORMULALIST := V_FORMULALIST||C_FORMULA.FORCOMCOL||'='||C_FORMULA.REFCOMCONT||',';
          END IF;
        END LOOP;
        
        IF V_SET IS NOT NULL THEN
          V_SQL := 'UPDATE '||V_TABLENAME||' SET '||V_SET||' WHERE PROJECTID = '''||P_PROJECTID||''' AND SPFID = '''||P_SPFID||'''';
          EXECUTE IMMEDIATE V_SQL;
          --去掉首尾的逗号
          V_FORMULALIST := SUBSTR(V_FORMULALIST,2,LENGTH(V_FORMULALIST) - 2);
          IF V_FORMULALIST IS NOT NULL THEN
            V_SQL := 'UPDATE '||V_TABLENAME||' SET '||V_FORMULALIST||' WHERE PROJECTID = '''||P_PROJECTID||''' AND SPFID = '''||P_SPFID||'''';
            EXECUTE IMMEDIATE V_SQL;
          END IF;
        END IF;
      END LOOP;
      CLOSE V_CUR2;
    END LOOP;
    CLOSE V_CUR;
  END FORMULA_P_CALCULATE_SPF_QUOTA;
  
  PROCEDURE FORMULA_P_CALCULATE_ALL_SPF(P_TABLEID VARCHAR2,P_PROJECTIDLIST VARCHAR2,P_SPFID VARCHAR2) IS
    --计算
    V_START NUMBER;
    V_LEN NUMBER;
    V_ID VARCHAR2(4000);
    V_TMP VARCHAR2(30000);
  BEGIN
    IF P_PROJECTIDLIST IS NULL THEN
      RETURN;
    END IF;
    V_TMP := P_PROJECTIDLIST;
    IF SUBSTR(V_TMP,-1,1) <>',' THEN
      V_TMP := V_TMP ||',';
    END IF;
    LOOP
      V_START := INSTR(V_TMP,',',1);
      IF V_START IS NULL THEN
        V_START := 0;
      END IF;
      EXIT WHEN V_START < 1;
      
      IF V_START = 1 THEN
        V_TMP := SUBSTR(V_TMP,V_START + 1);
        CONTINUE;
      END IF;
      V_LEN := V_START - 1;
      IF V_LEN > 0 THEN
        V_ID := SUBSTR(V_TMP,1,V_LEN);
        FORMULA_P_CALCULATE_SPF_QUOTA(P_TABLEID,V_ID,P_SPFID);
      END IF;
      
      V_TMP := SUBSTR(V_TMP,V_START + 1);
      
    END LOOP;
    
    RETURN;
  END FORMULA_P_CALCULATE_ALL_SPF;
  
  PROCEDURE FORMULA_P_CALCULATE_SPF(P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2 DEFAULT '%') IS
    V_TABLENAME VARCHAR2(32);
    V_SQL VARCHAR2(3000);
    V_SPFID VARCHAR2(32);
    V_PROJECTID VARCHAR2(32);
    V_CUR SYS_REFCURSOR;
  BEGIN
    SELECT DBTABLENAME INTO V_TABLENAME FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    V_SQL := 'SELECT DISTINCT SPFID,PROJECTID FROM '||V_TABLENAME||' WHERE AGENCYID LIKE '''||P_AGENCYID||'%''';
    OPEN V_CUR FOR V_SQL;
    LOOP
      FETCH V_CUR INTO V_SPFID,V_PROJECTID;
      EXIT WHEN V_CUR%NOTFOUND;
      FORMULA_P_CALCULATE_SPF_QUOTA(P_TABLEID,V_PROJECTID,V_SPFID);
    END LOOP;
    CLOSE V_CUR;
  END FORMULA_P_CALCULATE_SPF;
  
  PROCEDURE FORMULA_P_CALCULATEQUOTA(P_TABLEID VARCHAR2,P_YEAR VARCHAR2,P_AGENCYID VARCHAR2) IS
  --基本支出定额公式计算
    V_SQL VARCHAR2(30000);
    V_TABLENAME VARCHAR2(32);
    V_COL VARCHAR2(3000);
    V_FORMULATYPE VARCHAR2(10);
    V_NEEDUPDATE VARCHAR2(4000);
    V_PROJTYPEID VARCHAR2(32);
    V_COLID VARCHAR2(32);
    V_FUNDSOURCEID VARCHAR2(32);
    V_EXPECOID VARCHAR2(32);
    V_CUR SYS_REFCURSOR;
    --解析计算列
    V_START NUMBER;
    V_END   NUMBER;
    V_POS   NUMBER;
    V_LEN   NUMBER;
    V_MARK  VARCHAR2(100);
    --公式游标结果
    V_FORMULA VARCHAR2(32000);
    V_FORMULASQL CLOB;
    V_CNT NUMBER;
    --公式计算返回值
    --最终计算结果更新表达式
    V_SET VARCHAR2(32000);
    --中间变量
    V_FORMULALIST VARCHAR2(32000);
    V_COLLIST VARCHAR2(32000);
    V_CUR2 SYS_REFCURSOR;
    V_AGENCYID VARCHAR2(32);
  BEGIN
    SELECT DBTABLENAME INTO V_TABLENAME FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    OPEN V_CUR2 FOR 'SELECT GUID FROM CODE_T_AGENCY_BGT WHERE GUID = '''||P_AGENCYID||''' AND ISLEAF = ''1''
      UNION ALL
      SELECT GUID FROM CODE_T_AGENCY_BGT WHERE SUPERGUID = '''||P_AGENCYID||''' AND ISLEAF = ''1''';
    LOOP
      FETCH V_CUR2 INTO V_AGENCYID;
      EXIT WHEN V_CUR2%NOTFOUND;
      V_SQL := 'SELECT NEEDUPDATE,PROJTYPEID,EXPECOID FROM '||V_TABLENAME||' WHERE FINYEAR = '''||P_YEAR||'''  AND AGENCYID = '''||V_AGENCYID||''' AND LENGTH(NEEDUPDATE)>4 ORDER BY PROJTYPEID,EXPECOID DESC';
      OPEN V_CUR FOR V_SQL;
      LOOP
        FETCH V_CUR INTO V_NEEDUPDATE,V_PROJTYPEID,V_EXPECOID;
        EXIT WHEN V_CUR%NOTFOUND;
        --NEEDUPDATE格式为,列名1,6,,列名2,6,
        --先解析出列名
        V_NEEDUPDATE := REPLACE(V_NEEDUPDATE,' ','');
        IF V_NEEDUPDATE IS NULL THEN
          CONTINUE;
        END IF;
        V_START := 1;
        V_SET := '';
        V_FORMULALIST := ',';
        V_COLLIST :=',';
        LOOP
          IF V_NEEDUPDATE IS NULL THEN
            EXIT;
          END IF;
          V_START := INSTR(V_NEEDUPDATE,',',V_START);
          EXIT WHEN V_START < 1;
          V_POS := INSTR(V_NEEDUPDATE,',',V_START + 1);
          V_END := INSTR(V_NEEDUPDATE,',',V_POS + 1);
          IF V_POS < 1 OR V_END < 1 THEN
            EXIT;
          END IF;
          V_LEN := V_POS - V_START - 1;
          V_COL := SUBSTR(V_NEEDUPDATE,V_START + 1,V_LEN);
          V_LEN := V_END - V_POS - 1;
          V_FORMULATYPE:=SUBSTR(V_NEEDUPDATE,V_POS + 1,V_LEN);
          V_LEN := V_END - V_START + 1;
          V_MARK := SUBSTR(V_NEEDUPDATE,V_START,V_LEN);
          
          IF V_FORMULATYPE <> '6' THEN
            V_START := V_END + 1;
            CONTINUE;
          END IF;
          SELECT NVL((SELECT COLUMNID FROM DICT_T_FACTOR WHERE TABLEID = P_TABLEID AND DBCOLUMNNAME = V_COL AND ISLEAF = '1'),'') INTO V_COLID FROM DUAL;
          --SELECT NVL((SELECT GUID FROM EXP_S_PROJINVEST WHERE TOBASECOL = V_COLID),'') INTO V_FUNDSOURCEID FROM DUAL;
          SELECT 'SELECT NVL((SELECT GUID FROM '||TABLENAME||' WHERE TOBASECOL = '''||V_COLID||'''),'''') FROM DUAL' 
          INTO V_SQL
          FROM DICT_T_APPCODE T WHERE APPID = 'BGT' AND OBJECTID = 'FUNDSOURCEID';
          EXECUTE IMMEDIATE V_SQL INTO V_FUNDSOURCEID;
          
          V_NEEDUPDATE := REPLACE(V_NEEDUPDATE,V_MARK,'');
          V_START := 1;
          IF V_FUNDSOURCEID IS NULL THEN
            CONTINUE;
          END IF; 
          --先判断项目类别与经济科目有无对应关系
          SELECT COUNT (*) INTO V_CNT FROM CAL_T_OUTWINDOWSET WHERE (AGENCYID = V_AGENCYID OR AGENCYID = '*') AND PROJTYPEID =V_PROJTYPEID AND EXPECOID=V_EXPECOID;
          IF V_CNT < 1 THEN
            RAISE_APPLICATION_ERROR(-20001,'项目类别['||V_PROJTYPEID||']与经济科目['||V_EXPECOID||']没有对应关系，请在支出项目录入设置中增加该对应关系！');
            RETURN;
          END IF;
          SELECT FORMULASQL  INTO V_FORMULASQL FROM (
          SELECT CASE WHEN Y.FORMULAID IN ('001','002') THEN EMPTY_CLOB() ELSE X.FORMULASQL END FORMULASQL,ROW_NUMBER() OVER(ORDER BY Y.AGENCYID DESC) RN
          FROM CAL_T_FORMULA X,CAL_T_OUTWINDOWSET Y
          WHERE X.FORMULAID = Y.FORMULAID AND 
          (Y.AGENCYID = V_AGENCYID OR Y.AGENCYID = '*') AND Y.PROJTYPEID =V_PROJTYPEID AND Y.EXPECOID=V_EXPECOID AND Y.FUNDSOURCEID = V_FUNDSOURCEID
          ) T WHERE RN = 1;
          V_FORMULA := DBMS_LOB.SUBSTR(V_FORMULASQL,32000);
          IF V_FORMULA IS NULL THEN
            CONTINUE;
          END IF;
          V_FORMULA := REPLACE(V_FORMULA,'@AGENCYID@',V_AGENCYID);
          V_FORMULA := REPLACE(V_FORMULA,'@PROJTYPEID@',V_PROJTYPEID);
          V_FORMULA := REPLACE(V_FORMULA,'@EXPECOID@',V_EXPECOID);
          V_SET := V_SET||V_COL||'='||V_FORMULA||',';
          --EXECUTE IMMEDIATE V_FORMULA INTO V_RET;
          --V_SET := V_SET||V_COL||'='||TO_CHAR(V_RET)||',';
          --检查引用此列的列间公式
          FOR C_FORMULA IN (SELECT DISTINCT FORCOMCOL,REFCOMCONT FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = P_TABLEID AND FORMULATYPE = '0' AND INSTR(','||REFCOLUMN||','  , ','||V_COL||',') > 0) LOOP
            IF INSTR(V_COLLIST,','||C_FORMULA.FORCOMCOL||',') < 1 THEN
              V_COLLIST := V_COLLIST||C_FORMULA.FORCOMCOL||',';
              V_FORMULALIST := V_FORMULALIST||C_FORMULA.FORCOMCOL||'='||C_FORMULA.REFCOMCONT||',';
            END IF;
          END LOOP;
        END LOOP;
        V_SET := SUBSTR(V_SET,1,LENGTH(V_SET) - 1);
        IF V_SET IS NOT NULL THEN
          V_SET := ','||V_SET;
        ELSE
          V_SET := ' ';
        END IF;
        V_SQL := 'UPDATE '||V_TABLENAME||' SET NEEDUPDATE = '''||V_NEEDUPDATE ||''''||V_SET||' WHERE FINYEAR = '''||P_YEAR||'''  AND AGENCYID = '''||V_AGENCYID||''' AND PROJTYPEID = '''||V_PROJTYPEID||''' AND EXPECOID = '''||V_EXPECOID||'''';
        EXECUTE IMMEDIATE V_SQL;
        --去掉首尾的逗号
        V_FORMULALIST := SUBSTR(V_FORMULALIST,2,LENGTH(V_FORMULALIST) - 2);
        IF V_FORMULALIST IS NOT NULL THEN
          V_SQL := 'UPDATE '||V_TABLENAME||' SET '||V_FORMULALIST||' WHERE FINYEAR = '''||P_YEAR||'''  AND AGENCYID = '''||V_AGENCYID||''' AND PROJTYPEID = '''||V_PROJTYPEID||''' AND EXPECOID = '''||V_EXPECOID||'''';
          EXECUTE IMMEDIATE V_SQL;
        END IF;
      END LOOP;
      CLOSE V_CUR;
    END LOOP;
    CLOSE V_CUR2;
  END FORMULA_P_CALCULATEQUOTA;
  
  PROCEDURE FORMULA_P_CALCULATE_ALL_QUOTA(P_TABLEID VARCHAR2,P_AGENCYIDLIST VARCHAR2,P_YEAR VARCHAR2) IS
    --基本支出定额公式计算
    V_START NUMBER;
    V_LEN NUMBER;
    V_ID VARCHAR2(4000);
    V_TMP VARCHAR2(30000);
  BEGIN
    IF P_AGENCYIDLIST IS NULL THEN
      RETURN;
    END IF;
    V_TMP := P_AGENCYIDLIST;
    LOOP
      V_START := INSTR(V_TMP,1,',');
      EXIT WHEN V_START < 1;
      IF V_START = 1 THEN
        V_TMP := SUBSTR(V_TMP,V_START + 1);
        CONTINUE;
      END IF;
      V_LEN := V_START - 1;
      IF V_LEN > 0 THEN
        V_ID := SUBSTR(V_TMP,1,V_START - 1);
        FORMULA_P_CALCULATEQUOTA(P_TABLEID,P_YEAR,V_ID);
      END IF;
      V_TMP := SUBSTR(V_TMP,V_START + 1);
      
    END LOOP;
    
    RETURN;
  END FORMULA_P_CALCULATE_ALL_QUOTA;
  
  PROCEDURE FORMULA_P_MARKNEEDUPDATE(P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2 DEFAULT '%',P_FORMULAID VARCHAR2) IS
    V_TABLENAME VARCHAR2(30);
    V_SQL VARCHAR2(30000);
    V_COLUMNNAME VARCHAR2(32);
    V_NEEDUPDATE VARCHAR2(4000);
  BEGIN
    SELECT DBTABLENAME INTO V_TABLENAME FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    
    FOR C_DATA IN (SELECT DISTINCT AGENCYID,EXPECOID,PROJTYPEID,FUNDSOURCEID FROM CAL_T_OUTWINDOWSET WHERE AGENCYID LIKE P_AGENCYID||'%' AND FORMULAID = P_FORMULAID) LOOP
      /*SELECT NVL((SELECT FUNDSOURCEID FROM CAL_T_OUTWINDOWSET WHERE AGENCYID = C_DATA.AGENCYID AND PROJTYPEID = C_DATA.PROJTYPEID AND EXPECOID = C_DATA.EXPECOID AND FORMULAID = P_FORMULAID),'') INTO V_FUNDSOURCEID FROM DUAL;
      IF V_FUNDSOURCEID IS NULL THEN
        CONTINUE;
      END IF;*/
      --SELECT TOBASECOL INTO V_COLkUMNNAME FROM EXP_S_PROJINVEST WHERE TOBASETAB = P_TABLEID AND GUID = V_FUNDSOURCEID;
      /*SELECT 'SELECT NVL((SELECT TOBASECOL FROM '||TABLENAME||' WHERE GUID = '''||V_FUNDSOURCEID||'''),'''') FROM DUAL' 
      INTO V_SQL
      FROM DICT_T_APPCODE T WHERE APPID = 'BGT' AND OBJECTID = 'FUNDSOURCEID';
      EXECUTE IMMEDIATE V_SQL INTO V_COLUMNNAME;*/
      V_COLUMNNAME := C_DATA.FUNDSOURCEID;
      IF V_COLUMNNAME IS NULL THEN
        CONTINUE;
      END IF;
          
      SELECT DBCOLUMNNAME INTO V_COLUMNNAME FROM DICT_T_FACTOR WHERE TABLEID = P_TABLEID AND COLUMNID = V_COLUMNNAME;
      V_NEEDUPDATE := ','||V_COLUMNNAME||',6,';
      IF C_DATA.AGENCYID = '*' THEN
        V_SQL := 'UPDATE '||V_TABLENAME||' SET NEEDUPDATE = NVL(NEEDUPDATE,'''')||'''||V_NEEDUPDATE||''' WHERE AGENCYID LIKE '''||P_AGENCYID||'%'' AND EXPECOID = '''||C_DATA.EXPECOID||''' AND PROJTYPEID = '''||C_DATA.PROJTYPEID||''' AND (INSTR(NEEDUPDATE,'''||V_NEEDUPDATE||''') < 1 OR NEEDUPDATE IS NULL)';
      ELSE
        V_SQL := 'UPDATE '||V_TABLENAME||' SET NEEDUPDATE = NVL(NEEDUPDATE,'''')||'''||V_NEEDUPDATE||''' WHERE AGENCYID = '''||C_DATA.AGENCYID||''' AND EXPECOID = '''||C_DATA.EXPECOID||''' AND PROJTYPEID = '''||C_DATA.PROJTYPEID||''' AND (INSTR(NEEDUPDATE,'''||V_NEEDUPDATE||''') < 1 OR NEEDUPDATE IS NULL)';
      END IF;
      EXECUTE IMMEDIATE V_SQL;
    END LOOP;
  END FORMULA_P_MARKNEEDUPDATE;
  
  PROCEDURE FORMULA_P_MARKALLTABLE(P_FORMULAID VARCHAR2,P_AGENCYID VARCHAR2 DEFAULT '%') IS
    BEGIN
      FOR C_TAB IN (SELECT TABLEID FROM DICT_T_MODEL WHERE DEALTYPE = '2201') LOOP
        FORMULA_P_MARKNEEDUPDATE(C_TAB.TABLEID,P_AGENCYID,P_FORMULAID);
      END LOOP;
    END FORMULA_P_MARKALLTABLE;
    
  PROCEDURE FORMULA_P_MARKBYSTANDARD(P_STANDARDID VARCHAR2,P_AGENCYID VARCHAR2 DEFAULT '%') IS
    BEGIN
      FOR C_FORMULA IN (SELECT FORMULAID FROM CAL_T_FORMULA WHERE INSTR(STANDARDID,P_STANDARDID) > 0) LOOP
        FOR C_TAB IN (SELECT TABLEID FROM DICT_T_MODEL WHERE DEALTYPE = '2201') LOOP
          FORMULA_P_MARKNEEDUPDATE(C_TAB.TABLEID,P_AGENCYID,C_FORMULA.FORMULAID);
        END LOOP;
      END LOOP;
    END FORMULA_P_MARKBYSTANDARD;
    
  PROCEDURE FORMULA_P_MARKBYGRADE(P_GRADEID VARCHAR2,P_AGENCYID VARCHAR2 DEFAULT '%') IS
    BEGIN
      FOR C_STANDARD IN (SELECT DISTINCT STANDARDID FROM CAL_T_AGSTANDGRADE WHERE AGENCYID LIKE P_AGENCYID||'%' AND GRADEID = P_GRADEID) LOOP
        FORMULA_P_MARKBYSTANDARD(C_STANDARD.STANDARDID,P_AGENCYID);
      END LOOP;
    END FORMULA_P_MARKBYGRADE;
  
  FUNCTION FORMULA_F_CALCULATEFORMULA_6(P_TABLEID VARCHAR2,P_DATA CLOB) RETURN CLOB IS
    V_PARM VARCHAR2(32000);
    V_STR VARCHAR2(32000);
    V_SQL VARCHAR2(32000);
    V_COL VARCHAR2(30);
    V_TABLE VARCHAR2(32);
    V_NUM NUMBER(24,6);
    V_NEW NUMBER(24,6);
    V_STR2 VARCHAR2(32000);
    V_COLID VARCHAR2(32);
    --V_FUNDSOURCEID VARCHAR2(32);
    V_FORMULA VARCHAR2(32000);
    V_PROJTYPEID VARCHAR2(32);
    V_EXPECOID VARCHAR2(32);
    V_AGENCYID VARCHAR2(32);
  BEGIN
    V_PARM := P_DATA; 
    --传回一行数据，计算公式，将变化的字段和数据以键值对的形式返回
    IF P_TABLEID IS NULL THEN
      RETURN '';
    END IF;
    V_STR := DBMS_LOB.SUBSTR(V_PARM,30000);
    IF V_STR IS NULL THEN
      RETURN '';
    END IF;
    V_SQL := 'SELECT AGENCYID,PROJTYPEID,EXPECOID FROM (SELECT '||V_STR||' FROM DUAL) T';
    EXECUTE IMMEDIATE V_SQL INTO V_AGENCYID,V_PROJTYPEID,V_EXPECOID;
    
    SELECT DBTABLENAME INTO V_TABLE FROM DICT_T_MODEL WHERE TABLEID = P_TABLEID;
    V_PARM := '';
    FOR C_FORMULA IN (SELECT FORMULASQL,FUNDSOURCEID,DBCOLUMNNAME  FROM (
          SELECT CASE WHEN Y.FORMULAID IN ('001','002') THEN EMPTY_CLOB() ELSE X.FORMULASQL END FORMULASQL,ROW_NUMBER() OVER(PARTITION BY Y.FUNDSOURCEID ORDER BY Y.AGENCYID DESC) RN,Y.FUNDSOURCEID,Z.DBCOLUMNNAME
          FROM CAL_T_FORMULA X,CAL_T_OUTWINDOWSET Y,DICT_T_FACTOR Z
          WHERE X.FORMULAID = Y.FORMULAID AND Y.FUNDSOURCEID = Z.COLUMNID AND 
          (Y.AGENCYID = V_AGENCYID OR Y.AGENCYID = '*') AND Y.PROJTYPEID =V_PROJTYPEID AND Y.EXPECOID=V_EXPECOID AND Z.TABLEID = P_TABLEID
          ) T WHERE RN = 1) LOOP
      --V_COLID := C_FORMULA.FUNDSOURCEID;
      --SELECT DBCOLUMNNAME INTO V_COL FROM DICT_T_FACTOR WHERE TABLEID = P_TABLEID AND COLUMNID = V_COLID;
      V_COL := C_FORMULA.DBCOLUMNNAME;
      V_FORMULA := DBMS_LOB.SUBSTR(C_FORMULA.FORMULASQL,32000);
      IF V_FORMULA IS NULL THEN
        CONTINUE;
      END IF;
      /*V_FORMULA := REPLACE(V_FORMULA,'@AGENCYID@',V_AGENCYID);
      V_FORMULA := REPLACE(V_FORMULA,'@PROJTYPEID@',V_PROJTYPEID);
      V_FORMULA := REPLACE(V_FORMULA,'@EXPECOID@',V_EXPECOID);*/
      V_FORMULA := REPLACE_PARAMETER(V_FORMULA,V_TABLE,'TXYZ');
      V_SQL := 'SELECT '||V_COL||' FROM (SELECT '||V_STR||' FROM DUAL) T';
      EXECUTE IMMEDIATE V_SQL INTO V_NUM;
      V_NUM := NVL(V_NUM,0);
      V_SQL := 'SELECT ('||V_FORMULA||') '||V_COL||' FROM (SELECT '||V_STR||' FROM DUAL) TXYZ';
      EXECUTE IMMEDIATE V_SQL INTO V_NEW;
      V_NEW := NVL(V_NEW,0);
      V_NEW := V_NEW - V_NUM;
      IF V_NEW <> 0 THEN
        V_PARM := V_PARM||V_COL||'='||TO_CHAR(V_NEW)||',';
      END IF;
    END LOOP;
    
    IF V_PARM IS NOT NULL THEN
      V_PARM := SUBSTR(V_PARM,1,LENGTH(V_PARM) - 1);
    END IF;
    
    /*V_STR2 := FORMULA_F_CALCULATEFORMULA_0(P_TABLEID,P_DATA);
    IF V_STR2 IS NOT NULL THEN
      IF V_PARM IS NOT NULL THEN
        V_STR2 := V_STR2||','||V_PARM;
      END IF;
    ELSE
      IF V_PARM IS NOT NULL THEN
        V_STR2 := V_PARM;
      END IF;
    END IF;*/
    
    RETURN V_PARM;
    
  END FORMULA_F_CALCULATEFORMULA_6;
BEGIN
  -- INITIALIZATION
  RETURN;
END PKG_FORMULA;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PKG_CHECK</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE PACKAGE BODY PKG_CHECK IS

  -- Private type declarations
  
  -- Private constant declarations

  -- Private variable declarations

  -- Function and procedure implementations
  FUNCTION F_EXCEUTE(P_AGENCYID VARCHAR2,P_CHECKID VARCHAR2) RETURN VARCHAR2 IS
    V_SQL VARCHAR2(32000);
    V_CLOB CLOB;
    V_INFO VARCHAR2(4000);
    LDATA NUMBER;
    RDATA NUMBER;
  BEGIN
    SELECT SHOWTEXT,CHECKSQL INTO V_INFO,V_CLOB FROM CHECK_T_DEF WHERE CHECKID = P_CHECKID;
    V_SQL := DBMS_LOB.SUBSTR(V_CLOB,32000);
    V_SQL := REPLACE(V_SQL,'@AGENCYID@',P_AGENCYID);
    V_SQL := 'SELECT CDATA1 LDATA,CDATA2 RDATA FROM ('||V_SQL||') T';
    BEGIN
      EXECUTE IMMEDIATE V_SQL INTO LDATA,RDATA;
    EXCEPTION WHEN NO_DATA_FOUND THEN
      RETURN '';
    END;
    V_INFO := V_INFO||CHR(10)||'@#$%&'||TO_CHAR(LDATA)||' LDATA,'||TO_CHAR(RDATA)||' RDATA';
    RETURN V_INFO;
  END F_EXCEUTE;
  
  PROCEDURE P_CHECKTABLE(P_TABLEID VARCHAR2,P_AGENCYID VARCHAR2,P_RESULT OUT SYS_REFCURSOR) IS
    V_SQL VARCHAR2(32700);
    V_TMP VARCHAR2(32000);
  BEGIN
    V_SQL := 'SELECT ORDERID,CHECKNAME,SHOWTEXT,'''' CHECKID,0 LDATA,0 RDATA FROM CHECK_T_DEF WHERE CHECKID =''#''';
    FOR C_CHK IN (SELECT CHECKID,CHECKSQL FROM CHECK_T_DEF WHERE CHECKTYPE = '0' AND LTABLEID = P_TABLEID) LOOP
      V_TMP := DBMS_LOB.SUBSTR(C_CHK.CHECKSQL,32000);
      V_TMP := REPLACE(V_TMP,'@AGENCYID@',P_AGENCYID);
      --EXECUTE IMMEDIATE 'SELECT COUNT(*) CNT FROM ('||V_TMP||') T' INTO V_CNT;
      --IF V_CNT > 0 THEN
        V_TMP := 'SELECT '''||C_CHK.CHECKID||''' CHECKID,CDATA1 LDATA,CDATA2 RDATA FROM ('||V_TMP||') T';
        V_TMP := '
SELECT X.ORDERID,X.CHECKNAME,X.SHOWTEXT,X.CHECKID,Y.LDATA,T.RDATA 
  FROM CHECK_T_DEF X,
  ('||V_TMP||') T  
  WHERE X.CHECKID = Y.CHECKID AND CHECKID ='''||C_CHK.CHECKID||'''';
        
        V_SQL := V_SQL||V_TMP;
      --END IF;
    
    END LOOP;
    
    OPEN P_RESULT FOR V_SQL;
  END P_CHECKTABLE;
  
  PROCEDURE P_EXECCHECK(P_CHECKID VARCHAR2,P_PARM VARCHAR2,P_RESULT OUT SYS_REFCURSOR) IS
    V_SQL VARCHAR2(32000);
    V_TMP VARCHAR2(32000);
    V_DEST_T DBMS_SQL.DESC_TAB;
    V_CLOB CLOB;
    V_THECURSOR INTEGER DEFAULT DBMS_SQL.OPEN_CURSOR;
    V_COLCNT    NUMBER;
    V_MSG VARCHAR2(4000);
    V_PARM VARCHAR2(4000);
    V_DISTRICTID VARCHAR2(32);
    V_AGENCYID VARCHAR2(32);
  BEGIN
    SELECT CHECKSQL,SHOWTEXT INTO V_CLOB,V_MSG FROM BGT_T_CHECKDEF WHERE CHECKID = P_CHECKID;
    V_TMP := DBMS_LOB.SUBSTR(V_CLOB,32000);
    V_PARM := P_PARM;
    IF V_PARM IS NULL THEN
      V_PARM := ' ';
    END IF;
    V_TMP := REPLACE(V_TMP,'@WHERE@',V_PARM);
    
    V_TMP := REPLACE(V_TMP,'@USERID@',GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('USER'));
    EXECUTE IMMEDIATE 'SELECT GUID,DISTRICTID FROM CODE_T_AGENCY WHERE CODE = GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM(''DIVID'')' INTO V_AGENCYID,V_DISTRICTID;
    V_TMP := REPLACE(V_TMP,'@AGENCYID@',V_AGENCYID);
    V_TMP := REPLACE(V_TMP,'@DISTRICTID@',V_DISTRICTID);
    V_TMP := REPLACE(V_TMP,'@FINYEAR@',GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR'));
    
    DBMS_SQL.PARSE(V_THECURSOR, V_TMP, DBMS_SQL.NATIVE);
    DBMS_SQL.DESCRIBE_COLUMNS(V_THECURSOR, V_COLCNT, V_DEST_T);
    V_SQL := 'SELECT '''||P_CHECKID||''' CHECKID,';
    FOR I IN 1 .. V_COLCNT LOOP
      V_SQL:=V_SQL||V_DEST_T(I).COL_NAME||',';
    END LOOP;
    DBMS_SQL.CLOSE_CURSOR(V_THECURSOR);
    V_SQL := V_SQL||'(CDATA1 - CDATA2) DEVIATIONVALUE,('''||V_MSG||''') ERRORMESSAGE FROM ('||V_TMP||') T';
    OPEN P_RESULT FOR V_SQL;
    
  END P_EXECCHECK;
  
  PROCEDURE CREATE_TRIGGER(P_MODELID VARCHAR2,P_COLLIST VARCHAR2) IS
  V_MODEL VARCHAR2(32000);
  V_SQL VARCHAR2(32000);
  V_WHERE VARCHAR2(32000);
  V_TABLE VARCHAR2(30);
  V_OLD VARCHAR2(4000);
  V_NEW VARCHAR2(4000);
  V_CNT NUMBER;
  V_I NUMBER;
  V_CURSOR SYS_REFCURSOR;
  V_TABLEID VARCHAR2(32);
  V_ADDCOL VARCHAR2(4000);
  V_COLLIST VARCHAR2(3000);
  BEGIN
    SELECT DBTABLENAME INTO V_TABLE FROM DICT_T_MODEL WHERE TABLEID = P_MODELID;
    V_WHERE := P_COLLIST;
  
    V_MODEL := Q'{CREATE OR REPLACE TRIGGER CHK_@TABLE_NAME@_TR
AFTER DELETE OR UPDATE OR INSERT FOR @TABLE_NAME@
FOR EACH ROW
DECLARE
  V_OBJ VARCHAR2(30);
  V_TAB VARCHAR2(30);
  V_OLDDATA VARCHAR2(1000) :='|';
  V_NEWDATA VARCHAR2(1000) :='|';
BEGIN
  IF DELETING THEN
    @OLDDATA@
    --V_OLDDATA := SUBSTR(V_OLDDATA,2);
    FOR C_CHK IN (SELECT CHECKID FROM BGT_T_BUSINESSCHECKDEF WHERE CHECKID IN (
                  SELECT CHECKID FROM BGT_T_CHECKDEF WHERE LMODELID IN(
                  SELECT TABLEID FROM DICT_T_MODEL WHERE DBTABLENAME IN(
                  SELECT VIEWNAME FROM EFM_T_VIEWTAB WHERE TABNAME = @TABLE_NAME@))
                  UNION
                  SELECT CHECKID FROM BGT_T_CHECKDEF WHERE RMODELID IN(
                  SELECT TABLEID FROM DICT_T_MODEL WHERE DBTABLENAME IN(
                  SELECT VIEWNAME FROM EFM_T_VIEWTAB WHERE TABNAME = @TABLE_NAME@))
                  ) AND  ISUSE = '1' AND ISADDCHECK = '1') LOOP
    DELETE FROM EFM_T_CHECKSTATUS WHERE CHECKID = C_CHK.CHECKID AND ADDCOL = V_OLDDATA;
    END LOOP;
  END IF;
  IF INSERTING THEN
    @OLDDATA@
    --V_OLDDATA := SUBSTR(V_OLDDATA,2);
    FOR C_CHK IN (SELECT CHECKID FROM BGT_T_BUSINESSCHECKDEF WHERE CHECKID IN (
                  SELECT CHECKID FROM BGT_T_CHECKDEF WHERE LMODELID IN(
                  SELECT TABLEID FROM DICT_T_MODEL WHERE DBTABLENAME IN(
                  SELECT VIEWNAME FROM EFM_T_VIEWTAB WHERE TABNAME = @TABLE_NAME@))
                  UNION
                  SELECT CHECKID FROM BGT_T_CHECKDEF WHERE RMODELID IN(
                  SELECT TABLEID FROM DICT_T_MODEL WHERE DBTABLENAME IN(
                  SELECT VIEWNAME FROM EFM_T_VIEWTAB WHERE TABNAME = @TABLE_NAME@))
                  ) AND  ISUSE = '1' AND ISADDCHECK = '1') LOOP
      UPDATE EFM_T_CHECKSTATUS SET UNIQUEID = NVL(CONTROLID,0) + 1 WHERE CHECKID = C_CHK.CHECKID AND ADDCOL = V_OLDDATA AND NVL(UNIQUEID,0) = NVL(CONTROLID,0);
    END LOOP;
  END IF;
  IF UPDATING THEN
    @OLDDATA@
    --V_OLDDATA := SUBSTR(V_OLDDATA,2);
    
    @NEWDATA@
    --V_NEWDATA := SUBSTR(V_NEWDATA,2);
    IF @UPDATELIST@ THEN
      FOR C_CHK IN (SELECT CHECKID FROM BGT_T_BUSINESSCHECKDEF WHERE CHECKID IN (
                  SELECT CHECKID FROM BGT_T_CHECKDEF WHERE LMODELID IN(
                  SELECT TABLEID FROM DICT_T_MODEL WHERE DBTABLENAME IN(
                  SELECT VIEWNAME FROM EFM_T_VIEWTAB WHERE TABNAME = @TABLE_NAME@))
                  UNION
                  SELECT CHECKID FROM BGT_T_CHECKDEF WHERE RMODELID IN(
                  SELECT TABLEID FROM DICT_T_MODEL WHERE DBTABLENAME IN(
                  SELECT VIEWNAME FROM EFM_T_VIEWTAB WHERE TABNAME = @TABLE_NAME@))
                  ) AND  ISUSE = '1' AND ISADDCHECK = '1') LOOP
        DELETE FROM EFM_T_CHECKSTATUS WHERE CHECKID = C_CHK.CHECKID AND ADDCOL = V_OLDDATA;
      END LOOP;
    ELSE
      FOR C_CHK IN (SELECT CHECKID FROM BGT_T_BUSINESSCHECKDEF WHERE CHECKID IN (
                  SELECT CHECKID FROM BGT_T_CHECKDEF WHERE LMODELID IN(
                  SELECT TABLEID FROM DICT_T_MODEL WHERE DBTABLENAME IN(
                  SELECT VIEWNAME FROM EFM_T_VIEWTAB WHERE TABNAME = @TABLE_NAME@))
                  UNION
                  SELECT CHECKID FROM BGT_T_CHECKDEF WHERE RMODELID IN(
                  SELECT TABLEID FROM DICT_T_MODEL WHERE DBTABLENAME IN(
                  SELECT VIEWNAME FROM EFM_T_VIEWTAB WHERE TABNAME = @TABLE_NAME@))
                  ) AND  ISUSE = '1' AND ISADDCHECK = '1') LOOP
        UPDATE EFM_T_CHECKSTATUS SET UNIQUEID = NVL(CONTROLID,0) + 1 WHERE CHECKID = C_CHK.CHECKID AND ADDCOL = V_OLDDATA AND NVL(UNIQUEID,0) = NVL(CONTROLID,0);
      END LOOP;
    END IF;
  END IF;
  RETURN;
END CHK_@TABLE_NAME@_TR;}';

    FOR C_TAB IN (SELECT VIEWNAME,TABNAME FROM EFM_T_VIEWTAB WHERE VIEWNAME = V_TABLE) LOOP
      SELECT TABLEID INTO V_TABLEID FROM DICT_T_MODEL WHERE DBTABLENAME = C_TAB.TABNAME;
      V_SQL := 'SELECT COUNT(*) FROM DICT_T_FACTOR X,FASP_T_DICDE Y WHERE  X.DEID = Y.GUID AND X.TABLEID = :V_TABLEID AND Y.ELEMENTCODE IN ('||V_WHERE||')';
      EXECUTE IMMEDIATE V_SQL INTO V_CNT USING V_TABLEID;
      IF V_CNT < V_I THEN
        CONTINUE;
      END IF;
      V_SQL := 'SELECT COUNT(*) CNT FROM USER_TABLES 
      WHERE TABLE_NAME = '''||C_TAB.TABNAME||''' 
      AND COLUMN_NAME IN(SELECT X.DBCOLUMNNAME FROM DICT_T_FACTOR X,F+ASP_T_DICDE Y WHERE  X.DEID = Y.GUID AND X.TABLEID = :V_TABLEID AND Y.ELEMENTCODE IN ('||V_WHERE||'))';
      
      EXECUTE IMMEDIATE V_SQL INTO V_CNT USING V_TABLEID;
      IF V_CNT < V_I THEN
        CONTINUE;
      END IF;
      V_SQL := 'SELECT COLUMN_NAME FROM USER_TABLES 
      WHERE TABLE_NAME = '''||C_TAB.TABNAME||''' 
      AND COLUMN_NAME IN(SELECT X.DBCOLUMNNAME FROM DICT_T_FACTOR X,FASP_T_DICDE Y WHERE  X.DEID = Y.GUID AND X.TABLEID = :V_TABLEID AND Y.ELEMENTCODE IN ('||V_WHERE||'))';
      
      V_OLD := '';
      V_NEW := '';
      V_COLLIST := '';
      OPEN V_CURSOR FOR V_SQL USING V_TABLEID;
      LOOP
        FETCH V_CURSOR INTO V_ADDCOL;
        EXIT WHEN V_CURSOR%NOTFOUND;
        V_OLD := V_OLD||'V_OLDDATA := V_OLDDATA||:OLD.'||V_ADDCOL||'||''|'';
        ';
        V_NEW := V_NEW||'V_NEWDATA := V_NEWDATA||:NEW.'||V_ADDCOL||'||''|'';
        ';
        V_COLLIST := V_COLLIST||'UPDATING('''||V_ADDCOL||''') OR ';
      END LOOP;
      CLOSE V_CURSOR;
      V_COLLIST := SUBSTR(V_COLLIST,1,LENGTH(V_COLLIST) - 3);
      V_SQL := REPLACE(V_MODEL,'@TABLE_NAME@',C_TAB.TABNAME);
      V_SQL := REPLACE(V_SQL,'@UPDATELIST@',V_COLLIST);
      V_SQL := REPLACE(V_SQL,'@OLDDATA@',V_OLD);
      V_SQL := REPLACE(V_SQL,'@NEWDATA@',V_NEW);
      
      EXECUTE IMMEDIATE V_SQL;
    END LOOP;
    RETURN;
  END CREATE_TRIGGER;
  
  PROCEDURE P_CREATE_TRIGGER(P_GUID VARCHAR2) IS
    V_CHECKID VARCHAR2(32);
    V_TMP VARCHAR2(32000);
    V_CNT NUMBER;
    V_LMODELID VARCHAR2(32);
    V_CHECKTYPE CHAR(1);
    V_RMODELID VARCHAR2(32);
    V_BUSINESSTYPE VARCHAR2(32);
    V_ADDCOL VARCHAR2(200);
    V_POS NUMBER;
    V_I NUMBER := 0;
    V_WHERE VARCHAR2(10000);
  BEGIN
    SELECT COUNT(*) INTO V_CNT FROM BGT_T_BUSINESSCHECKDEF WHERE GUID = P_GUID AND ISUSE = '1' AND ISADDCHECK = '1';
    IF V_CNT < 1 THEN 
      RETURN;
    END IF;
    
    SELECT BUSINESSTYPE,CHECKID INTO V_BUSINESSTYPE,V_CHECKID FROM BGT_T_BUSINESSCHECKDEF  WHERE GUID = P_GUID AND ISUSE = '1' AND ISADDCHECK = '1';
    SELECT UPPER(TRIM(ADDCOL)) INTO V_ADDCOL  FROM EFM_T_CHECKADDCOL WHERE BUSINESSTYPE = V_BUSINESSTYPE;
    
    V_WHERE := ' ';
    LOOP
      V_POS := NVL(INSTR(V_ADDCOL,','),0);
      EXIT WHEN V_POS < 2;
      V_TMP := TRIM(SUBSTR(V_ADDCOL,1,V_POS - 1));
      IF V_TMP IS NULL THEN
        EXIT;
      END IF;
      V_I := V_I + 1;
      V_WHERE := V_WHERE||''''||V_TMP||''',';
      V_ADDCOL := TRIM(SUBSTR(V_ADDCOL,V_POS + 1));
    END LOOP;
    V_WHERE := V_WHERE||'''@@@''';
    --V_WHERE := SUBSTR(V_WHERE,1,LENGTH(V_WHERE) - 1);
    
    SELECT LMODELID,RMODELID,CHECKTYPE   INTO V_LMODELID,V_RMODELID,V_CHECKTYPE  FROM BGT_T_CHECKDEF WHERE CHECKID = V_CHECKID;
    
    CREATE_TRIGGER(V_LMODELID,V_WHERE);
    IF V_CHECKTYPE = '0' THEN
      V_RMODELID := '';
      RETURN;
    END IF;
    CREATE_TRIGGER(V_RMODELID,V_WHERE);
    RETURN;
  END P_CREATE_TRIGGER;
  
  PROCEDURE P_START_CHECK(P_CHECKID VARCHAR2,P_PARM VARCHAR2,P_DELTA_DATA VARCHAR2 DEFAULT '0',P_RESULT OUT CLOB) IS
    PRAGMA AUTONOMOUS_TRANSACTION;  
    V_SQL VARCHAR2(32000);
    V_TMP VARCHAR2(32000);
    V_DEST_T DBMS_SQL.DESC_TAB;
    V_CLOB CLOB;
    V_THECURSOR INTEGER;
    V_COLCNT    NUMBER;
    V_MSG VARCHAR2(4000);
    V_PARM VARCHAR2(4000);
    V_DISTRICTID VARCHAR2(32);
    V_AGENCYID VARCHAR2(32);
    V_CHECKID VARCHAR2(32);
    V_CHECKDATA VARCHAR2(30000);
    V_LMODELID VARCHAR2(32);
    V_RMODELID VARCHAR2(32);
    V_START NUMBER;
    V_END NUMBER;
    V_GUID VARCHAR2(32);
    V_COL VARCHAR2(30);
  BEGIN
    V_CHECKID := P_CHECKID;
    SELECT CHECKSQL,SHOWTEXT,LMODELID,RMODELID INTO V_CLOB,V_MSG,V_LMODELID,V_RMODELID FROM BGT_T_CHECKDEF WHERE CHECKID = V_CHECKID;
    V_TMP := DBMS_LOB.SUBSTR(V_CLOB,32000);
    --先替换左表条件
    V_START := NVL(INSTR(UPPER(P_PARM),'@WHERE@='),0);
    IF V_START > 0 THEN
      V_PARM := SUBSTR(P_PARM,V_START + 8);
    END IF;
    IF V_PARM IS NULL THEN
      V_PARM := ' ';
    END IF;
    V_END := 0;
    LOOP
      V_START := NVL(INSTR(V_PARM,'@',V_END + 1),0);
      EXIT WHEN V_START < 1;
      V_END := NVL(INSTR(V_PARM,'@',V_START + 1),0);
      IF V_END > V_START THEN
        V_GUID := SUBSTR(V_PARM,V_START + 1,V_END - V_START - 1);
        IF V_LMODELID IS NOT NULL THEN
          V_SQL := 'SELECT Y.DBCOLUMNNAME FROM FASP_T_DICDE X,DICT_T_FACTOR Y WHERE X.GUID = Y.DEID AND X.GUID= :1 AND Y.TABLEID = :2';
          EXECUTE IMMEDIATE V_SQL INTO V_COL USING V_GUID,V_LMODELID;
          V_PARM := REPLACE(V_PARM,'@'||V_GUID||'@',V_COL);
        ELSE
          EXIT;
        END IF;
      ELSE
        EXIT;
      END IF;
    END LOOP;
    V_START := INSTR(UPPER(V_TMP),'@WHERE@',1,1);
    IF V_START > 0 THEN
      V_TMP := SUBSTR(V_TMP,1,V_START - 1)||V_PARM||SUBSTR(V_TMP,V_START + 7);
    END IF;
    
    --再替换右表条件
    IF V_RMODELID IS NOT NULL THEN
      V_START := NVL(INSTR(UPPER(P_PARM),'@WHERE@='),0);
      IF V_START > 0 THEN
        V_PARM := SUBSTR(P_PARM,V_START + 8);
      END IF;
      IF V_PARM IS NULL THEN
        V_PARM := ' ';
      END IF;
      V_END := 0;
      LOOP
        V_START := NVL(INSTR(V_PARM,'@',V_END + 1),0);
        EXIT WHEN V_START < 1;
        V_END := NVL(INSTR(V_PARM,'@',V_START + 1),0);
        IF V_END > V_START THEN
          V_GUID := SUBSTR(V_PARM,V_START + 1,V_END - V_START - 1);
          V_SQL := 'SELECT Y.DBCOLUMNNAME FROM FASP_T_DICDE X,DICT_T_FACTOR Y WHERE X.GUID = Y.DEID AND X.GUID= :1 AND Y.TABLEID = :2';
          EXECUTE IMMEDIATE V_SQL INTO V_COL USING V_GUID,V_RMODELID;
          V_PARM := REPLACE(V_PARM,'@'||V_GUID||'@',V_COL);
        ELSE
          EXIT;
        END IF;
      END LOOP;
      V_START := NVL(INSTR(UPPER(V_TMP),'@WHERE@',1,1),0);
      IF V_START > 0 THEN
        V_TMP := SUBSTR(V_TMP,1,V_START - 1)||V_PARM||SUBSTR(V_TMP,V_START + 7);
      END IF;
    END IF;
    
    V_START := NVL(INSTR(UPPER(P_PARM),'@AGENCYID@='),0);
    IF V_START > 0 THEN
      V_PARM := TRIM(SUBSTR(P_PARM,V_START + 11));
      V_END := NVL(INSTR(V_PARM,','),0);
      IF V_END > 0 THEN
        V_AGENCYID := SUBSTR(V_PARM,1,V_END - 1);
      ELSE
        V_AGENCYID := V_PARM;
      END IF;
    ELSE
      V_AGENCYID := '';
    END IF;
    
    V_TMP := REPLACE(V_TMP,'@USERID@',GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('USER'));
    EXECUTE IMMEDIATE 'SELECT DISTRICTID FROM CODE_T_AGENCY WHERE GUID = :V_AGENCYID' INTO V_DISTRICTID USING V_AGENCYID;
    V_TMP := REPLACE(V_TMP,'@AGENCYID@',V_AGENCYID);
    V_TMP := REPLACE(V_TMP,'@DISTRICTID@',V_DISTRICTID);
    V_TMP := REPLACE(V_TMP,'@FINYEAR@',GLOBAL_MULTYEAR_CZ.SECU_F_GLOBAL_PARM('YEAR'));
    --dbms_output.put_line(v_tmp);
    V_THECURSOR := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(V_THECURSOR, V_TMP, DBMS_SQL.NATIVE);
    DBMS_SQL.DESCRIBE_COLUMNS(V_THECURSOR, V_COLCNT, V_DEST_T);
    DBMS_SQL.CLOSE_CURSOR(V_THECURSOR);
    --CDATA1,CDATA2,DBNAME为固定的保留列，剩下的都是分组列和分组列描述信息
    V_COLCNT := (V_COLCNT - 3)/2;
    V_CHECKDATA := '''"checkData":[';
    FOR I IN 1..V_COLCNT LOOP
      IF I =V_COLCNT THEN
        V_CHECKDATA := V_CHECKDATA||'{''||C_DATA.COL'||TRIM(TO_CHAR(I))||'DESC||''}';
      ELSE
        V_CHECKDATA := V_CHECKDATA||'{''||C_DATA.COL'||TRIM(TO_CHAR(I))||'DESC||''},';
       END IF;
    END LOOP;
    V_CHECKDATA := V_CHECKDATA||'],''||CHR(13)||CHR(10)||';
    V_SQL := 'DECLARE
  V_CLOB CLOB;
  V_CHECKID VARCHAR2(32);
  V_MSG VARCHAR2(4000);
  V_TMP VARCHAR2(32767);
  V_AMOUNT NUMBER;
  V_LEN NUMBER;
BEGIN
  V_CHECKID := :P_CHECKID;
  V_MSG := :P_MSG;
  DBMS_LOB.CREATETEMPORARY(V_CLOB,FALSE,DBMS_LOB.CALL);
  DBMS_LOB.WRITEAPPEND(V_CLOB,1,''['');
  FOR C_DATA IN ('||V_TMP||') LOOP
    V_TMP := ''{"checkID":"''||V_CHECKID||''",''||CHR(13)||CHR(10)||
    '||V_CHECKDATA||
    '''"leftValue":"''||TO_CHAR(C_DATA.CDATA1)||''",''||CHR(13)||CHR(10)||
    ''"rightValue":"''||TO_CHAR(C_DATA.CDATA2)||''",''||CHR(13)||CHR(10)||
    ''"deviationValue":"''||TO_CHAR(C_DATA.CDATA1-C_DATA.CDATA2)||''",''||CHR(13)||CHR(10)||
    ''"errorMessage":"''||V_MSG||''",''||CHR(13)||CHR(10)||
    ''"DBNAME":"''||C_DATA.DBNAME||''"},''||CHR(13)||CHR(10);
    DBMS_LOB.WRITEAPPEND(V_CLOB,LENGTH(V_TMP),V_TMP);
  END LOOP;
  V_AMOUNT := 3;
  V_LEN := DBMS_LOB.GETLENGTH(V_CLOB);
  IF V_LEN < 4 THEN
    V_CLOB := EMPTY_CLOB();
  ELSE
    DBMS_LOB.ERASE(V_CLOB,V_AMOUNT,DBMS_LOB.GETLENGTH(V_CLOB)-2);
    DBMS_LOB.WRITEAPPEND(V_CLOB,3,CHR(13)||CHR(10)||'']'');
  END IF;
  :V_RET := V_CLOB;
END;';
--dbms_output.put_line(v_sql);
--RETURN;
    EXECUTE IMMEDIATE V_SQL USING V_CHECKID,V_MSG,OUT P_RESULT;
    --RETURN;
    IF P_RESULT IS NULL THEN
      P_RESULT := EMPTY_CLOB();
    END IF;
    
    IF NVL(P_DELTA_DATA,'0') = '1' THEN
      IF DBMS_LOB.GETLENGTH(P_RESULT) > 10 THEN
          V_SQL := 'INSERT INTO EFM_T_CHECKRESULT(GUID,CHECKID,ADDCOL,CHECKRESULT,STATUS) VALUES(RAWTOHEX(SYS_GUID()),:1,:2,:3,''1'')';
          BEGIN
            EXECUTE IMMEDIATE V_SQL USING V_CHECKID,P_DELTA_DATA,P_RESULT;
          EXCEPTION WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
          END;
          COMMIT;
      END IF;
    END IF;
    COMMIT;
    RETURN;
  END P_START_CHECK;
  
  PROCEDURE P_DROP_VOID_TRIGGER AS
    V_CNT NUMBER;
    BEGIN
      FOR C_TRG IN (SELECT TRIGGER_NAME,TABLE_NAME FROM USER_TRIGGERS WHERE TRIGGER_NAME LIKE 'CHK_%_TR' AND BASE_OBJECT_TYPE = 'TABLE') LOOP
        EXECUTE IMMEDIATE 'SELECT COUNT(*)  FROM BGT_T_BUSINESSCHECKDEF WHERE CHECKID IN (
                  SELECT CHECKID FROM BGT_T_CHECKDEF WHERE LMODELID IN(
                  SELECT TABLEID FROM DICT_T_MODEL WHERE DBTABLENAME IN(
                  SELECT VIEWNAME FROM EFM_T_VIEWTAB WHERE TABNAME = '''||C_TRG.TABLE_NAME||'''))
                  UNION ALL
                  SELECT CHECKID FROM BGT_T_CHECKDEF WHERE RMODELID IN(
                  SELECT TABLEID FROM DICT_T_MODEL WHERE DBTABLENAME IN(
                  SELECT VIEWNAME FROM EFM_T_VIEWTAB WHERE TABNAME = '''||C_TRG.TABLE_NAME||'''))
                  ) AND  ISUSE = ''1'' AND ISADDCHECK = ''1''' INTO V_CNT;
         IF V_CNT < 1 THEN
           EXECUTE IMMEDIATE 'DROP TRIGGER '||C_TRG.TRIGGER_NAME;
         END IF;
      END LOOP;
      RETURN;
    END P_DROP_VOID_TRIGGER;

BEGIN
  -- INITIALIZATION
  RETURN;
END PKG_CHECK;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>PK_BGT_SECU</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE package BODY PK_BGT_SECU as
  --中央数据权限包
  function f_Get_UserToRole(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2) return varchar2 is
    v_result type_bgt_securole;
    v_count  int;
    v_ret    varchar2(4000);
  begin
    v_result:=f_Get_UserToRole_Array(v_appid,v_manid,v_usertype,v_agencycode);
    --v_result转化为字符串
    v_ret:='';
    if v_result.Count > 0 then
      FOR v_count IN v_result.FIRST .. v_result.LAST
       LOOP
         v_ret:=v_ret||','||v_result(v_count);
       END LOOP;
       return p_RoleChange_Flag||v_ret;
    else
      return '';
    end if;
  end f_Get_UserToRole;
  --
  function f_Get_UserToRole_Array(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2) return type_bgt_securole is
    v_timeStamp varchar2(100);
    v_result type_bgt_securole;
  begin
      --设置用户对应角色变化标志位
      p_RoleChange_Flag:=0;
      --每个用户分配唯一缓存标识
      p_CacheCode:=f_Get_CacheCode(v_appid,v_manid,v_usertype,v_agencycode);
      v_timeStamp:=f_get_UserRole_Time(v_appid,v_manid,v_usertype,v_agencycode);
    --中央与地方采用不同的处理方式
    if GLOBAL_IsMultDb.v_ISZY='0' then
      v_result:=f_Get_UserToRole_0_CZ(v_appid,v_manid,v_usertype,v_agencycode);
    else
      v_result:=f_Get_UserToRole_1_CZ(v_appid,v_manid,v_usertype,v_agencycode);
    end if;
    return v_result;
  end f_Get_UserToRole_Array;
  --
  function f_Set_ArrayNull return varchar2 is
  begin
    print_output(to_char(p_secu_UserRole.Count));
    print_output(to_char(p_secu_Tabs.Count));
    print_output(to_char(p_secu_Cols.Count));
    print_output(to_char(p_secu_Rows.Count));
    p_secu_UserRole.delete;
    p_secu_Tabs.delete;
    p_secu_Cols.delete;
    p_secu_Rows.delete;
    print_output(to_char(p_secu_UserRole.Count));
    print_output(to_char(p_secu_Tabs.Count));
    print_output(to_char(p_secu_Cols.Count));
    print_output(to_char(p_secu_Rows.Count));
    return '';
  end f_Set_ArrayNull;
  --
  function f_Get_CacheCode(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2 ) return varchar2 is
    v_tmp_CacheCode varchar2(200);
  begin
    v_tmp_CacheCode:=Global_MultYear_CZ.Secu_f_GLOBAL_PARM('DIVID')||Global_MultYear_CZ.Secu_f_GLOBAL_PARM('YEAR');
    --对系统进行分类
    if v_appid not in ('Other') then
      v_tmp_CacheCode:=v_tmp_CacheCode||v_appid;
    else
      v_tmp_CacheCode:=v_tmp_CacheCode||'*';
    end if;
    --分单位用户和财政用户
    if v_usertype ='0' then
      v_tmp_CacheCode:=v_tmp_CacheCode||v_manid;
    else
      v_tmp_CacheCode:=v_tmp_CacheCode||v_manid;
    end if;
    return v_tmp_CacheCode;
  end f_Get_CacheCode;

  function f_get_UserRole_Time(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2) return varchar2 is
    v_dbversion timestamp;
    v_count int;
    v_i     int;
    v_tmp_CacheCode varchar2(200);
  begin
    if GLOBAL_IsMultDb.v_ISZY='0' then
      v_tmp_CacheCode:=p_CacheCode;
    else
      v_tmp_CacheCode:=p_CacheCode||substr(v_agencycode,1,3);
    end if;
    if p_secu_userRole.exists(v_tmp_CacheCode) then 
       v_count:=p_secu_userRole(v_tmp_CacheCode).userRoleArray.count;
    end if;
    --得到Secu_cache_userRole和Secu_cache_Agency表的timeStamp;
    select max(dbversion),count(*) into p_c_userrole,v_i from Secu_cache_userRole where userid=v_manid ;
    if v_i<v_count or v_i=0 then
      p_c_userrole:=sysdate;
    end if;
    if GLOBAL_IsMultDb.v_ISZY='1' then
      select max(dbversion),count(*) into p_c_userAgency,v_i from Secu_t_Agency where manid in (select roleid from secu_t_userrole where userid=v_manid) ;
      if v_i<v_count or v_i=0 then
         p_c_userAgency:=sysdate;
      end if;
      return TO_CHAR(p_c_userrole,'YYYY-MM-DD-HH24:MI:SSxFF')||','||TO_CHAR(p_c_userAgency,'YYYY-MM-DD-HH24:MI:SSxFF');
    else
      return TO_CHAR(p_c_userrole,'YYYY-MM-DD-HH24:MI:SSxFF')||','||'';
    end if;

  end f_get_UserRole_Time;

  function f_Get_UserToRole_0_CZ(v_appid varchar2,v_manid varchar2,user_type varchar2,v_agencycode varchar2) return type_bgt_securole is
    v_userRole p_t_time_userRole;
    v_tmp_CacheCode varchar2(200);
  begin
    v_tmp_CacheCode:=p_CacheCode;
    --
    if p_secu_userRole.exists(v_tmp_CacheCode) then
      if p_secu_userRole(v_tmp_CacheCode).userrole_time < p_c_userrole then
        p_secu_userRole.delete(v_tmp_CacheCode);
        p_RoleChange_Flag:=1;
      else
        print_output('userrole缓存');
        p_RoleChange_Flag:=0;
        return p_secu_userRole(v_tmp_CacheCode).userRoleArray;
        end if;
    end if;
    print_output('userrole非缓存');
    p_RoleChange_Flag:=1;
    --置空
    p_secu_userRole(v_tmp_CacheCode):=v_userRole;
    --设置最新时间
    p_secu_userRole(v_tmp_CacheCode).userrole_time:=p_c_userrole;
    --获得用户对应角色
    select RoleID bulk collect into p_secu_userRole(v_tmp_CacheCode).userRoleArray from secu_t_userrole where userid=v_manid;
    return p_secu_userRole(v_tmp_CacheCode).userRoleArray;
  end;

  function f_Get_UserToRole_1_CZ(v_appid varchar2,v_manid varchar2,user_type varchar2,v_agencycode varchar2) return type_bgt_securole is
    v_userRole p_t_time_userRole;
    v_tmp_CacheCode varchar2(200);
  begin
    --中央复杂权限，需要增加单位（部门）部分，实现不同部门权限不同
    v_tmp_CacheCode:=p_CacheCode||substr(v_agencycode,1,3);
    --是否缓存判断
    if p_secu_userRole.exists(v_tmp_CacheCode) then
      --判断时间戳是否一致
      if p_secu_userRole(v_tmp_CacheCode).userrole_time < p_c_userrole or p_secu_userRole(v_tmp_CacheCode).userAgency_time < p_c_userAgency then
        p_secu_userRole.delete(v_tmp_CacheCode);
        p_RoleChange_Flag:=1;
      else
        p_RoleChange_Flag:=0;
        return p_secu_userRole(v_tmp_CacheCode).userRoleArray;
      end if;
    end if;
    --重新获取
    p_RoleChange_Flag:=1;
    p_secu_userRole(v_tmp_CacheCode):=v_userRole;
    p_secu_userRole(v_tmp_CacheCode).userrole_time:=p_c_userrole;
    p_secu_userRole(v_tmp_CacheCode).userAgency_time:=p_c_userAgency;
    --得到中央的用户对应角色
    select RoleID bulk collect
      into p_secu_userRole(v_tmp_CacheCode).userRoleArray
      from secu_t_userrole
     where userid = v_manid
       and roleid in (select roleid
                        from secu_t_agency ds, secu_t_userRole ur
                       where ur.userid = v_manid
                         and ur.roleid = ds.manid
                         and ds.mantype = '1'
                         and v_agencycode like agencyid || '%');
    return p_secu_userRole(v_tmp_CacheCode).userRoleArray;
  end;
  -------------------表权限
  function f_Secu_Tab(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2) return varchar2 is
    v_tmp    varchar2(100);
    v_result type_bgt_securole;
  begin
    --得到当前用户对应的角色
    p_user_Roles:=f_Get_UserToRole_Array(v_appid,v_manid,v_usertype,v_agencycode);
    --获取时间
    v_tmp:=f_get_Table_Time(v_appid,v_manid,v_usertype,v_agencycode);
    if GLOBAL_IsMultDb.v_ISZY='0' then
       v_result:=f_Get_UserToTab_0(v_appid,v_manid,v_usertype,v_agencycode);
    else
       v_result:=f_Get_UserToTab_1(v_appid,v_manid,v_usertype,v_agencycode);
    end if;        
    --获得当前表的权限
    select nvl(max(baseSecu),'1111') into v_tmp
      from (select Substr(COLUMN_VALUE,1,length(COLUMN_VALUE)-4) as tableid,substr(COLUMN_VALUE,-4) baseSecu from table(v_result)) kkk
     where kkk.tableid=v_tableid;
    --格式为:TableID+BaseSecu+ExtAddd+ExtDel+ExtUpdate
    return v_tmp;
  end f_Secu_Tab;

  --选择单位后，显示可以选择的表
  function f_Secu_Return_Tabs(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2) return type_bgt_tab_secutab pipelined as
    v_tmp    varchar2(100);
    v_result type_bgt_securole;
    v_rec_Secutab type_bgt_rec_tab;
    v_i      int;
  begin
    --得到当前用户对应的角色
    p_user_Roles:=f_Get_UserToRole_Array(v_appid,v_manid,v_usertype,v_agencycode);
    --
    v_tmp:=f_get_Table_Time(v_appid,v_manid,v_usertype,v_agencycode);
    if GLOBAL_IsMultDb.v_ISZY='0' then
       v_result:=f_Get_UserToTab_0(v_appid,v_manid,v_usertype,v_agencycode);
    else
       v_result:=f_Get_UserToTab_1(v_appid,v_manid,v_usertype,v_agencycode);
    end if;
    --返回结果集
    if v_result.Count > 0 then
      FOR v_i IN v_result.FIRST .. v_result.LAST
       LOOP
         v_rec_Secutab:=type_bgt_rec_tab(substr(v_result(v_i),1,length(v_result(v_i))-4),substr(v_result(v_i),-4,1),substr(v_result(v_i),-3,1),substr(v_result(v_i),-2,1),substr(v_result(v_i),-1,1)) ;
         pipe row (v_rec_Secutab);
       END LOOP;
    end if;
  end f_Secu_Return_Tabs;
  ------
  function f_get_Table_Time(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2) return varchar2 is
    v_dbversion timestamp;
    v_count int;
    v_i     int;
    v_tmp_CacheCode varchar2(200);
  begin
    if GLOBAL_IsMultDb.v_ISZY='0' then
      v_tmp_CacheCode:=p_CacheCode;
    else
      v_tmp_CacheCode:=p_CacheCode||substr(v_agencycode,1,3);
    end if;
    if p_secu_Tabs.exists(v_tmp_CacheCode) then
       v_count:=p_secu_Tabs(v_tmp_CacheCode).TabArray.count;
    end if;
    if GLOBAL_IsMultDb.v_ISZY='0' then
       --得到权限表的timeStamp;
       select max(dbversion),count(*) into p_c_tab,v_i from Secu_t_Table where manid in (select COLUMN_VALUE from table(p_user_Roles));
    else
       select max(dbversion),count(*) into p_c_tab,v_i from Secu_t_Table where manid in (select COLUMN_VALUE from table(p_user_Roles)) and exists(select 1 from secu_t_agency where secu_t_agency.manid=Secu_t_Table.manid and agencyid=substr(v_agencycode,1,3));      
    end if;
    if v_i<v_count or v_i=0 then
      p_c_tab:=sysdate;
    end if;
    return TO_CHAR(p_c_tab,'YYYY-MM-DD-HH24:MI:SSxFF');
  end f_get_Table_Time;

  function f_Get_UserToTab_0(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2 ) return type_bgt_securole is
    v_userTab p_t_time_userTab;
    v_tmp_CacheCode varchar2(200);
    v_UsertoRoles int;
  begin
    v_tmp_CacheCode:=p_CacheCode;
    --
    if p_secu_Tabs.exists(v_tmp_CacheCode) then
      if p_secu_Tabs(v_tmp_CacheCode).user_tab_time < p_c_tab or p_RoleChange_Flag=1 then
        p_secu_Tabs.delete(v_tmp_CacheCode);
      else
        print_output('tab缓存');
        return p_secu_Tabs(v_tmp_CacheCode).TabArray;
      end if;
    end if;
    print_output('tab非缓存');
    p_secu_Tabs(v_tmp_CacheCode):=v_userTab;
    p_secu_Tabs(v_tmp_CacheCode).user_tab_time:=p_c_tab;
    --获取表权限
    v_UsertoRoles:=p_user_Roles.Count;
    select tabid||case when count(tabid)>0 then max(baseSecu)||max(extadd)||max(extdel)||max(extupdate) else '1111' end bulk collect into p_secu_Tabs(v_tmp_CacheCode).TabArray
      from (select tab.manid,tab.basesecu,tab.extadd,tab.extdel,tab.ExtUpdate,tab.tableid tabid from Secu_t_Table tab where tab.ISSUIT='0' and tab.manid in (select COLUMN_VALUE from table(p_user_Roles))
            union all
            select tab.manid,tab.basesecu,tab.extadd,tab.extdel,tab.ExtUpdate,suit.tableid tabid from Secu_t_Table tab,secu_t_suittab suit where tab.tableid=suit.Suitid and tab.ISSUIT='1' and tab.manid in (select COLUMN_VALUE from table(p_user_Roles)))kkk group by tabid;
    --print_output(to_char(p_secu_Tabs(v_tmp_CacheCode).TabArray.count));
    return p_secu_Tabs(v_tmp_CacheCode).TabArray;
  end f_Get_UserToTab_0;

  function f_Get_UserToTab_1(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_agencycode varchar2 ) return type_bgt_securole is
    v_userTab p_t_time_userTab;
    v_tmp_CacheCode varchar2(200);
    v_UsertoRoles int;
  begin
    v_tmp_CacheCode:=p_CacheCode||substr(v_agencycode,1,3);
    if p_secu_Tabs.exists(v_tmp_CacheCode) then
      --判断时间戳是否一致
      if p_secu_Tabs(v_tmp_CacheCode).user_tab_time < p_c_tab or p_RoleChange_Flag=1 then
        p_secu_Tabs.delete(v_tmp_CacheCode);
      else
        return  p_secu_Tabs(v_tmp_CacheCode).TabArray;
      end if;
    end if;
    --重新获取
    p_secu_Tabs(v_tmp_CacheCode):=v_userTab;
    p_secu_Tabs(v_tmp_CacheCode).user_tab_time:=p_c_tab;
    --获取表权限
    v_UsertoRoles:=p_user_Roles.Count;
    --
    select tabid||case when count(tabid)>0 then max(baseSecu)||max(extadd)||max(extdel)||max(extupdate) else '1111' end bulk collect into p_secu_Tabs(v_tmp_CacheCode).TabArray
      from (select tab.manid,tab.basesecu,tab.extadd,tab.extdel,tab.ExtUpdate,tab.tableid tabid from Secu_t_Table tab where tab.ISSUIT='0' and tab.manid in (select COLUMN_VALUE from table(p_user_Roles)) and exists(select 1 from secu_t_agency where secu_t_agency.manid=tab.manid and agencyid=substr(v_agencycode,1,3))
            union all
            select tab.manid,tab.basesecu,tab.extadd,tab.extdel,tab.ExtUpdate,suit.tableid tabid 
            from Secu_t_Table tab,secu_t_suittab suit 
            where tab.tableid=suit.Suitid and tab.ISSUIT='1' and tab.manid 
            in (select COLUMN_VALUE from table(p_user_Roles)) 
            and exists(select 1 from secu_t_agency where secu_t_agency.manid=tab.manid 
            and agencyid=substr(v_agencycode,1,3)))kkk group by tabid;
    return p_secu_Tabs(v_tmp_CacheCode).TabArray;
  end f_Get_UserToTab_1;
  -------------------列权限
  function f_Secu_Col(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2) return type_bgt_tab_secutab pipelined is
    v_tmp    varchar2(100);
    v_result type_bgt_securole;
    v_rec_SecuCol type_bgt_rec_tab;
    v_i      int;
  begin
    --得到当前用户对应的角色
    p_user_Roles:=f_Get_UserToRole_Array(v_appid,v_manid,v_usertype,v_agencycode);
    --
    v_tmp:=f_get_Col_Time(v_appid,v_manid,v_usertype,v_tableid,v_agencycode);
    --分中央和地方两种情况
    if GLOBAL_IsMultDb.v_ISZY='0' then
      v_result:=f_Get_UserToCol_0(v_appid,v_manid,v_usertype,v_tableid,v_agencycode);
    else
      v_result:=f_Get_UserToCol_1(v_appid,v_manid,v_usertype,v_tableid,v_agencycode);
    end if;
    --获得当前表的列权限
    if v_result.Count >0 then
      FOR v_i IN v_result.FIRST .. v_result.LAST
       LOOP
         v_rec_SecuCol:=type_bgt_rec_tab(substr(v_result(v_i),1,length(v_result(v_i))-1),substr(v_result(v_i),-1),'','','') ;
        pipe row (v_rec_SecuCol);
       END LOOP;
    end if;
  end f_Secu_Col;
  ------
  function f_get_Col_Time(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2) return varchar2 is
    v_dbversion timestamp;
    v_count int;
    v_i     int;
    v_tmp_CacheCode varchar2(200);
  begin
    if GLOBAL_IsMultDb.v_ISZY='0' then
      v_tmp_CacheCode:=p_CacheCode||v_tableid;
    else
      v_tmp_CacheCode:=p_CacheCode||substr(v_agencycode,1,3)||v_tableid;
    end if;
    if p_secu_Cols.exists(v_tmp_CacheCode) then 
       v_count:=p_secu_Cols(v_tmp_CacheCode).ColArray.count;
    end if;
    if GLOBAL_IsMultDb.v_ISZY='0' then
       --得到表中列的timeStamp;
       select max(dbversion),count(*) into p_c_Col,v_i from (select manid,dbversion from secu_t_Col union all select manid,dbversion from secu_t_table) where manid in (select COLUMN_VALUE from table(p_user_Roles));
    else
       select max(dbversion),count(*) into p_c_Col,v_i from (select manid,dbversion from secu_t_Col union all select manid,dbversion from secu_t_table)secu_t_Col where manid in (select COLUMN_VALUE from table(p_user_Roles)) and exists(select 1 from secu_t_agency where secu_t_agency.manid=secu_t_Col.manid and agencyid=substr(v_agencycode,1,3));      
    end if;
    if v_i<v_count or v_i=0 then
      p_c_Col:=sysdate;
    end if;
    return TO_CHAR(p_c_Col,'YYYY-MM-DD-HH24:MI:SSxFF');
  end f_get_Col_Time;

  function f_Get_UserToCol_0(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2 ) return type_bgt_securole is
    v_userCol p_t_time_userCol;
    v_tmp_CacheCode varchar2(200);
    v_UsertoRoles   int;
  begin
    v_tmp_CacheCode:=p_CacheCode||v_tableid;
    --
    if p_secu_Cols.exists(v_tmp_CacheCode) then
      --判断时间戳是否一致
      if p_secu_Cols(v_tmp_CacheCode).user_Col_time < p_c_Col or p_RoleChange_Flag=1 then
        p_secu_Cols.delete(v_tmp_CacheCode);
      else
        print_output('col缓存');
        return p_secu_Cols(v_tmp_CacheCode).ColArray;
      end if;
    end if;
    print_output('col非缓存');
    p_secu_Cols(v_tmp_CacheCode):=v_userCol;
    p_secu_Cols(v_tmp_CacheCode).user_Col_time:=p_c_Col;
    --获取列权限    
    v_UsertoRoles:=p_user_Roles.Count;
    select colid||case when colsecu>to_TabSecu then ColSecu else to_TabSecu end 
     bulk collect into p_secu_Cols(v_tmp_CacheCode).ColArray
     from 
     (select colid,colsecu,(select nvl(max(baseSecu),'1') from secu_t_table where tableid=v_tableid and instr(ColManIDS,','||manid,1,1)<1 and manid in (select COLUMN_VALUE from table(p_user_Roles))) to_TabSecu      
      from 
       (select connstra(','||manid) ColManIDS,ColID,max(baseSecu) ColSecu
          from secu_t_Col where tableid=v_tableid 
               and baseSecu<(select baseSecu from secu_t_table where ((secu_t_table.TABLEID=v_tableid and secu_t_table.ISSUIT='0') or (secu_t_table.ISSUIT='1' and exists(select 1 from secu_t_suittab where suitid=secu_t_table.tableid and secu_t_suittab.tableid=v_tableid))) and secu_t_table.MANID=secu_t_Col.MANID)
               and manid in (select COLUMN_VALUE from table(p_user_Roles))
         group by ColID));
    return p_secu_Cols(v_tmp_CacheCode).ColArray;
  end f_Get_UserToCol_0;

  function f_Get_UserToCol_1(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2 ) return type_bgt_securole is
    v_userCol p_t_time_userCol;
    v_tmp_CacheCode varchar2(200);
    v_UsertoRoles   int;
  begin
    v_tmp_CacheCode:=p_CacheCode||substr(v_agencycode,1,3)||v_tableid;
    --
    if p_secu_Cols.exists(v_tmp_CacheCode) then
      --判断时间戳是否一致
      if p_secu_Cols(v_tmp_CacheCode).user_col_time < p_c_col or p_RoleChange_Flag=1 then
        p_secu_Cols.delete(v_tmp_CacheCode);
      else
        return  p_secu_Cols(v_tmp_CacheCode).ColArray;
      end if;
    end if;
    --
    p_secu_Cols(v_tmp_CacheCode):=v_userCol;
    p_secu_Cols(v_tmp_CacheCode).user_Col_time:=p_c_Col;
    --获取列权限
    v_UsertoRoles:=p_user_Roles.Count;
    select colid||case when colsecu>to_TabSecu then ColSecu else to_TabSecu end 
     bulk collect into p_secu_Cols(v_tmp_CacheCode).ColArray
     from 
     (select colid,colsecu,(select nvl(max(baseSecu),'1') from secu_t_table where tableid=v_tableid and instr(ColManIDS,','||manid,1,1)<1 and manid in (select COLUMN_VALUE from table(p_user_Roles)) and exists(select 1 from secu_t_agency where secu_t_agency.manid=secu_t_table.manid and agencyid=substr(v_agencycode,1,3))) to_TabSecu      
      from 
       (select connstra(','||manid) ColManIDS,ColID,max(baseSecu) ColSecu
          from secu_t_Col where tableid=v_tableid 
               and baseSecu<(select baseSecu from secu_t_table where ((secu_t_table.TABLEID=v_tableid and secu_t_table.ISSUIT='0') or (secu_t_table.ISSUIT='1' and exists(select 1 from secu_t_suittab where suitid=secu_t_table.tableid and secu_t_suittab.tableid=v_tableid))) and secu_t_table.MANID=secu_t_Col.MANID)
               and manid in (select COLUMN_VALUE from table(p_user_Roles))
               and exists(select 1 from secu_t_agency where secu_t_agency.manid=secu_t_Col.manid and agencyid=substr(v_agencycode,1,3))
         group by ColID));
    return p_secu_Cols(v_tmp_CacheCode).ColArray;
  end f_Get_UserToCol_1;

  -------------------行权限
  function f_Secu_Row(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2,v_flag varchar2 default '0') return varchar2 is
    v_tmp    varchar2(4000);
    v_result TYPE_BGT_ROW;
    v_i      int;
  begin
    --得到当前用户对应的角色
    p_user_Roles:=f_Get_UserToRole_Array(v_appid,v_manid,v_usertype,v_agencycode);
    --
    v_tmp:=f_get_Row_Time(v_appid,v_manid,v_usertype,v_tableid,v_agencycode);
    --v_usertype:0表示单位；1表示财政。
    if GLOBAL_IsMultDb.v_ISZY='0' then
      --地方
      v_result:=f_Get_UserToRow_0(v_appid,v_manid,v_usertype,v_tableid,v_agencycode);
    else
      --中央
      v_result:=f_Get_UserToRow_1(v_appid,v_manid,v_usertype,v_tableid,v_agencycode);
    end if;
    --获得当前表的行权限
    v_tmp:='';
    if v_result.Count >0 then
      FOR v_i IN v_result.FIRST .. v_result.LAST
       LOOP
        if v_flag='0' and substr(v_result(v_i),1,1)='1' then 
          v_tmp:=substr(v_result(v_i),2);
          return v_tmp;
        end if;
        if v_flag<>'0' and substr(v_result(v_i),1,1)='2' then 
          v_tmp:=substr(v_result(v_i),2);
          return v_tmp;
        end if;        
       END LOOP;
    else
      return '';
    end if;
    return '';
  end f_Secu_Row;
  ------
  function f_get_Row_Time(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2) return varchar2 is
    v_dbversion timestamp;
    v_count int;
    v_i     int;
    v_tmp_CacheCode varchar2(200);
  begin
    if GLOBAL_IsMultDb.v_ISZY='0' then
      v_tmp_CacheCode:=p_CacheCode||v_tableid;
    else
      v_tmp_CacheCode:=p_CacheCode||substr(v_agencycode,1,3)||v_tableid;
    end if;
    if p_secu_Rows.exists(v_tmp_CacheCode) then 
       v_count:=p_secu_Rows(v_tmp_CacheCode).RowArray.count;
    end if;
    if GLOBAL_IsMultDb.v_ISZY='0' then
       --得到表中行的timeStamp;
       select max(dbversion),count(*) into p_c_Row,v_i from (select manid,dbversion from Secu_t_Row union all select manid,dbversion from secu_t_table)Secu_t_Row where manid in (select COLUMN_VALUE from table(p_user_Roles));
    else
       select max(dbversion),count(*) into p_c_Row,v_i from (select manid,dbversion from Secu_t_Row union all select manid,dbversion from secu_t_table)Secu_t_Row where manid in (select COLUMN_VALUE from table(p_user_Roles)) and exists(select 1 from secu_t_agency where secu_t_agency.manid=Secu_t_Row.manid and agencyid=substr(v_agencycode,1,3));
    end if;
    if v_i<v_count or v_i=0 then
      p_c_Row:=sysdate;
    end if;
    return TO_CHAR(p_c_Row,'YYYY-MM-DD-HH24:MI:SSxFF');
  end f_get_Row_Time;
  --
  function f_Get_UserToRow_0(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2 ) return TYPE_BGT_ROW is
    v_userRow p_t_time_userRow;
    v_tmp_CacheCode varchar2(200);
    v_UsertoRoles   int;
    v_count         int;
  begin
    v_tmp_CacheCode:=p_CacheCode||v_tableid;
    --
    if p_secu_Rows.exists(v_tmp_CacheCode) then
      if p_secu_Rows.exists(v_tmp_CacheCode) then
        --判断时间戳是否一致
        if p_secu_Rows(v_tmp_CacheCode).user_Row_time < p_c_Row or p_RoleChange_Flag=1 then
          p_secu_Rows.delete(v_tmp_CacheCode);
        else
          print_output('row缓存');
          return p_secu_Rows(v_tmp_CacheCode).RowArray;
        end if;
      end if;
    end if;
    print_output('row非缓存');
    p_secu_Rows(v_tmp_CacheCode):=v_userRow;
    p_secu_Rows(v_tmp_CacheCode).user_Row_time:=p_c_Row;
    --得到表权限为1的数量
    v_count:=0;    
    select count(*) into v_count from table(p_user_Roles) where COLUMN_VALUE in (select manid from Secu_t_Table where manid in (select COLUMN_VALUE from table(p_user_Roles)) and ((tableid=v_tableid and issuit='0' and baseSecu<>'1') or (exists (select 1 from secu_t_suittab where suitid = secu_t_table.tableid and secu_t_suittab.tableid = v_tableid) and issuit='1' and baseSecu<>'1')));
    --获取行权限
    v_UsertoRoles:=v_count;
    --
    select BaseSecu || '('||substr(case when v_UsertoRoles = count(tableid) then connstra(' or ('||sqlwhere||')') else ' or (1=1)' end,4)||')' bulk collect
      into p_secu_Rows(v_tmp_CacheCode).RowArray
      from secu_t_row TRow
      where tableid = v_tableid
            and  baseSecu < (select baseSecu from secu_t_table where ((secu_t_table.TABLEID = v_tableid and issuit='0') or (exists (select 1 from secu_t_suittab where suitid = secu_t_table.tableid and secu_t_suittab.tableid = v_tableid) and issuit='1')) and secu_t_table.MANID = TRow.MANID)
            and TRow.manid in (select COLUMN_VALUE from table(p_user_Roles))
     group by tableid,baseSecu;
    return p_secu_Rows(v_tmp_CacheCode).RowArray;
  end f_Get_UserToRow_0;

  function f_Get_UserToRow_1(v_appid varchar2,v_manid varchar2,v_usertype varchar2,v_tableid varchar2,v_agencycode varchar2 ) return TYPE_BGT_ROW is
    v_userRow p_t_time_userRow;
    v_tmp_CacheCode varchar2(200);
    v_UsertoRoles   int;
    v_count         int;
  begin
    v_tmp_CacheCode:=p_CacheCode||substr(v_agencycode,1,3)||v_tableid;
    --
    if p_secu_Rows.exists(v_tmp_CacheCode) then
      --判断时间戳是否一致
      if p_secu_Rows(v_tmp_CacheCode).user_Row_time < p_c_Row or p_RoleChange_Flag=1 then
        p_secu_Rows.delete(v_tmp_CacheCode);
      else
        return  p_secu_Rows(v_tmp_CacheCode).RowArray;
      end if;
    end if;
    --
    p_secu_Rows(v_tmp_CacheCode):=v_userRow;
    p_secu_Rows(v_tmp_CacheCode).user_Row_time:=p_c_Row;
    --得到表权限为1的数量
    v_count:=0;
    select count(*) into v_count from table(p_user_Roles) where COLUMN_VALUE in (select manid from Secu_t_Table where manid in (select COLUMN_VALUE from table(p_user_Roles)) and ((tableid=v_tableid and issuit='0' and baseSecu<>'1') or (exists (select 1 from secu_t_suittab where suitid = secu_t_table.tableid and secu_t_suittab.tableid = v_tableid) and issuit='1' and baseSecu<>'1')));
    --获取行权限
    v_UsertoRoles:=v_count;
    --
    select BaseSecu || '('||substr(case when v_UsertoRoles = count(tableid) then connstra(' or ('||sqlwhere||')') else ' or (1=1)' end,4)||')' bulk collect
      into p_secu_Rows(v_tmp_CacheCode).RowArray
      from secu_t_row TRow
      where tableid = v_tableid
            and  baseSecu < (select baseSecu from secu_t_table where ((secu_t_table.TABLEID = v_tableid and issuit='0') or (exists (select 1 from secu_t_suittab where suitid = secu_t_table.tableid and secu_t_suittab.tableid = v_tableid) and issuit='1')) and secu_t_table.MANID = TRow.MANID)
            and TRow.manid in (select COLUMN_VALUE from table(p_user_Roles))
            and exists(select 1 from secu_t_agency where secu_t_agency.manid=TRow.manid and agencyid=substr(v_agencycode,1,3))
     group by tableid,baseSecu;    
    return p_secu_Rows(v_tmp_CacheCode).RowArray;
  end f_Get_UserToRow_1;
  
    FUNCTION F_GET_SECU_TAB(V_APPID VARCHAR2,V_MANID VARCHAR2,V_USERTYPE VARCHAR2,V_TABLEID VARCHAR2,V_AGENCYCODE VARCHAR2) RETURN VARCHAR2 IS
      V_TMP    VARCHAR2(100);
      V_RESULT TYPE_BGT_SECUROLE;
    BEGIN
      --得到当前用户对应的角色
      P_USER_ROLES:=F_GET_USERTOROLE_ARRAY(V_APPID,V_MANID,V_USERTYPE,V_AGENCYCODE);
      --获取时间
      V_TMP:=F_GET_TABLE_TIME(V_APPID,V_MANID,V_USERTYPE,V_AGENCYCODE);
      IF GLOBAL_ISMULTDB.V_ISZY='0' THEN
         WITH TK AS(
SELECT TABID||CASE WHEN COUNT(TABID)>0 THEN MAX(BASESECU)||MAX(EXTADD)||MAX(EXTDEL)||MAX(EXTUPDATE) ELSE '1111' END S_DATA
      FROM (SELECT TAB.MANID,TAB.BASESECU,TAB.EXTADD,TAB.EXTDEL,TAB.EXTUPDATE,TAB.TABLEID TABID FROM SECU_T_TABLE TAB WHERE TAB.TABLEID = V_TABLEID AND TAB.ISSUIT='0' AND TAB.MANID IN (SELECT COLUMN_VALUE FROM TABLE(P_USER_ROLES))
            UNION ALL
            SELECT TAB.MANID,TAB.BASESECU,TAB.EXTADD,TAB.EXTDEL,TAB.EXTUPDATE,SUIT.TABLEID TABID FROM SECU_T_TABLE TAB,(SELECT V_TABLEID TABLEID, SUITID FROM DICT_T_SUIT START WITH SUITID = (SELECT SUITID FROM DICT_T_MODEL WHERE TABLEID = V_TABLEID) CONNECT BY SUITID = PRIOR SUPERID) SUIT 
            WHERE TAB.TABLEID=SUIT.SUITID AND TAB.ISSUIT='1' AND TAB.MANID IN (SELECT COLUMN_VALUE FROM TABLE(P_USER_ROLES)))KKK GROUP BY TABID)
SELECT NVL(MAX(BASESECU),V_TABLEID||'1111') INTO V_TMP
      FROM (SELECT SUBSTR(S_DATA,1,LENGTH(S_DATA)-4) AS TABLEID,S_DATA BASESECU FROM  TK) TTT
     WHERE TTT.TABLEID=V_TABLEID;
      ELSE 
      --获得当前表的权限
      --格式为:TABLEID+BASESECU+EXTADDD+EXTDEL+EXTUPDATE
      WITH TK AS(
SELECT TABID||CASE WHEN COUNT(TABID)>0 THEN MAX(BASESECU)||MAX(EXTADD)||MAX(EXTDEL)||MAX(EXTUPDATE) ELSE '1111' END S_DATA
      FROM (SELECT TAB.MANID,TAB.BASESECU,TAB.EXTADD,TAB.EXTDEL,TAB.EXTUPDATE,TAB.TABLEID TABID FROM SECU_T_TABLE TAB WHERE TAB.TABLEID = V_TABLEID AND TAB.ISSUIT='0' AND TAB.MANID IN (SELECT COLUMN_VALUE FROM TABLE(P_USER_ROLES)) AND EXISTS(SELECT 1 FROM SECU_T_AGENCY WHERE SECU_T_AGENCY.MANID=TAB.MANID AND AGENCYID=SUBSTR(V_AGENCYCODE,1,3))
            UNION ALL
            SELECT TAB.MANID,TAB.BASESECU,TAB.EXTADD,TAB.EXTDEL,TAB.EXTUPDATE,SUIT.TABLEID TABID 
            FROM SECU_T_TABLE TAB,
            (SELECT V_TABLEID TABLEID, SUITID FROM DICT_T_SUIT START WITH SUITID = (SELECT SUITID FROM DICT_T_MODEL WHERE TABLEID = V_TABLEID) CONNECT BY SUITID = PRIOR SUPERID) SUIT 
            WHERE TAB.TABLEID=SUIT.SUITID AND TAB.ISSUIT='1' AND TAB.MANID 
            IN (SELECT COLUMN_VALUE FROM TABLE(P_USER_ROLES)) 
            AND EXISTS(SELECT 1 FROM SECU_T_AGENCY WHERE SECU_T_AGENCY.MANID=TAB.MANID  AND AGENCYID=SUBSTR(V_AGENCYCODE,1,3)))KKK GROUP BY TABID)
SELECT NVL(MAX(BASESECU),V_TABLEID||'1111') INTO V_TMP
      FROM (SELECT SUBSTR(S_DATA,1,LENGTH(S_DATA)-4) AS TABLEID,S_DATA BASESECU FROM  TK) TTT
     WHERE TTT.TABLEID=V_TABLEID;
     END IF; 
      RETURN V_TMP;
    END F_GET_SECU_TAB;
end PK_BGT_SECU;]]></SQL_CONTENT>
    </SQL>
  </PACKAGE_BODY>
  <TYPE_BODY>
    <SQL>
      <OBJECT_NAME>CONNSTRIMPLA</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE TYPE BODY CONNSTRIMPLA is
      static function ODCIAggregateInitialize(sctx IN OUT connstrImplA)
      return number is
      begin
        sctx := connstrImplA('','');
        return ODCIConst.Success;
      end;
      member function ODCIAggregateIterate(self IN OUT connstrImplA, value IN VARCHAR2) return number is
      begin
        if self.currentstr is null then
          self.currentstr := value;
        else
          self.currentstr := self.currentstr ||currentseprator || value;
        end if;
        return ODCIConst.Success;
      end;
      member function ODCIAggregateTerminate(self IN connstrImplA, returnValue OUT VARCHAR2, flags IN number) return number is
      begin
        returnValue := self.currentstr;
        return ODCIConst.Success;
      end;
      member function ODCIAggregateMerge(self IN OUT connstrImplA, ctx2 IN connstrImplA) return number is
      begin
        if ctx2.currentstr is null then
          self.currentstr := self.currentstr;
        elsif self.currentstr is null then
          self.currentstr := ctx2.currentstr;
        else
          self.currentstr := self.currentstr || currentseprator || ctx2.currentstr;
        end if;
        return ODCIConst.Success;
      end;
      end;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>CONNSTRIMPLCLOB</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE TYPE BODY CONNSTRIMPLCLOB is
      static function ODCIAggregateInitialize(sctx IN OUT CONNSTRIMPLCLOB)
      return number is
      begin
        sctx := CONNSTRIMPLCLOB('','');
        return ODCIConst.Success;
      end;
      member function ODCIAggregateIterate(self IN OUT CONNSTRIMPLCLOB, value IN VARCHAR2) return number is
      begin
        if self.currentstr is null then
          self.currentstr := value;
        else
          self.currentstr := self.currentstr ||currentseprator || value;
        end if;
        return ODCIConst.Success;
      end;
      member function ODCIAggregateTerminate(self IN CONNSTRIMPLCLOB, returnValue OUT clob, flags IN number) return number is
      begin
        returnValue := self.currentstr;
        return ODCIConst.Success;
      end;
      member function ODCIAggregateMerge(self IN OUT CONNSTRIMPLCLOB, ctx2 IN CONNSTRIMPLCLOB) return number is
      begin
        if ctx2.currentstr is null then
          self.currentstr := self.currentstr;
        elsif self.currentstr is null then
          self.currentstr := ctx2.currentstr;
        else
          self.currentstr := self.currentstr || currentseprator || ctx2.currentstr;
        end if;
        return ODCIConst.Success;
      end;
      end;]]></SQL_CONTENT>
    </SQL>
  </TYPE_BODY>
  <JAVA_SOURCE>
    <SQL>
      <OBJECT_NAME>DIRLIST</OBJECT_NAME>
      <SQL_COMMENT><![CDATA[获得服务器上指定目录下的所有文件，需要有DBA_DIRECTORIES的READ权限]]></SQL_COMMENT>
      <SQL_CONTENT><![CDATA[create or replace and compile java source named dirlist as
import java.io.*;
import java.sql.*;
import oracle.jdbc.*;
/**
 * @author huangshch
 *
 */
public class dirList {
  /**
   * @param args
   * @throws SQLException
   * @throws IOException
   */
  public static void getFileList(String directory) throws IOException,SQLException {
    String filePath;
    Connection conn = DriverManager.getConnection("jdbc:default:connection:");
        String sql ="INSERT INTO DATA_T_DIRLIST(FILEPATH,FILENAME,FILESIZE,FILEDATE,ISDIRECTORY)" +
            " VALUES(?,?,?,to_date(?,'yyyymmddhh24miss'),?)";
        PreparedStatement psql = conn.prepareStatement("SELECT DIRECTORY_PATH  FROM DBA_DIRECTORIES WHERE DIRECTORY_NAME = ?");
        psql.setString(1,directory);
        ResultSet rs = psql.executeQuery();
        rs.next();
        filePath = rs.getString(1);
    rs.close();
    psql.close();

    File path = new File(filePath);
    String[] fileList=path.list();
    String fileName;

    long fileSize;
    long fileDate;
    java.util.Calendar cal = java.util.Calendar.getInstance();
    for (int i=0;i<fileList.length;i++){
      fileName = fileList[i];
      File fPath=new File(filePath+'/'+fileName);
      fileSize=fPath.length();
        fileDate=fPath.lastModified();
        cal.setTimeInMillis(fileDate);
      java.util.Date date = cal.getTime();
      java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
      String sdate = sdf.format(date);
        PreparedStatement pstmt = conn.prepareStatement(sql);
        pstmt.setString(1,directory);
        pstmt.setString(2,fileName);
        pstmt.setLong(3,fileSize);
        pstmt.setString(4,sdate);
        pstmt.setString(5,fPath.isDirectory()?"1":"0");
        pstmt.executeUpdate();
        pstmt.close();
    }
  }
}]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>JENCRYPT</OBJECT_NAME>
      <SQL_COMMENT><![CDATA[MD5加密算法]]></SQL_COMMENT>
      <SQL_CONTENT><![CDATA[create or replace and compile java source named JENCRYPT as
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
public class ENCRYPT {
  public final static String MD5(String s) throws NoSuchAlgorithmException {
    char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        'A', 'B', 'C', 'D', 'E', 'F' };
    if (s == null) {
      return "";
    }
    byte[] btInput = s.getBytes();
    // 获得MD5摘要算法的 MessageDigest 对象
    MessageDigest mdInst = MessageDigest.getInstance("MD5");
    // 使用指定的字节更新摘要
    mdInst.update(btInput);
    // 获得密文
    byte[] md = mdInst.digest();
    // 把密文转换成十六进制的字符串形式
    int j = md.length;
    char str[] = new char[j * 2];
    int k = 0;
    for (int i = 0; i < j; i++) {
      byte byte0 = md[i];
      str[k++] = hexDigits[byte0 >>> 4 & 0xf];
      str[k++] = hexDigits[byte0 & 0xf];
    }
    return new String(str);
  }
}]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>JREGULAR_EXP</OBJECT_NAME>
      <SQL_COMMENT><![CDATA[正则表达式验证]]></SQL_COMMENT>
      <SQL_CONTENT><![CDATA[create or replace and compile java source named jregular_exp as
import java.util.regex.Matcher; 
import java.util.regex.Pattern; 
public class RegCheck
{
  public static int CheckData(String sData,String sRegExp)
  {
    Pattern p1 = Pattern.compile(sRegExp); 
    Matcher m1 = p1.matcher(sData); 
    return (m1.matches()?1:0);
  }
}]]></SQL_CONTENT>
    </SQL>
  </JAVA_SOURCE>
  <TRIGGER>
    <SQL>
      <OBJECT_NAME>STND_P#CAL_T_STANDARD_TR</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE TRIGGER STND_P#CAL_T_STANDARD_TR 
AFTER DELETE OR UPDATE ON P#CAL_T_STANDARD FOR EACH ROW
DECLARE
  V_STNDID VARCHAR2(32);
  V_NEEDUPDATE VARCHAR2(4000);
  V_SQL VARCHAR2(4000);
BEGIN
  IF DELETING THEN
    V_STNDID := :OLD.STANDARDID;
  END IF;
  
  IF UPDATING('YEAR') OR UPDATING('PROVINCE') OR UPDATING('STANDARDID') OR UPDATING('SUPERID') OR UPDATING('ISLEAF') OR UPDATING('STATUS') THEN
    V_STNDID := :OLD.STANDARDID;
  ELSE
    RETURN;
  END IF;
  
  FOR C_COL IN (SELECT X.AGENCYID,X.PROJTYPEID,X.EXPECOID,Z.DBCOLUMNNAME,T.DBTABLENAME
    FROM CAL_T_OUTWINDOWSET X,CAL_T_FORMULA Y,DICT_T_FACTOR Z,DICT_T_MODEL T
    WHERE X.FORMULAID = Y.FORMULAID AND Y.TABLEID = Z.TABLEID AND X.FUNDSOURCEID = Z.COLUMNID AND T.TABLEID = Y.TABLEID  AND Z.ISLEAF = '1' AND Y.STANDARDID LIKE '%'||V_STNDID||',%') LOOP
    V_NEEDUPDATE := ','||C_COL.DBCOLUMNNAME||',6,';
    IF C_COL.AGENCYID = '*' THEN
      V_SQL := 'UPDATE '||C_COL.DBTABLENAME||' SET NEEDUPDATE = NEEDUPDATE||'''||V_NEEDUPDATE||''' 
      WHERE PROJTYPEID = :2 AND EXPECOID = :3  AND NVL(INSTR(NEEDUPDATE,'''||V_NEEDUPDATE||'''),0) < 1';
      EXECUTE IMMEDIATE V_SQL USING C_COL.PROJTYPEID,C_COL.EXPECOID;
    ELSE
      V_SQL := 'UPDATE '||C_COL.DBTABLENAME||' SET NEEDUPDATE = NEEDUPDATE||'''||V_NEEDUPDATE||''' 
      WHERE AGENCYID = :1 AND PROJTYPEID = :2 AND EXPECOID = :3  AND NVL(INSTR(NEEDUPDATE,'''||V_NEEDUPDATE||'''),0) < 1';
      EXECUTE IMMEDIATE V_SQL USING C_COL.AGENCYID,C_COL.PROJTYPEID,C_COL.EXPECOID;
    END IF;
  END LOOP;
END STND_P#CAL_T_STANDARD_TR;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>STND_P#CAL_T_AGSTANDGRADE_TR</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE TRIGGER STND_P#CAL_T_AGSTANDGRADE_TR
AFTER DELETE OR UPDATE ON P#CAL_T_AGSTANDGRADE FOR EACH ROW
DECLARE
  V_STNDID VARCHAR2(32);
  V_NEEDUPDATE VARCHAR2(4000);
  V_SQL VARCHAR2(4000);
BEGIN
  IF DELETING THEN
    V_STNDID := :OLD.STANDARDID;
  END IF;
  
  IF UPDATING('YEAR') OR UPDATING('PROVINCE') OR UPDATING('AGENCYID') OR UPDATING('GRADEID') OR UPDATING('STANDARDID') OR UPDATING('STATUS') THEN
    V_STNDID := :OLD.STANDARDID;
  ELSE
    RETURN;
  END IF;
  
  FOR C_COL IN (SELECT X.AGENCYID,X.PROJTYPEID,X.EXPECOID,Z.DBCOLUMNNAME,T.DBTABLENAME
    FROM CAL_T_OUTWINDOWSET X,CAL_T_FORMULA Y,DICT_T_FACTOR Z,DICT_T_MODEL T
    WHERE X.FORMULAID = Y.FORMULAID AND Y.TABLEID = Z.TABLEID AND X.FUNDSOURCEID = Z.COLUMNID AND T.TABLEID = Y.TABLEID  AND Z.ISLEAF = '1' AND Y.STANDARDID LIKE '%'||V_STNDID||',%') LOOP
    V_NEEDUPDATE := ','||C_COL.DBCOLUMNNAME||',6,';
    IF C_COL.AGENCYID = '*' THEN
      V_SQL := 'UPDATE '||C_COL.DBTABLENAME||' SET NEEDUPDATE = NEEDUPDATE||'''||V_NEEDUPDATE||''' 
      WHERE PROJTYPEID = :2 AND EXPECOID = :3  AND NVL(INSTR(NEEDUPDATE,'''||V_NEEDUPDATE||'''),0) < 1';
      EXECUTE IMMEDIATE V_SQL USING C_COL.PROJTYPEID,C_COL.EXPECOID;
    ELSE
      V_SQL := 'UPDATE '||C_COL.DBTABLENAME||' SET NEEDUPDATE = NEEDUPDATE||'''||V_NEEDUPDATE||''' 
      WHERE AGENCYID = :1 AND PROJTYPEID = :2 AND EXPECOID = :3  AND NVL(INSTR(NEEDUPDATE,'''||V_NEEDUPDATE||'''),0) < 1';
      EXECUTE IMMEDIATE V_SQL USING C_COL.AGENCYID,C_COL.PROJTYPEID,C_COL.EXPECOID;
    END IF;
  END LOOP;
END STND_P#CAL_T_AGSTANDGRADE_TR;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>STND_P#CAL_T_STANDGRADE_TR</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE TRIGGER STND_P#CAL_T_STANDGRADE_TR
AFTER DELETE OR UPDATE ON P#CAL_T_STANDGRADE FOR EACH ROW
DECLARE
  V_STNDID VARCHAR2(32);
  V_NEEDUPDATE VARCHAR2(4000);
  V_SQL VARCHAR2(4000);
BEGIN
  IF DELETING THEN
    V_STNDID := :OLD.STANDARDID;
  END IF;
  
  IF UPDATING('YEAR') OR UPDATING('PROVINCE') OR UPDATING('GRADEID') OR UPDATING('STANDARDID') OR UPDATING('NUMVALUE') OR UPDATING('STATUS') THEN
    V_STNDID := :OLD.STANDARDID;
  ELSE
    RETURN;
  END IF;
  
  FOR C_COL IN (SELECT X.AGENCYID,X.PROJTYPEID,X.EXPECOID,Z.DBCOLUMNNAME,T.DBTABLENAME
    FROM CAL_T_OUTWINDOWSET X,CAL_T_FORMULA Y,DICT_T_FACTOR Z,DICT_T_MODEL T
    WHERE X.FORMULAID = Y.FORMULAID AND Y.TABLEID = Z.TABLEID AND X.FUNDSOURCEID = Z.COLUMNID AND T.TABLEID = Y.TABLEID  AND Z.ISLEAF = '1' AND Y.STANDARDID LIKE '%'||V_STNDID||',%') LOOP
    V_NEEDUPDATE := ','||C_COL.DBCOLUMNNAME||',6,';
    IF C_COL.AGENCYID = '*' THEN
      V_SQL := 'UPDATE '||C_COL.DBTABLENAME||' SET NEEDUPDATE = NEEDUPDATE||'''||V_NEEDUPDATE||''' 
      WHERE PROJTYPEID = :2 AND EXPECOID = :3  AND NVL(INSTR(NEEDUPDATE,'''||V_NEEDUPDATE||'''),0) < 1';
      EXECUTE IMMEDIATE V_SQL USING C_COL.PROJTYPEID,C_COL.EXPECOID;
    ELSE
      V_SQL := 'UPDATE '||C_COL.DBTABLENAME||' SET NEEDUPDATE = NEEDUPDATE||'''||V_NEEDUPDATE||''' 
      WHERE AGENCYID = :1 AND PROJTYPEID = :2 AND EXPECOID = :3  AND NVL(INSTR(NEEDUPDATE,'''||V_NEEDUPDATE||'''),0) < 1';
      EXECUTE IMMEDIATE V_SQL USING C_COL.AGENCYID,C_COL.PROJTYPEID,C_COL.EXPECOID;
    END IF;
  END LOOP;
END STND_P#CAL_T_STANDGRADE_TR;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>FORMULA_T_FORMULADEF_ROW</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE TRIGGER FORMULA_T_FORMULADEF_ROW
  AFTER DELETE OR INSERT  OR UPDATE  ON P#FORMULA_T_FORMULADEF FOR EACH ROW 
DECLARE
  V_FORCOMCOL VARCHAR2(32);
BEGIN
 --2007/0628 WHF修改
 PKG_FORMULA.V_BEGIN := 0;
 IF DELETING THEN
      PKG_FORMULA.R_FORMULA_OLD.TABLEID := :OLD.TABLEID;
      PKG_FORMULA.R_FORMULA_OLD.FORMULAID := :OLD.FORMULAID;
      V_FORCOMCOL := :OLD.FORCOMCOL;
      PKG_FORMULA.R_FORMULA_NEW.TABLEID := V_FORCOMCOL;
      --直接删除记录
      DELETE FROM FORMULA_T_FORMULADETAIL WHERE FORMULAID = :OLD.FORMULAID;
  END IF;
  IF INSERTING THEN
     IF '*'  <> NVL(DBMS_LOB.SUBSTR(:NEW.FORMULADEF,32000,1),'*') THEN
         PKG_FORMULA.R_FORMULA_NEW.STATUS := :NEW.STATUS;
         PKG_FORMULA.R_FORMULA_NEW.TABLEID := :NEW.TABLEID;
         PKG_FORMULA.R_FORMULA_NEW.FORMULAID := :NEW.FORMULAID;
         PKG_FORMULA.R_FORMULA_NEW.FORMULATYPE := :NEW.FORMULATYPE;
     ELSE
         PKG_FORMULA.V_BEGIN := 1;
     END IF;
  END IF;
  IF UPDATING   THEN
    IF :OLD.STATUS = '1' AND (:NEW.STATUS ='2' OR :NEW.STATUS ='3') THEN
      PKG_FORMULA.R_FORMULA_OLD.STATUS := :OLD.STATUS;
      PKG_FORMULA.R_FORMULA_OLD.TABLEID := :OLD.TABLEID;
      PKG_FORMULA.R_FORMULA_OLD.FORMULAID := :OLD.FORMULAID;
      PKG_FORMULA.R_FORMULA_OLD.FORMULATYPE := :OLD.FORMULATYPE;
      
      PKG_FORMULA.R_FORMULA_NEW.STATUS := :NEW.STATUS;
      PKG_FORMULA.R_FORMULA_NEW.TABLEID := :NEW.TABLEID;
      PKG_FORMULA.R_FORMULA_NEW.FORMULAID := :NEW.FORMULAID;
      PKG_FORMULA.R_FORMULA_NEW.FORMULATYPE := :NEW.FORMULATYPE;
      
      V_FORCOMCOL := :OLD.FORCOMCOL;
      PKG_FORMULA.R_FORMULA_NEW.TABLEID := V_FORCOMCOL;
      --
      --PKG_FORMULA.V_BEGIN := 1;
      UPDATE FORMULA_T_FORMULADETAIL SET STATUS = :NEW.STATUS WHERE FORMULAID = :OLD.FORMULAID;
    ELSE
      IF NVL(DBMS_LOB.SUBSTR(:OLD.FORMULADEF,32000,1),'*')  <> NVL(DBMS_LOB.SUBSTR(:NEW.FORMULADEF,32000,1),'*') THEN
         PKG_FORMULA.R_FORMULA_NEW.STATUS := :NEW.STATUS;
         PKG_FORMULA.R_FORMULA_NEW.TABLEID := :NEW.TABLEID;
         PKG_FORMULA.R_FORMULA_NEW.FORMULAID := :NEW.FORMULAID;
         PKG_FORMULA.R_FORMULA_NEW.FORMULATYPE := :NEW.FORMULATYPE;
         --
         PKG_FORMULA.R_FORMULA_OLD.STATUS := :OLD.STATUS;
         PKG_FORMULA.R_FORMULA_OLD.TABLEID := :OLD.TABLEID;
         PKG_FORMULA.R_FORMULA_OLD.FORMULAID := :OLD.FORMULAID;
         PKG_FORMULA.R_FORMULA_OLD.FORMULATYPE := :OLD.FORMULATYPE;
         --删除记录
         DELETE FROM FORMULA_T_FORMULADETAIL WHERE FORMULAID = :OLD.FORMULAID;
      ELSE
          PKG_FORMULA.V_BEGIN := 1;
      END IF;
     END IF;
  END IF;
END FORMULA_T_FORMULADEF_ROW;]]></SQL_CONTENT>
    </SQL>
    <SQL>
      <OBJECT_NAME>FORMULA_T_FORMULADEF_TR_INUP</OBJECT_NAME>
      <SQL_COMMENT />
      <SQL_CONTENT><![CDATA[CREATE OR REPLACE TRIGGER FORMULA_T_FORMULADEF_TR_INUP 
  AFTER INSERT OR UPDATE ON P#FORMULA_T_FORMULADEF
DECLARE
     V_TABLEID     VARCHAR2(32);
     V_FORMULAID   VARCHAR2(32);
     V_FORMULACON  VARCHAR2(32000);
     V_FORMULATYPE  VARCHAR2(32);
     V_FORCOMCOL VARCHAR2(100);
     V_FACTORNAME VARCHAR2(100);
     V_STATUS CHAR(1);
     V_OEX EXCEPTION;
BEGIN
     IF PKG_FORMULA.V_BEGIN  = 0 THEN
        PKG_FORMULA.V_BEGIN := 1;
        V_TABLEID := PKG_FORMULA.R_FORMULA_NEW.TABLEID ;
        V_FORMULAID :=  PKG_FORMULA.R_FORMULA_NEW.FORMULAID;
        V_FORMULATYPE := PKG_FORMULA.R_FORMULA_NEW.FORMULATYPE;
        V_STATUS := PKG_FORMULA.R_FORMULA_NEW.STATUS;
        --创建临时表
        IF V_STATUS = '1' THEN
          SELECT DBMS_LOB.SUBSTR(FORMULADEF,30000,1) INTO V_FORMULACON FROM FORMULA_T_FORMULADEF WHERE TABLEID =V_TABLEID AND FORMULAID = V_FORMULAID;
          IF V_FORMULATYPE = '0' THEN --表内列公式
             PKG_FORMULA.FORMULA_DEF_INSERT_0(V_TABLEID,V_FORMULAID,V_FORMULACON);
          END IF;
          IF V_FORMULATYPE = '1' THEN --浮动表和固定行列表表内单元格公式
             PKG_FORMULA.P_DEF_INSERT_1(V_TABLEID,V_FORMULAID,V_FORMULACON);
          END IF;
          /*
          IF V_FORMULATYPE = '2' THEN --表内行公式
             FORMULA_DEF_INSERT_2(V_TABLEID,V_FORMULAID,V_FORMULACON,'1');
          END IF;
          IF V_FORMULATYPE = '5' THEN --支出表表内行公式
             FORMULA_DEF_INSERT_5(V_TABLEID,V_FORMULAID,V_FORMULACON,V_ISDEFAULT);
          END IF;
          IF V_FORMULATYPE = '6' THEN --支出表标准类档公式
             FORMULA_DEF_INSERT_6(V_TABLEID,V_FORMULAID,V_FORMULACON,V_ISDEFAULT);
          END IF;
          */
          IF V_FORMULATYPE = '8' THEN --表间列公式
             PKG_FORMULA.FORMULA_DEF_INSERT_8(V_TABLEID,V_FORMULAID,V_FORMULACON);
          END IF;
          /*
          IF V_FORMULATYPE = '9' THEN --支出表表内行公式
             FORMULA_DEF_INSERT_9(V_TABLEID,V_FORMULAID,V_FORMULACON,V_ISDEFAULT);
          END IF;
          */
          IF V_FORMULATYPE = '10' THEN --测算公式
             PKG_FORMULA.P_DEF_INSERT_10(V_TABLEID,V_FORMULAID,V_FORMULACON);
          END IF;
        ELSE
          IF V_FORMULATYPE = '0' THEN
            V_TABLEID   := PKG_FORMULA.R_FORMULA_OLD.TABLEID;
            V_FORMULAID := PKG_FORMULA.R_FORMULA_OLD.FORMULAID ;
            V_FORCOMCOL := TRIM(UPPER(PKG_FORMULA.R_FORMULA_NEW.TABLEID));
            -----
            SELECT NAME INTO V_FACTORNAME FROM DICT_T_FACTOR WHERE TABLEID =V_TABLEID AND UPPER(DBCOLUMNNAME) =UPPER(V_FORCOMCOL);
            FOR V_RECORD_OTH IN(SELECT FORMULAID, CAST(FORMULADEF AS VARCHAR2(4000)) REFCOMCONT FROM FORMULA_T_FORMULADEF WHERE TABLEID =V_TABLEID AND FORMULATYPE = '0' AND FORMULAID <> V_FORMULAID AND INSTR(UPPER(REFCOLUMN),','||V_FORCOMCOL||',',1,1)>0) LOOP
               --首先删除记录
               DELETE FROM FORMULA_T_FORMULADETAIL WHERE TABLEID = V_TABLEID AND FORMULAID =V_RECORD_OTH.FORMULAID AND FORMULATYPE='0';
               PKG_FORMULA.FORMULA_DEF_INSERT_0(V_TABLEID,V_RECORD_OTH.FORMULAID,V_RECORD_OTH.REFCOMCONT);
            END LOOP;
          END IF;
        END IF;
     END IF;
      PKG_FORMULA.V_BEGIN  := 0;
END FORMULA_T_FORMULADEF_TR_INUP;]]></SQL_CONTENT>
    </SQL>
  </TRIGGER>
</INSTALL_SQL>

